// Code generated by command: go run gen.go -out encodeblock_amd64.s -stubs encodeblock_amd64.go. DO NOT EDIT.

// +build !appengine
// +build !noasm
// +build gc

#include "textflag.h"

// func encodeBlockAsm(dst []byte, src []byte) int
TEXT 路encodeBlockAsm(SB), NOSPLIT, $65656-56
	MOVQ $0x00000200, AX
	LEAQ 120(SP), CX
	PXOR X0, X0

zeroLoopencodeBlockAsm:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zeroLoopencodeBlockAsm
	MOVL  AX, 64(SP)
	MOVQ  src_len+32(FP), DX
	LEAQ  -5(DX), BX
	LEAQ  -8(DX), BP
	SHRQ  $0x05, DX
	SUBL  BX, DX
	MOVL  BP, 56(SP)
	MOVL  DX, 60(SP)
	MOVB  $0x01, SI
	MOVL  SI, 68(SP)
	MOVQ  src_base+24(FP), AX

searchLoopencodeBlockAsm:
	MOVQ  (AX)(SI*1), DX
	MOVL  64(SP), DI
	SUBL  SI, DI
	SHRL  $0x06, DI
	LEAQ  4(SI)(DI*1), CX
	MOVQ  $0x0000cf1bbcdcbf9b, BX
	MOVQ  DX, BP
	MOVQ  DX, R15
	SHRQ  $0x08, R15
	SHLQ  $0x10, BP
	IMULQ BX, BP
	SHRQ  $0x30, BP
	SHLQ  $0x10, R15
	IMULQ BX, R15
	SHRQ  $0x30, R15
	MOVL  120(SP)(BP*1), CX
	MOVL  120(SP)(R15*1), CX
	MOVL  SI, 120(SP)(BP*1)
	MOVQ  SI, R8
	DECQ  R8
	MOVL  R8, 120(SP)(R15*1)
	MOVQ  DX, CX
	SHRQ  $0x10, CX
	SHLQ  $0x10, CX
	IMULQ BX, CX
	SHRQ  $0x30, CX
	MOVL  68(SP), R10
	MOVQ  SI, CX
	SUBQ  CX, R10
	MOVL  1(AX), CX
	MOVQ  DX, R9
	SHLQ  $0x08, R9
	CMPL  R9, CX
	JNE   noRepeatFoundencodeBlockAsm
	LEAQ  1(SI), R11
	MOVQ  64(SP), R12
	TESTQ R10, R10
	JZ    extendBackEndencodeBlockAsm

extendBackLoopencodeBlockAsm:
	CMPQ R11, R12
	JG   extendBackEndencodeBlockAsm
	MOVB -1(AX)(R10*1), CL
	MOVB -1(AX)(R11*1), DL
	CMPB CL, DL
	JNE  extendBackEndencodeBlockAsm
	LEAQ -1(R11), R11
	DECQ R10
	JZ   extendBackEndencodeBlockAsm
	JMP  extendBackLoopencodeBlockAsm

extendBackEndencodeBlockAsm:
	MOVQ 64(SP), DX
	MOVQ R11, CX
	LEAQ (AX)(DX*1), BX
	SUBQ CX, DX
	MOVQ dst_base+0(FP), BP
	XORQ CX, CX
	MOVQ R11, 64(SP)
	MOVQ DX, CX
	MOVQ DX, R13
	SUBL $0x01, R13
	JC   emitLiteralDoneRepeatencodeBlockAsm
	CMPL R13, $0x3c
	JLT  oneByteRepeatencodeBlockAsm
	CMPL R13, $0x00000100
	JLT  twoBytesRepeatencodeBlockAsm
	CMPL R13, $0x00010000
	JLT  threeBytesRepeatencodeBlockAsm
	CMPL R13, $0x01000000
	JLT  fourBytesRepeatencodeBlockAsm
	MOVB $0xfc, (BP)
	MOVL R13, 1(BP)
	ADDQ $0x05, CX
	ADDQ $0x05, BP
	JMP  memmoveRepeatencodeBlockAsm

fourBytesRepeatencodeBlockAsm:
	MOVQ R13, R14
	SHRL $0x10, R14
	MOVB $0xf8, (BP)
	MOVW R13, 1(BP)
	MOVB R14, 3(BP)
	ADDQ $0x04, CX
	ADDQ $0x04, BP
	JMP  memmoveRepeatencodeBlockAsm

threeBytesRepeatencodeBlockAsm:
	MOVB $0xf4, (BP)
	MOVW R13, 1(BP)
	ADDQ $0x03, CX
	ADDQ $0x03, BP
	JMP  memmoveRepeatencodeBlockAsm

twoBytesRepeatencodeBlockAsm:
	MOVB $0xf0, (BP)
	MOVB R13, 1(BP)
	ADDQ $0x02, CX
	ADDQ $0x02, BP
	JMP  memmoveRepeatencodeBlockAsm

oneByteRepeatencodeBlockAsm:
	SHLB $0x02, R13
	MOVB R13, (BP)
	ADDQ $0x01, CX
	ADDQ $0x01, BP

memmoveRepeatencodeBlockAsm:
	MOVQ  DX, CX
	SHRQ  $0x07, CX
	TESTQ CX, CX
	JZ    Done128EmitLitMemMoveRepeatencodeBlockAsm

Loop128EmitLitMemMoveRepeatencodeBlockAsm:
	MOVOU (BX), X0
	MOVOU 16(BX), X1
	MOVOU 32(BX), X2
	MOVOU 48(BX), X3
	MOVOU 64(BX), X4
	MOVOU 80(BX), X5
	MOVOU 96(BX), X6
	MOVOU 112(BX), X7
	MOVOU X0, (BP)
	MOVOU X1, 16(BP)
	MOVOU X2, 32(BP)
	MOVOU X3, 48(BP)
	MOVOU X4, 64(BP)
	MOVOU X5, 80(BP)
	MOVOU X6, 96(BP)
	MOVOU X7, 112(BP)
	LEAQ  128(BX), BX
	LEAQ  128(BP), BP
	LEAQ  -128(DX), DX
	DECQ  CX
	JNZ   Loop128EmitLitMemMoveRepeatencodeBlockAsm

Done128EmitLitMemMoveRepeatencodeBlockAsm:
	MOVQ  DX, CX
	SHRQ  $0x04, CX
	TESTQ CX, CX
	JZ    Done16EmitLitMemMoveRepeatencodeBlockAsm

Loop16EmitLitMemMoveRepeatencodeBlockAsm:
	MOVOU (BX), X0
	MOVOU X0, (BP)
	LEAQ  16(BX), BX
	LEAQ  16(BP), BP
	LEAQ  -16(DX), DX
	DECQ  CX
	JNZ   Loop16EmitLitMemMoveRepeatencodeBlockAsm

Done16EmitLitMemMoveRepeatencodeBlockAsm:
	TESTQ DX, DX
	JZ    emitLiteralDoneRepeatencodeBlockAsm

Loop1EmitLitMemMoveRepeatencodeBlockAsm:
	MOVB (BX), CL
	MOVB CL, (BP)
	LEAQ 1(BX), BX
	LEAQ 1(BP), BP
	DECQ DX
	JNZ  Loop1EmitLitMemMoveRepeatencodeBlockAsm

emitLiteralDoneRepeatencodeBlockAsm:
	MOVQ BP, dst_base+0(FP)
	LEAQ 5(SI), SI
	MOVQ 68(SP), CX
	SUBQ SI, CX
	MOVQ SI, CX
	SUBQ 56(SP), CX
	XORQ BX, BX
	CMPQ CX, $0x08
	JL   matchlen_singleRepeat

matchlen_loopbackRepeat:
	MOVQ  (AX)(BX*1), DX
	XORQ  (AX)(BX*1), DX
	TESTQ DX, DX
	JZ    matchlen_loopRepeat
	BSFQ  DX, DX
	SARQ  $0x03, DX
	LEAQ  (BX)(DX*1), BX
	JMP   repeatExtendForwardEndencodeBlockAsm

matchlen_loopRepeat:
	LEAQ -8(CX), CX
	LEAQ 8(BX), BX
	CMPQ CX, $0x08
	JGE  matchlen_loopbackRepeat

matchlen_singleRepeat:
	TESTQ CX, CX
	JZ    repeatExtendForwardEndencodeBlockAsm

matchlen_single_loopbackRepeat:
	MOVB (AX)(BX*1), DL
	CMPB (AX)(BX*1), DL
	JNE  repeatExtendForwardEndencodeBlockAsm
	LEAQ 1(BX), BX
	DECQ CX
	JNZ  matchlen_single_loopbackRepeat

repeatExtendForwardEndencodeBlockAsm:
	ADDQ BX, SI
	JMP  searchLoopencodeBlockAsm

noRepeatFoundencodeBlockAsm:
	NOP
	MOVQ src_len+32(FP), AX
	RET

// func emitLiteral(dst []byte, lit []byte) int
TEXT 路emitLiteral(SB), NOSPLIT, $0-56
	MOVQ dst_base+0(FP), AX
	MOVQ lit_base+24(FP), CX
	MOVQ lit_len+32(FP), DX
	MOVQ DX, BX
	MOVQ DX, BP
	SUBL $0x01, BP
	JC   emitLiteralEndStandalone
	CMPL BP, $0x3c
	JLT  oneByteStandalone
	CMPL BP, $0x00000100
	JLT  twoBytesStandalone
	CMPL BP, $0x00010000
	JLT  threeBytesStandalone
	CMPL BP, $0x01000000
	JLT  fourBytesStandalone
	MOVB $0xfc, (AX)
	MOVL BP, 1(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  memmoveStandalone

fourBytesStandalone:
	MOVQ BP, SI
	SHRL $0x10, SI
	MOVB $0xf8, (AX)
	MOVW BP, 1(AX)
	MOVB SI, 3(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  memmoveStandalone

threeBytesStandalone:
	MOVB $0xf4, (AX)
	MOVW BP, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  memmoveStandalone

twoBytesStandalone:
	MOVB $0xf0, (AX)
	MOVB BP, 1(AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  memmoveStandalone

oneByteStandalone:
	SHLB $0x02, BP
	MOVB BP, (AX)
	ADDQ $0x01, BX
	ADDQ $0x01, AX

memmoveStandalone:
	MOVQ  DX, BP
	SHRQ  $0x07, BP
	TESTQ BP, BP
	JZ    Done128EmitLitMemMoveStandalone

Loop128EmitLitMemMoveStandalone:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	LEAQ  128(CX), CX
	LEAQ  128(AX), AX
	LEAQ  -128(DX), DX
	DECQ  BP
	JNZ   Loop128EmitLitMemMoveStandalone

Done128EmitLitMemMoveStandalone:
	MOVQ  DX, BP
	SHRQ  $0x04, BP
	TESTQ BP, BP
	JZ    Done16EmitLitMemMoveStandalone

Loop16EmitLitMemMoveStandalone:
	MOVOU (CX), X0
	MOVOU X0, (AX)
	LEAQ  16(CX), CX
	LEAQ  16(AX), AX
	LEAQ  -16(DX), DX
	DECQ  BP
	JNZ   Loop16EmitLitMemMoveStandalone

Done16EmitLitMemMoveStandalone:
	TESTQ DX, DX
	JZ    emitLiteralEndStandalone

Loop1EmitLitMemMoveStandalone:
	MOVB (CX), BP
	MOVB BP, (AX)
	LEAQ 1(CX), CX
	LEAQ 1(AX), AX
	DECQ DX
	JNZ  Loop1EmitLitMemMoveStandalone

emitLiteralEndStandalone:
	MOVQ BX, ret+48(FP)
	RET

// func emitRepeat(dst []byte, offset int, length int) int
TEXT 路emitRepeat(SB), NOSPLIT, $0-48
	XORQ BX, BX
	MOVQ dst_base+0(FP), AX
	MOVQ offset+24(FP), CX
	MOVQ length+32(FP), DX

emit_repeat_againStandalone:
	MOVQ DX, BP
	LEAQ -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_twoStandalone
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offsetStandalone
	CMPL CX, $0x00000800
	JLT  repeat_two_offsetStandalone

cant_repeat_two_offsetStandalone:
	CMPL DX, $0x00000104
	JLT  repeat_threeStandalone
	CMPL DX, $0x00010100
	JLT  repeat_fourStandalone
	CMPL DX, $0x0100ffff
	JLT  repeat_fiveStandalone
	LEAQ -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_againStandalone

repeat_fiveStandalone:
	LEAQ -65536(DX), DX
	MOVQ DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARQ $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  genEmitRepeatEnd

repeat_fourStandalone:
	LEAQ -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  genEmitRepeatEnd

repeat_threeStandalone:
	LEAQ -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  genEmitRepeatEnd

repeat_twoStandalone:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  genEmitRepeatEnd

repeat_two_offsetStandalone:
	XORQ BP, BP
	LEAQ 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX

genEmitRepeatEnd:
	MOVQ BX, ret+40(FP)
	RET

// func emitCopy(dst []byte, offset int, length int) int
TEXT 路emitCopy(SB), NOSPLIT, $0-48
	XORQ BX, BX
	MOVQ dst_base+0(FP), AX
	MOVQ offset+24(FP), CX
	MOVQ length+32(FP), DX
	CMPL CX, $0x00010000
	JL   twoByteOffsetStandalone
	CMPL DX, $0x40
	JLE  fourBytesRemainStandalone
	MOVB $0xff, (AX)
	MOVD CX, 1(AX)
	LEAQ -64(DX), DX
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	CMPL DX, $0x04
	JL   fourBytesRemainStandalone

emit_repeat_againStandaloneEmitCopy:
	MOVQ DX, BP
	LEAQ -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_twoStandaloneEmitCopy
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offsetStandaloneEmitCopy
	CMPL CX, $0x00000800
	JLT  repeat_two_offsetStandaloneEmitCopy

cant_repeat_two_offsetStandaloneEmitCopy:
	CMPL DX, $0x00000104
	JLT  repeat_threeStandaloneEmitCopy
	CMPL DX, $0x00010100
	JLT  repeat_fourStandaloneEmitCopy
	CMPL DX, $0x0100ffff
	JLT  repeat_fiveStandaloneEmitCopy
	LEAQ -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_againStandaloneEmitCopy

repeat_fiveStandaloneEmitCopy:
	LEAQ -65536(DX), DX
	MOVQ DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARQ $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  genEmitCopyEnd

repeat_fourStandaloneEmitCopy:
	LEAQ -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  genEmitCopyEnd

repeat_threeStandaloneEmitCopy:
	LEAQ -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  genEmitCopyEnd

repeat_twoStandaloneEmitCopy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  genEmitCopyEnd

repeat_two_offsetStandaloneEmitCopy:
	XORQ BP, BP
	LEAQ 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  genEmitCopyEnd

fourBytesRemainStandalone:
	JZ   genEmitCopyEnd
	MOVB $0x03, BP
	LEAQ -4(BP)(DX*4), DX
	MOVB DL, (AX)
	MOVD CX, 1(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  genEmitCopyEnd

twoByteOffsetStandalone:
	CMPL DX, $0x40
	JLE  twoByteOffsetShortStandalone
	MOVB $0xee, (AX)
	MOVW CX, 1(AX)
	LEAQ -60(DX), DX
	ADDQ $0x03, AX
	ADDQ $0x03, BX

emit_repeat_againStandaloneEmitCopyShort:
	MOVQ DX, BP
	LEAQ -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_twoStandaloneEmitCopyShort
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offsetStandaloneEmitCopyShort
	CMPL CX, $0x00000800
	JLT  repeat_two_offsetStandaloneEmitCopyShort

cant_repeat_two_offsetStandaloneEmitCopyShort:
	CMPL DX, $0x00000104
	JLT  repeat_threeStandaloneEmitCopyShort
	CMPL DX, $0x00010100
	JLT  repeat_fourStandaloneEmitCopyShort
	CMPL DX, $0x0100ffff
	JLT  repeat_fiveStandaloneEmitCopyShort
	LEAQ -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_againStandaloneEmitCopyShort

repeat_fiveStandaloneEmitCopyShort:
	LEAQ -65536(DX), DX
	MOVQ DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARQ $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  genEmitCopyEnd

repeat_fourStandaloneEmitCopyShort:
	LEAQ -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  genEmitCopyEnd

repeat_threeStandaloneEmitCopyShort:
	LEAQ -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  genEmitCopyEnd

repeat_twoStandaloneEmitCopyShort:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  genEmitCopyEnd

repeat_two_offsetStandaloneEmitCopyShort:
	XORQ BP, BP
	LEAQ 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  genEmitCopyEnd

twoByteOffsetShortStandalone:
	CMPL DX, $0x0c
	JGE  emitCopyThreeStandalone
	CMPL CX, $0x00000800
	JGE  emitCopyThreeStandalone
	MOVB $0x01, BP
	LEAQ -16(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  genEmitCopyEnd

emitCopyThreeStandalone:
	MOVB $0x02, BP
	LEAQ -4(BP)(DX*4), DX
	MOVB DL, (AX)
	MOVW CX, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX

genEmitCopyEnd:
	MOVQ BX, ret+40(FP)
	RET

// func matchLen(a []byte, b []byte) int
TEXT 路matchLen(SB), NOSPLIT, $0-56
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ a_len+8(FP), DX
	XORQ BP, BP
	CMPQ DX, $0x08
	JL   matchlen_singleStandalone

matchlen_loopbackStandalone:
	MOVQ  (AX)(BP*1), BX
	XORQ  (CX)(BP*1), BX
	TESTQ BX, BX
	JZ    matchlen_loopStandalone
	BSFQ  BX, BX
	SARQ  $0x03, BX
	LEAQ  (BP)(BX*1), BP
	JMP   genMatchLenEnd

matchlen_loopStandalone:
	LEAQ -8(DX), DX
	LEAQ 8(BP), BP
	CMPQ DX, $0x08
	JGE  matchlen_loopbackStandalone

matchlen_singleStandalone:
	TESTQ DX, DX
	JZ    genMatchLenEnd

matchlen_single_loopbackStandalone:
	MOVB (AX)(BP*1), BL
	CMPB (CX)(BP*1), BL
	JNE  genMatchLenEnd
	LEAQ 1(BP), BP
	DECQ DX
	JNZ  matchlen_single_loopbackStandalone

genMatchLenEnd:
	MOVQ BP, ret+48(FP)
	RET
