// Code generated by command: go run gen.go -out encodeblock_amd64.s -stubs encodeblock_amd64.go. DO NOT EDIT.

// +build !appengine
// +build !noasm
// +build gc

#include "textflag.h"

// func encodeBlockAsm(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm(SB), $65568-56
	MOVQ $0x00000200, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm
	MOVL  $0x00000000, 20(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  src_len+32(FP), CX
	LEAQ  -5(CX), BX
	LEAQ  -8(CX), BP
	MOVL  BP, 16(SP)
	SHRQ  $0x05, CX
	SUBL  CX, BX
	LEAQ  (AX)(BX*1), BX
	MOVQ  BX, (SP)
	MOVQ  AX, 8(SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm:
	MOVQ  (CX)(AX*1), BP
	MOVL  AX, BX
	SUBL  20(SP), BX
	SHRL  $0x06, BX
	LEAL  4(AX)(BX*1), BX
	MOVL  16(SP), SI
	CMPL  BX, SI
	JGT   emit_remainder_encodeBlockAsm
	MOVL  BX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, DI
	MOVQ  BP, R8
	MOVQ  BP, R9
	SHRQ  $0x08, R9
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x32, R8
	SHLQ  $0x10, R9
	IMULQ DI, R9
	SHRQ  $0x32, R9
	MOVL  32(SP)(R8*4), BX
	MOVL  32(SP)(R9*4), SI
	MOVL  AX, 32(SP)(R8*4)
	LEAL  1(AX), R8
	MOVL  R8, 32(SP)(R9*4)
	MOVQ  BP, R8
	SHRQ  $0x10, R8
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x32, R8
	MOVL  AX, DI
	SUBL  24(SP), DI
	MOVL  1(CX)(DI*1), R9
	MOVQ  BP, DI
	SHRQ  $0x08, DI
	CMPL  DI, R9
	JNE   no_repeat_found_encodeBlockAsm
	LEAL  1(AX), BP
	MOVL  20(SP), SI
	MOVL  BP, BX
	SUBL  24(SP), BX
	JZ    repeat_extend_back_end_encodeBlockAsm

repeat_extend_back_loop_encodeBlockAsm:
	CMPL BP, SI
	JLE  repeat_extend_back_end_encodeBlockAsm
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(BP*1), DI
	CMPB DL, DI
	JNE  repeat_extend_back_end_encodeBlockAsm
	LEAL -1(BP), BP
	DECL BX
	JNZ  repeat_extend_back_loop_encodeBlockAsm

repeat_extend_back_end_encodeBlockAsm:
	MOVL 20(SP), BX
	CMPL BX, BP
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(BX*1), R8
	SUBL BX, DI
	MOVQ dst_base+0(FP), BX
	MOVL DI, R9
	SUBL $0x01, R9
	JC   emit_literal_done_repeat_emit_encodeBlockAsm
	CMPL R9, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm
	CMPL R9, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm
	CMPL R9, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm
	CMPL R9, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm
	MOVB $0xfc, (BX)
	MOVL R9, 1(BX)
	ADDQ $0x05, BX
	JMP  memmove_repeat_emit_encodeBlockAsm

four_bytes_repeat_emit_encodeBlockAsm:
	MOVL R9, R10
	SHRL $0x10, R10
	MOVB $0xf8, (BX)
	MOVW R9, 1(BX)
	MOVB R10, 3(BX)
	ADDQ $0x04, BX
	JMP  memmove_repeat_emit_encodeBlockAsm

three_bytes_repeat_emit_encodeBlockAsm:
	MOVB $0xf4, (BX)
	MOVW R9, 1(BX)
	ADDQ $0x03, BX
	JMP  memmove_repeat_emit_encodeBlockAsm

two_bytes_repeat_emit_encodeBlockAsm:
	MOVB $0xf0, (BX)
	MOVB R9, 1(BX)
	ADDQ $0x02, BX
	JMP  memmove_repeat_emit_encodeBlockAsm

one_byte_repeat_emit_encodeBlockAsm:
	SHLB $0x02, R9
	MOVB R9, (BX)
	ADDQ $0x01, BX

memmove_repeat_emit_encodeBlockAsm:
	LEAQ (BX)(DI*1), R9
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_repeat_emit_encodeBlockAsm
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_256through2048

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_1or2:
	MOVB (R8), R10
	MOVB -1(R8)(DI*1), R8
	MOVB R10, (BX)
	MOVB R8, -1(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_4:
	MOVL (R8), R10
	MOVL R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_3:
	MOVW (R8), R10
	MOVB 2(R8), R8
	MOVW R10, (BX)
	MOVB R8, 2(BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_5through7:
	MOVL (R8), R10
	MOVL -4(R8)(DI*1), R8
	MOVL R10, (BX)
	MOVL R8, -4(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_8:
	MOVQ (R8), R10
	MOVQ R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_9through16:
	MOVQ (R8), R10
	MOVQ -8(R8)(DI*1), R8
	MOVQ R10, (BX)
	MOVQ R8, -8(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_17through32:
	MOVOU (R8), X0
	MOVOU -16(R8)(DI*1), X1
	MOVOU X0, (BX)
	MOVOU X1, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_33through64:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU -32(R8)(DI*1), X2
	MOVOU -16(R8)(DI*1), X3
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, -32(BX)(DI*1)
	MOVOU X3, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_65through128:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_129through256:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU -128(R8)(DI*1), X8
	MOVOU -112(R8)(DI*1), X9
	MOVOU -96(R8)(DI*1), X10
	MOVOU -80(R8)(DI*1), X11
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, -128(BX)(DI*1)
	MOVOU X9, -112(BX)(DI*1)
	MOVOU X10, -96(BX)(DI*1)
	MOVOU X11, -80(BX)(DI*1)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU 128(R8), X8
	MOVOU 144(R8), X9
	MOVOU 160(R8), X10
	MOVOU 176(R8), X11
	MOVOU 192(R8), X12
	MOVOU 208(R8), X13
	MOVOU 224(R8), X14
	MOVOU 240(R8), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, 128(BX)
	MOVOU X9, 144(BX)
	MOVOU X10, 160(BX)
	MOVOU X11, 176(BX)
	MOVOU X12, 192(BX)
	MOVOU X13, 208(BX)
	MOVOU X14, 224(BX)
	MOVOU X15, 240(BX)
	CMPQ  DI, $0x00000100
	LEAQ  256(R8), R8
	LEAQ  256(BX), BX
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_tail

memmove_end_copy_repeat_emit_encodeBlockAsm:
	MOVQ R9, BX

emit_literal_done_repeat_emit_encodeBlockAsm:
	MOVQ BX, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm:
	ADDL $0x05, AX
	MOVL AX, BX
	SUBL 24(SP), BX
	MOVL 16(SP), DI
	SUBL AX, DI
	LEAQ (CX)(AX*1), R8
	LEAQ (CX)(BX*1), BX
	XORL R10, R10
	CMPL DI, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (R8)(R10*1), R9
	XORQ  (BX)(R10*1), R9
	TESTQ R9, R9
	JZ    matchlen_loop_repeat_extend
	BSFQ  R9, R9
	SARQ  $0x03, R9
	LEAL  (R10)(R9*1), R10
	JMP   repeat_extend_forward_end_encodeBlockAsm

matchlen_loop_repeat_extend:
	LEAL -8(DI), DI
	LEAL 8(R10), R10
	CMPL DI, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DI, DI
	JZ    repeat_extend_forward_end_encodeBlockAsm

matchlen_single_loopback_repeat_extend:
	MOVB (R8)(R10*1), R9
	CMPB (BX)(R10*1), R9
	JNE  repeat_extend_forward_end_encodeBlockAsm
	LEAL 1(R10), R10
	DECL DI
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm:
	ADDL  R10, AX
	MOVL  AX, BX
	SUBL  BP, BX
	MOVL  24(SP), BP
	MOVQ  dst_base+0(FP), DI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm

emit_repeat_again_match_repeat_encodeBlockAsm:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_encodeBlockAsm
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_encodeBlockAsm
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_match_repeat_encodeBlockAsm

cant_repeat_two_offset_match_repeat_encodeBlockAsm:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_repeat_encodeBlockAsm
	CMPL BX, $0x00010100
	JLT  repeat_four_match_repeat_encodeBlockAsm
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_repeat_encodeBlockAsm
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_match_repeat_encodeBlockAsm

repeat_five_match_repeat_encodeBlockAsm:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_four_match_repeat_encodeBlockAsm:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_three_match_repeat_encodeBlockAsm:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_match_repeat_encodeBlockAsm:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_offset_match_repeat_encodeBlockAsm:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_as_copy_encodeBlockAsm:
	CMPL BP, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm
	CMPL BX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm
	MOVB $0xff, (DI)
	MOVL BP, 1(DI)
	LEAL -64(BX), BX
	ADDQ $0x05, DI
	CMPL BX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm

emit_repeat_again_repeat_as_copy_encodeBlockAsm_emit_copy:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_four_repeat_as_copy_encodeBlockAsm_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_three_repeat_as_copy_encodeBlockAsm_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_repeat_as_copy_encodeBlockAsm_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm

four_bytes_remain_repeat_as_copy_encodeBlockAsm:
	TESTL BX, BX
	JZ    repeat_end_emit_encodeBlockAsm
	MOVB  $0x03, DL
	LEAL  -4(DX)(BX*4), BX
	MOVB  BL, (DI)
	MOVL  BP, 1(DI)
	ADDQ  $0x05, DI
	JMP   repeat_end_emit_encodeBlockAsm

two_byte_offset_repeat_as_copy_encodeBlockAsm:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm
	MOVB $0xee, (DI)
	MOVW BP, 1(DI)
	LEAL -60(BX), BX
	ADDQ $0x03, DI

emit_repeat_again_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy_short
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_four_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_three_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm

two_byte_offset_short_repeat_as_copy_encodeBlockAsm:
	CMPL BX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm
	CMPL BP, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm
	MOVB $0x01, DL
	LEAL -16(DX)(BX*4), BX
	MOVB BP, 1(DI)
	SHRL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm

emit_copy_three_repeat_as_copy_encodeBlockAsm:
	MOVB $0x02, DL
	LEAL -4(DX)(BX*4), BX
	MOVB BL, (DI)
	MOVW BP, 1(DI)
	ADDQ $0x03, DI

repeat_end_emit_encodeBlockAsm:
	MOVL AX, 20(SP)
	MOVQ DI, dst_base+0(FP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm
	JMP  search_loop_encodeBlockAsm

no_repeat_found_encodeBlockAsm:
	CMPL (CX)(BX*1), BP
	JEQ  candidate_match_encodeBlockAsm
	SHRQ $0x08, BP
	MOVL 32(SP)(R8*4), BX
	LEAL 2(AX), DI
	CMPL (CX)(SI*1), BP
	JEQ  candidate2_match_encodeBlockAsm
	MOVL DI, 32(SP)(R8*4)
	SHRQ $0x08, BP
	CMPL (CX)(BX*1), BP
	JEQ  candidate3_match_encodeBlockAsm
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm

candidate3_match_encodeBlockAsm:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm

candidate2_match_encodeBlockAsm:
	MOVL DI, 32(SP)(R8*4)
	INCL AX
	MOVL SI, BX

candidate_match_encodeBlockAsm:
	MOVL  20(SP), BP
	TESTL BX, BX
	JZ    match_extend_back_end_encodeBlockAsm

match_extend_back_loop_encodeBlockAsm:
	CMPL AX, BP
	JLE  match_extend_back_end_encodeBlockAsm
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(AX*1), SI
	CMPB DL, SI
	JNE  match_extend_back_end_encodeBlockAsm
	LEAL -1(AX), AX
	DECL BX
	JZ   match_extend_back_end_encodeBlockAsm
	JMP  match_extend_back_loop_encodeBlockAsm

match_extend_back_end_encodeBlockAsm:
	MOVQ dst_base+0(FP), BP
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ (BP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm:
	MOVL AX, BP
	MOVL 20(SP), SI
	CMPL SI, BP
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(SI*1), BP
	SUBL SI, DI
	MOVQ dst_base+0(FP), SI
	MOVL DI, R8
	SUBL $0x01, R8
	JC   emit_literal_done_match_emit_encodeBlockAsm
	CMPL R8, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm
	CMPL R8, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm
	CMPL R8, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm
	CMPL R8, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm
	MOVB $0xfc, (SI)
	MOVL R8, 1(SI)
	ADDQ $0x05, SI
	JMP  memmove_match_emit_encodeBlockAsm

four_bytes_match_emit_encodeBlockAsm:
	MOVL R8, R9
	SHRL $0x10, R9
	MOVB $0xf8, (SI)
	MOVW R8, 1(SI)
	MOVB R9, 3(SI)
	ADDQ $0x04, SI
	JMP  memmove_match_emit_encodeBlockAsm

three_bytes_match_emit_encodeBlockAsm:
	MOVB $0xf4, (SI)
	MOVW R8, 1(SI)
	ADDQ $0x03, SI
	JMP  memmove_match_emit_encodeBlockAsm

two_bytes_match_emit_encodeBlockAsm:
	MOVB $0xf0, (SI)
	MOVB R8, 1(SI)
	ADDQ $0x02, SI
	JMP  memmove_match_emit_encodeBlockAsm

one_byte_match_emit_encodeBlockAsm:
	SHLB $0x02, R8
	MOVB R8, (SI)
	ADDQ $0x01, SI

memmove_match_emit_encodeBlockAsm:
	LEAQ (SI)(DI*1), R8
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_match_emit_encodeBlockAsm
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_1or2:
	MOVB (BP), R9
	MOVB -1(BP)(DI*1), BP
	MOVB R9, (SI)
	MOVB BP, -1(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_4:
	MOVL (BP), R9
	MOVL R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_3:
	MOVW (BP), R9
	MOVB 2(BP), BP
	MOVW R9, (SI)
	MOVB BP, 2(SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_5through7:
	MOVL (BP), R9
	MOVL -4(BP)(DI*1), BP
	MOVL R9, (SI)
	MOVL BP, -4(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_8:
	MOVQ (BP), R9
	MOVQ R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_9through16:
	MOVQ (BP), R9
	MOVQ -8(BP)(DI*1), BP
	MOVQ R9, (SI)
	MOVQ BP, -8(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_17through32:
	MOVOU (BP), X0
	MOVOU -16(BP)(DI*1), X1
	MOVOU X0, (SI)
	MOVOU X1, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_33through64:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU -32(BP)(DI*1), X2
	MOVOU -16(BP)(DI*1), X3
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, -32(SI)(DI*1)
	MOVOU X3, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_65through128:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_129through256:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU -128(BP)(DI*1), X8
	MOVOU -112(BP)(DI*1), X9
	MOVOU -96(BP)(DI*1), X10
	MOVOU -80(BP)(DI*1), X11
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, -128(SI)(DI*1)
	MOVOU X9, -112(SI)(DI*1)
	MOVOU X10, -96(SI)(DI*1)
	MOVOU X11, -80(SI)(DI*1)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU 128(BP), X8
	MOVOU 144(BP), X9
	MOVOU 160(BP), X10
	MOVOU 176(BP), X11
	MOVOU 192(BP), X12
	MOVOU 208(BP), X13
	MOVOU 224(BP), X14
	MOVOU 240(BP), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, 128(SI)
	MOVOU X9, 144(SI)
	MOVOU X10, 160(SI)
	MOVOU X11, 176(SI)
	MOVOU X12, 192(SI)
	MOVOU X13, 208(SI)
	MOVOU X14, 224(SI)
	MOVOU X15, 240(SI)
	CMPQ  DI, $0x00000100
	LEAQ  256(BP), BP
	LEAQ  256(SI), SI
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_tail

memmove_end_copy_match_emit_encodeBlockAsm:
	MOVQ R8, SI

emit_literal_done_match_emit_encodeBlockAsm:
	MOVQ SI, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm:
match_nolit_loop_encodeBlockAsm:
	MOVL AX, BP
	SUBL BX, BP
	MOVL BP, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, BX
	MOVL 16(SP), BP
	SUBL AX, BP
	LEAQ (CX)(AX*1), SI
	LEAQ (CX)(BX*1), BX
	XORL R8, R8
	CMPL BP, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm

matchlen_loopback_match_nolit_encodeBlockAsm:
	MOVQ  (SI)(R8*1), DI
	XORQ  (BX)(R8*1), DI
	TESTQ DI, DI
	JZ    matchlen_loop_match_nolit_encodeBlockAsm
	BSFQ  DI, DI
	SARQ  $0x03, DI
	LEAL  (R8)(DI*1), R8
	JMP   match_nolit_end_encodeBlockAsm

matchlen_loop_match_nolit_encodeBlockAsm:
	LEAL -8(BP), BP
	LEAL 8(R8), R8
	CMPL BP, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm

matchlen_single_match_nolit_encodeBlockAsm:
	TESTL BP, BP
	JZ    match_nolit_end_encodeBlockAsm

matchlen_single_loopback_match_nolit_encodeBlockAsm:
	MOVB (SI)(R8*1), DI
	CMPB (BX)(R8*1), DI
	JNE  match_nolit_end_encodeBlockAsm
	LEAL 1(R8), R8
	DECL BP
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm

match_nolit_end_encodeBlockAsm:
	ADDL R8, AX
	MOVL 24(SP), BX
	ADDL $0x04, R8
	MOVQ dst_base+0(FP), BP
	CMPL BX, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm
	CMPL R8, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm
	MOVB $0xff, (BP)
	MOVL BX, 1(BP)
	LEAL -64(R8), R8
	ADDQ $0x05, BP
	CMPL R8, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm

emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm_emit_copy
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm_emit_copy
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm_emit_copy
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy

repeat_five_match_nolit_encodeBlockAsm_emit_copy:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_four_match_nolit_encodeBlockAsm_emit_copy:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_three_match_nolit_encodeBlockAsm_emit_copy:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_match_nolit_encodeBlockAsm_emit_copy:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

four_bytes_remain_match_nolit_encodeBlockAsm:
	TESTL R8, R8
	JZ    match_nolit_emitcopy_end_encodeBlockAsm
	MOVB  $0x03, DL
	LEAL  -4(DX)(R8*4), R8
	MOVB  R8, (BP)
	MOVL  BX, 1(BP)
	ADDQ  $0x05, BP
	JMP   match_nolit_emitcopy_end_encodeBlockAsm

two_byte_offset_match_nolit_encodeBlockAsm:
	CMPL R8, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm
	MOVB $0xee, (BP)
	MOVW BX, 1(BP)
	LEAL -60(R8), R8
	ADDQ $0x03, BP

emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy_short:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm_emit_copy_short
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm_emit_copy_short:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_four_match_nolit_encodeBlockAsm_emit_copy_short:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_three_match_nolit_encodeBlockAsm_emit_copy_short:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_match_nolit_encodeBlockAsm_emit_copy_short:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

two_byte_offset_short_match_nolit_encodeBlockAsm:
	CMPL R8, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm
	CMPL BX, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm
	MOVB $0x01, DL
	LEAL -16(DX)(R8*4), R8
	MOVB BL, 1(BP)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

emit_copy_three_match_nolit_encodeBlockAsm:
	MOVB $0x02, DL
	LEAL -4(DX)(R8*4), R8
	MOVB R8, (BP)
	MOVW BX, 1(BP)
	ADDQ $0x03, BP

match_nolit_emitcopy_end_encodeBlockAsm:
	MOVQ BP, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm
	CMPQ BP, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm:
	MOVQ  -2(CX)(AX*1), BP
	MOVQ  $0x0000cf1bbcdcbf9b, BX
	MOVQ  BP, SI
	SHRQ  $0x10, BP
	MOVQ  BP, DI
	SHLQ  $0x10, SI
	IMULQ BX, SI
	SHRQ  $0x32, SI
	SHLQ  $0x10, DI
	IMULQ BX, DI
	SHRQ  $0x32, DI
	LEAL  -2(AX), R8
	MOVL  32(SP)(DI*4), BX
	MOVL  R8, 32(SP)(SI*4)
	MOVL  AX, 32(SP)(DI*4)
	CMPL  (CX)(BX*1), BP
	JEQ   match_nolit_loop_encodeBlockAsm
	INCL  AX
	JMP   search_loop_encodeBlockAsm

emit_remainder_encodeBlockAsm:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), DX
	LEAQ (DX)(AX*1), DX
	CMPQ DX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), AX
	SUBL DX, BX
	MOVQ dst_base+0(FP), CX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm
	MOVB $0xfc, (CX)
	MOVL DX, 1(CX)
	ADDQ $0x05, CX
	JMP  memmove_emit_remainder_encodeBlockAsm

four_bytes_emit_remainder_encodeBlockAsm:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (CX)
	MOVW DX, 1(CX)
	MOVB BP, 3(CX)
	ADDQ $0x04, CX
	JMP  memmove_emit_remainder_encodeBlockAsm

three_bytes_emit_remainder_encodeBlockAsm:
	MOVB $0xf4, (CX)
	MOVW DX, 1(CX)
	ADDQ $0x03, CX
	JMP  memmove_emit_remainder_encodeBlockAsm

two_bytes_emit_remainder_encodeBlockAsm:
	MOVB $0xf0, (CX)
	MOVB DL, 1(CX)
	ADDQ $0x02, CX
	JMP  memmove_emit_remainder_encodeBlockAsm

one_byte_emit_remainder_encodeBlockAsm:
	SHLB $0x02, DL
	MOVB DL, (CX)
	ADDQ $0x01, CX

memmove_emit_remainder_encodeBlockAsm:
	LEAQ (CX)(BX*1), DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_tail:
	TESTQ BX, BX
	JEQ   memmove_end_copy_emit_remainder_encodeBlockAsm
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_1or2:
	MOVB (AX), BP
	MOVB -1(AX)(BX*1), AL
	MOVB BP, (CX)
	MOVB AL, -1(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_4:
	MOVL (AX), BP
	MOVL BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_3:
	MOVW (AX), BP
	MOVB 2(AX), AL
	MOVW BP, (CX)
	MOVB AL, 2(CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_5through7:
	MOVL (AX), BP
	MOVL -4(AX)(BX*1), AX
	MOVL BP, (CX)
	MOVL AX, -4(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_8:
	MOVQ (AX), BP
	MOVQ BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_9through16:
	MOVQ (AX), BP
	MOVQ -8(AX)(BX*1), AX
	MOVQ BP, (CX)
	MOVQ AX, -8(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_17through32:
	MOVOU (AX), X0
	MOVOU -16(AX)(BX*1), X1
	MOVOU X0, (CX)
	MOVOU X1, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_33through64:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU -32(AX)(BX*1), X2
	MOVOU -16(AX)(BX*1), X3
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, -32(CX)(BX*1)
	MOVOU X3, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_65through128:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_129through256:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU -128(AX)(BX*1), X8
	MOVOU -112(AX)(BX*1), X9
	MOVOU -96(AX)(BX*1), X10
	MOVOU -80(AX)(BX*1), X11
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, -128(CX)(BX*1)
	MOVOU X9, -112(CX)(BX*1)
	MOVOU X10, -96(CX)(BX*1)
	MOVOU X11, -80(CX)(BX*1)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU 128(AX), X8
	MOVOU 144(AX), X9
	MOVOU 160(AX), X10
	MOVOU 176(AX), X11
	MOVOU 192(AX), X12
	MOVOU 208(AX), X13
	MOVOU 224(AX), X14
	MOVOU 240(AX), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, 128(CX)
	MOVOU X9, 144(CX)
	MOVOU X10, 160(CX)
	MOVOU X11, 176(CX)
	MOVOU X12, 192(CX)
	MOVOU X13, 208(CX)
	MOVOU X14, 224(CX)
	MOVOU X15, 240(CX)
	CMPQ  BX, $0x00000100
	LEAQ  256(AX), AX
	LEAQ  256(CX), CX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_tail

memmove_end_copy_emit_remainder_encodeBlockAsm:
	MOVQ DX, CX

emit_literal_done_emit_remainder_encodeBlockAsm:
	MOVQ CX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm:
	MOVQ dst_base+0(FP), AX
	SUBQ 8(SP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm12B(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm12B(SB), $16416-56
	MOVQ $0x00000080, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm12B:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm12B
	MOVL  $0x00000000, 20(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  src_len+32(FP), CX
	LEAQ  -5(CX), BX
	LEAQ  -8(CX), BP
	MOVL  BP, 16(SP)
	SHRQ  $0x05, CX
	SUBL  CX, BX
	LEAQ  (AX)(BX*1), BX
	MOVQ  BX, (SP)
	MOVQ  AX, 8(SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm12B:
	MOVQ  (CX)(AX*1), BP
	MOVL  AX, BX
	SUBL  20(SP), BX
	SHRL  $0x05, BX
	LEAL  4(AX)(BX*1), BX
	MOVL  16(SP), SI
	CMPL  BX, SI
	JGT   emit_remainder_encodeBlockAsm12B
	MOVL  BX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, DI
	MOVQ  BP, R8
	MOVQ  BP, R9
	SHRQ  $0x08, R9
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x34, R8
	SHLQ  $0x10, R9
	IMULQ DI, R9
	SHRQ  $0x34, R9
	MOVL  32(SP)(R8*4), BX
	MOVL  32(SP)(R9*4), SI
	MOVL  AX, 32(SP)(R8*4)
	LEAL  1(AX), R8
	MOVL  R8, 32(SP)(R9*4)
	MOVQ  BP, R8
	SHRQ  $0x10, R8
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x34, R8
	MOVL  AX, DI
	SUBL  24(SP), DI
	MOVL  1(CX)(DI*1), R9
	MOVQ  BP, DI
	SHRQ  $0x08, DI
	CMPL  DI, R9
	JNE   no_repeat_found_encodeBlockAsm12B
	LEAL  1(AX), BP
	MOVL  20(SP), SI
	MOVL  BP, BX
	SUBL  24(SP), BX
	JZ    repeat_extend_back_end_encodeBlockAsm12B

repeat_extend_back_loop_encodeBlockAsm12B:
	CMPL BP, SI
	JLE  repeat_extend_back_end_encodeBlockAsm12B
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(BP*1), DI
	CMPB DL, DI
	JNE  repeat_extend_back_end_encodeBlockAsm12B
	LEAL -1(BP), BP
	DECL BX
	JNZ  repeat_extend_back_loop_encodeBlockAsm12B

repeat_extend_back_end_encodeBlockAsm12B:
	MOVL 20(SP), BX
	CMPL BX, BP
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm12B
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(BX*1), R8
	SUBL BX, DI
	MOVQ dst_base+0(FP), BX
	MOVL DI, R9
	SUBL $0x01, R9
	JC   emit_literal_done_repeat_emit_encodeBlockAsm12B
	CMPL R9, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm12B
	CMPL R9, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm12B
	CMPL R9, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm12B
	CMPL R9, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm12B
	MOVB $0xfc, (BX)
	MOVL R9, 1(BX)
	ADDQ $0x05, BX
	JMP  memmove_repeat_emit_encodeBlockAsm12B

four_bytes_repeat_emit_encodeBlockAsm12B:
	MOVL R9, R10
	SHRL $0x10, R10
	MOVB $0xf8, (BX)
	MOVW R9, 1(BX)
	MOVB R10, 3(BX)
	ADDQ $0x04, BX
	JMP  memmove_repeat_emit_encodeBlockAsm12B

three_bytes_repeat_emit_encodeBlockAsm12B:
	MOVB $0xf4, (BX)
	MOVW R9, 1(BX)
	ADDQ $0x03, BX
	JMP  memmove_repeat_emit_encodeBlockAsm12B

two_bytes_repeat_emit_encodeBlockAsm12B:
	MOVB $0xf0, (BX)
	MOVB R9, 1(BX)
	ADDQ $0x02, BX
	JMP  memmove_repeat_emit_encodeBlockAsm12B

one_byte_repeat_emit_encodeBlockAsm12B:
	SHLB $0x02, R9
	MOVB R9, (BX)
	ADDQ $0x01, BX

memmove_repeat_emit_encodeBlockAsm12B:
	LEAQ (BX)(DI*1), R9
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_repeat_emit_encodeBlockAsm12B
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_256through2048

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_1or2:
	MOVB (R8), R10
	MOVB -1(R8)(DI*1), R8
	MOVB R10, (BX)
	MOVB R8, -1(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_4:
	MOVL (R8), R10
	MOVL R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_3:
	MOVW (R8), R10
	MOVB 2(R8), R8
	MOVW R10, (BX)
	MOVB R8, 2(BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_5through7:
	MOVL (R8), R10
	MOVL -4(R8)(DI*1), R8
	MOVL R10, (BX)
	MOVL R8, -4(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_8:
	MOVQ (R8), R10
	MOVQ R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_9through16:
	MOVQ (R8), R10
	MOVQ -8(R8)(DI*1), R8
	MOVQ R10, (BX)
	MOVQ R8, -8(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_17through32:
	MOVOU (R8), X0
	MOVOU -16(R8)(DI*1), X1
	MOVOU X0, (BX)
	MOVOU X1, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_33through64:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU -32(R8)(DI*1), X2
	MOVOU -16(R8)(DI*1), X3
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, -32(BX)(DI*1)
	MOVOU X3, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_65through128:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_129through256:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU -128(R8)(DI*1), X8
	MOVOU -112(R8)(DI*1), X9
	MOVOU -96(R8)(DI*1), X10
	MOVOU -80(R8)(DI*1), X11
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, -128(BX)(DI*1)
	MOVOU X9, -112(BX)(DI*1)
	MOVOU X10, -96(BX)(DI*1)
	MOVOU X11, -80(BX)(DI*1)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU 128(R8), X8
	MOVOU 144(R8), X9
	MOVOU 160(R8), X10
	MOVOU 176(R8), X11
	MOVOU 192(R8), X12
	MOVOU 208(R8), X13
	MOVOU 224(R8), X14
	MOVOU 240(R8), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, 128(BX)
	MOVOU X9, 144(BX)
	MOVOU X10, 160(BX)
	MOVOU X11, 176(BX)
	MOVOU X12, 192(BX)
	MOVOU X13, 208(BX)
	MOVOU X14, 224(BX)
	MOVOU X15, 240(BX)
	CMPQ  DI, $0x00000100
	LEAQ  256(R8), R8
	LEAQ  256(BX), BX
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_tail

memmove_end_copy_repeat_emit_encodeBlockAsm12B:
	MOVQ R9, BX

emit_literal_done_repeat_emit_encodeBlockAsm12B:
	MOVQ BX, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm12B:
	ADDL $0x05, AX
	MOVL AX, BX
	SUBL 24(SP), BX
	MOVL 16(SP), DI
	SUBL AX, DI
	LEAQ (CX)(AX*1), R8
	LEAQ (CX)(BX*1), BX
	XORL R10, R10
	CMPL DI, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (R8)(R10*1), R9
	XORQ  (BX)(R10*1), R9
	TESTQ R9, R9
	JZ    matchlen_loop_repeat_extend
	BSFQ  R9, R9
	SARQ  $0x03, R9
	LEAL  (R10)(R9*1), R10
	JMP   repeat_extend_forward_end_encodeBlockAsm12B

matchlen_loop_repeat_extend:
	LEAL -8(DI), DI
	LEAL 8(R10), R10
	CMPL DI, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DI, DI
	JZ    repeat_extend_forward_end_encodeBlockAsm12B

matchlen_single_loopback_repeat_extend:
	MOVB (R8)(R10*1), R9
	CMPB (BX)(R10*1), R9
	JNE  repeat_extend_forward_end_encodeBlockAsm12B
	LEAL 1(R10), R10
	DECL DI
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm12B:
	ADDL  R10, AX
	MOVL  AX, BX
	SUBL  BP, BX
	MOVL  24(SP), BP
	MOVQ  dst_base+0(FP), DI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm12B

emit_repeat_again_match_repeat_encodeBlockAsm12B:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_encodeBlockAsm12B
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_encodeBlockAsm12B
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_match_repeat_encodeBlockAsm12B

cant_repeat_two_offset_match_repeat_encodeBlockAsm12B:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_repeat_encodeBlockAsm12B
	CMPL BX, $0x00010100
	JLT  repeat_four_match_repeat_encodeBlockAsm12B
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_repeat_encodeBlockAsm12B
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_match_repeat_encodeBlockAsm12B

repeat_five_match_repeat_encodeBlockAsm12B:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_four_match_repeat_encodeBlockAsm12B:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_three_match_repeat_encodeBlockAsm12B:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_match_repeat_encodeBlockAsm12B:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_offset_match_repeat_encodeBlockAsm12B:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_as_copy_encodeBlockAsm12B:
	CMPL BP, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm12B
	CMPL BX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm12B
	MOVB $0xff, (DI)
	MOVL BP, 1(DI)
	LEAL -64(BX), BX
	ADDQ $0x05, DI
	CMPL BX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm12B

emit_repeat_again_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm12B_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm12B_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm12B_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm12B_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm12B_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_four_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_three_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

four_bytes_remain_repeat_as_copy_encodeBlockAsm12B:
	TESTL BX, BX
	JZ    repeat_end_emit_encodeBlockAsm12B
	MOVB  $0x03, DL
	LEAL  -4(DX)(BX*4), BX
	MOVB  BL, (DI)
	MOVL  BP, 1(DI)
	ADDQ  $0x05, DI
	JMP   repeat_end_emit_encodeBlockAsm12B

two_byte_offset_repeat_as_copy_encodeBlockAsm12B:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm12B
	MOVB $0xee, (DI)
	MOVW BP, 1(DI)
	LEAL -60(BX), BX
	ADDQ $0x03, DI

emit_repeat_again_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm12B_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_four_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_three_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

two_byte_offset_short_repeat_as_copy_encodeBlockAsm12B:
	CMPL BX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm12B
	CMPL BP, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm12B
	MOVB $0x01, DL
	LEAL -16(DX)(BX*4), BX
	MOVB BP, 1(DI)
	SHRL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12B

emit_copy_three_repeat_as_copy_encodeBlockAsm12B:
	MOVB $0x02, DL
	LEAL -4(DX)(BX*4), BX
	MOVB BL, (DI)
	MOVW BP, 1(DI)
	ADDQ $0x03, DI

repeat_end_emit_encodeBlockAsm12B:
	MOVL AX, 20(SP)
	MOVQ DI, dst_base+0(FP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm12B
	JMP  search_loop_encodeBlockAsm12B

no_repeat_found_encodeBlockAsm12B:
	CMPL (CX)(BX*1), BP
	JEQ  candidate_match_encodeBlockAsm12B
	SHRQ $0x08, BP
	MOVL 32(SP)(R8*4), BX
	LEAL 2(AX), DI
	CMPL (CX)(SI*1), BP
	JEQ  candidate2_match_encodeBlockAsm12B
	MOVL DI, 32(SP)(R8*4)
	SHRQ $0x08, BP
	CMPL (CX)(BX*1), BP
	JEQ  candidate3_match_encodeBlockAsm12B
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm12B

candidate3_match_encodeBlockAsm12B:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm12B

candidate2_match_encodeBlockAsm12B:
	MOVL DI, 32(SP)(R8*4)
	INCL AX
	MOVL SI, BX

candidate_match_encodeBlockAsm12B:
	MOVL  20(SP), BP
	TESTL BX, BX
	JZ    match_extend_back_end_encodeBlockAsm12B

match_extend_back_loop_encodeBlockAsm12B:
	CMPL AX, BP
	JLE  match_extend_back_end_encodeBlockAsm12B
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(AX*1), SI
	CMPB DL, SI
	JNE  match_extend_back_end_encodeBlockAsm12B
	LEAL -1(AX), AX
	DECL BX
	JZ   match_extend_back_end_encodeBlockAsm12B
	JMP  match_extend_back_loop_encodeBlockAsm12B

match_extend_back_end_encodeBlockAsm12B:
	MOVQ dst_base+0(FP), BP
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ (BP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm12B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm12B:
	MOVL AX, BP
	MOVL 20(SP), SI
	CMPL SI, BP
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm12B
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(SI*1), BP
	SUBL SI, DI
	MOVQ dst_base+0(FP), SI
	MOVL DI, R8
	SUBL $0x01, R8
	JC   emit_literal_done_match_emit_encodeBlockAsm12B
	CMPL R8, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm12B
	CMPL R8, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm12B
	CMPL R8, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm12B
	CMPL R8, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm12B
	MOVB $0xfc, (SI)
	MOVL R8, 1(SI)
	ADDQ $0x05, SI
	JMP  memmove_match_emit_encodeBlockAsm12B

four_bytes_match_emit_encodeBlockAsm12B:
	MOVL R8, R9
	SHRL $0x10, R9
	MOVB $0xf8, (SI)
	MOVW R8, 1(SI)
	MOVB R9, 3(SI)
	ADDQ $0x04, SI
	JMP  memmove_match_emit_encodeBlockAsm12B

three_bytes_match_emit_encodeBlockAsm12B:
	MOVB $0xf4, (SI)
	MOVW R8, 1(SI)
	ADDQ $0x03, SI
	JMP  memmove_match_emit_encodeBlockAsm12B

two_bytes_match_emit_encodeBlockAsm12B:
	MOVB $0xf0, (SI)
	MOVB R8, 1(SI)
	ADDQ $0x02, SI
	JMP  memmove_match_emit_encodeBlockAsm12B

one_byte_match_emit_encodeBlockAsm12B:
	SHLB $0x02, R8
	MOVB R8, (SI)
	ADDQ $0x01, SI

memmove_match_emit_encodeBlockAsm12B:
	LEAQ (SI)(DI*1), R8
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_match_emit_encodeBlockAsm12B
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_1or2:
	MOVB (BP), R9
	MOVB -1(BP)(DI*1), BP
	MOVB R9, (SI)
	MOVB BP, -1(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_4:
	MOVL (BP), R9
	MOVL R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_3:
	MOVW (BP), R9
	MOVB 2(BP), BP
	MOVW R9, (SI)
	MOVB BP, 2(SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_5through7:
	MOVL (BP), R9
	MOVL -4(BP)(DI*1), BP
	MOVL R9, (SI)
	MOVL BP, -4(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_8:
	MOVQ (BP), R9
	MOVQ R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_9through16:
	MOVQ (BP), R9
	MOVQ -8(BP)(DI*1), BP
	MOVQ R9, (SI)
	MOVQ BP, -8(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_17through32:
	MOVOU (BP), X0
	MOVOU -16(BP)(DI*1), X1
	MOVOU X0, (SI)
	MOVOU X1, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_33through64:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU -32(BP)(DI*1), X2
	MOVOU -16(BP)(DI*1), X3
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, -32(SI)(DI*1)
	MOVOU X3, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_65through128:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_129through256:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU -128(BP)(DI*1), X8
	MOVOU -112(BP)(DI*1), X9
	MOVOU -96(BP)(DI*1), X10
	MOVOU -80(BP)(DI*1), X11
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, -128(SI)(DI*1)
	MOVOU X9, -112(SI)(DI*1)
	MOVOU X10, -96(SI)(DI*1)
	MOVOU X11, -80(SI)(DI*1)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU 128(BP), X8
	MOVOU 144(BP), X9
	MOVOU 160(BP), X10
	MOVOU 176(BP), X11
	MOVOU 192(BP), X12
	MOVOU 208(BP), X13
	MOVOU 224(BP), X14
	MOVOU 240(BP), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, 128(SI)
	MOVOU X9, 144(SI)
	MOVOU X10, 160(SI)
	MOVOU X11, 176(SI)
	MOVOU X12, 192(SI)
	MOVOU X13, 208(SI)
	MOVOU X14, 224(SI)
	MOVOU X15, 240(SI)
	CMPQ  DI, $0x00000100
	LEAQ  256(BP), BP
	LEAQ  256(SI), SI
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_tail

memmove_end_copy_match_emit_encodeBlockAsm12B:
	MOVQ R8, SI

emit_literal_done_match_emit_encodeBlockAsm12B:
	MOVQ SI, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm12B:
match_nolit_loop_encodeBlockAsm12B:
	MOVL AX, BP
	SUBL BX, BP
	MOVL BP, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, BX
	MOVL 16(SP), BP
	SUBL AX, BP
	LEAQ (CX)(AX*1), SI
	LEAQ (CX)(BX*1), BX
	XORL R8, R8
	CMPL BP, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm12B

matchlen_loopback_match_nolit_encodeBlockAsm12B:
	MOVQ  (SI)(R8*1), DI
	XORQ  (BX)(R8*1), DI
	TESTQ DI, DI
	JZ    matchlen_loop_match_nolit_encodeBlockAsm12B
	BSFQ  DI, DI
	SARQ  $0x03, DI
	LEAL  (R8)(DI*1), R8
	JMP   match_nolit_end_encodeBlockAsm12B

matchlen_loop_match_nolit_encodeBlockAsm12B:
	LEAL -8(BP), BP
	LEAL 8(R8), R8
	CMPL BP, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm12B

matchlen_single_match_nolit_encodeBlockAsm12B:
	TESTL BP, BP
	JZ    match_nolit_end_encodeBlockAsm12B

matchlen_single_loopback_match_nolit_encodeBlockAsm12B:
	MOVB (SI)(R8*1), DI
	CMPB (BX)(R8*1), DI
	JNE  match_nolit_end_encodeBlockAsm12B
	LEAL 1(R8), R8
	DECL BP
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm12B

match_nolit_end_encodeBlockAsm12B:
	ADDL R8, AX
	MOVL 24(SP), BX
	ADDL $0x04, R8
	MOVQ dst_base+0(FP), BP
	CMPL BX, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm12B
	CMPL R8, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm12B
	MOVB $0xff, (BP)
	MOVL BX, 1(BP)
	LEAL -64(R8), R8
	ADDQ $0x05, BP
	CMPL R8, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm12B

emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12B_emit_copy
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy

repeat_five_match_nolit_encodeBlockAsm12B_emit_copy:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_four_match_nolit_encodeBlockAsm12B_emit_copy:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_three_match_nolit_encodeBlockAsm12B_emit_copy:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_match_nolit_encodeBlockAsm12B_emit_copy:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

four_bytes_remain_match_nolit_encodeBlockAsm12B:
	TESTL R8, R8
	JZ    match_nolit_emitcopy_end_encodeBlockAsm12B
	MOVB  $0x03, DL
	LEAL  -4(DX)(R8*4), R8
	MOVB  R8, (BP)
	MOVL  BX, 1(BP)
	ADDQ  $0x05, BP
	JMP   match_nolit_emitcopy_end_encodeBlockAsm12B

two_byte_offset_match_nolit_encodeBlockAsm12B:
	CMPL R8, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm12B
	MOVB $0xee, (BP)
	MOVW BX, 1(BP)
	LEAL -60(R8), R8
	ADDQ $0x03, BP

emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy_short:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12B_emit_copy_short
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm12B_emit_copy_short:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_four_match_nolit_encodeBlockAsm12B_emit_copy_short:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_three_match_nolit_encodeBlockAsm12B_emit_copy_short:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_match_nolit_encodeBlockAsm12B_emit_copy_short:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

two_byte_offset_short_match_nolit_encodeBlockAsm12B:
	CMPL R8, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12B
	CMPL BX, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12B
	MOVB $0x01, DL
	LEAL -16(DX)(R8*4), R8
	MOVB BL, 1(BP)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

emit_copy_three_match_nolit_encodeBlockAsm12B:
	MOVB $0x02, DL
	LEAL -4(DX)(R8*4), R8
	MOVB R8, (BP)
	MOVW BX, 1(BP)
	ADDQ $0x03, BP

match_nolit_emitcopy_end_encodeBlockAsm12B:
	MOVQ BP, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm12B
	CMPQ BP, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm12B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm12B:
	MOVQ  -2(CX)(AX*1), BP
	MOVQ  $0x0000cf1bbcdcbf9b, BX
	MOVQ  BP, SI
	SHRQ  $0x10, BP
	MOVQ  BP, DI
	SHLQ  $0x10, SI
	IMULQ BX, SI
	SHRQ  $0x34, SI
	SHLQ  $0x10, DI
	IMULQ BX, DI
	SHRQ  $0x34, DI
	LEAL  -2(AX), R8
	MOVL  32(SP)(DI*4), BX
	MOVL  R8, 32(SP)(SI*4)
	MOVL  AX, 32(SP)(DI*4)
	CMPL  (CX)(BX*1), BP
	JEQ   match_nolit_loop_encodeBlockAsm12B
	INCL  AX
	JMP   search_loop_encodeBlockAsm12B

emit_remainder_encodeBlockAsm12B:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), DX
	LEAQ (DX)(AX*1), DX
	CMPQ DX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm12B
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm12B:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm12B
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), AX
	SUBL DX, BX
	MOVQ dst_base+0(FP), CX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm12B
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm12B
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm12B
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm12B
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm12B
	MOVB $0xfc, (CX)
	MOVL DX, 1(CX)
	ADDQ $0x05, CX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

four_bytes_emit_remainder_encodeBlockAsm12B:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (CX)
	MOVW DX, 1(CX)
	MOVB BP, 3(CX)
	ADDQ $0x04, CX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

three_bytes_emit_remainder_encodeBlockAsm12B:
	MOVB $0xf4, (CX)
	MOVW DX, 1(CX)
	ADDQ $0x03, CX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

two_bytes_emit_remainder_encodeBlockAsm12B:
	MOVB $0xf0, (CX)
	MOVB DL, 1(CX)
	ADDQ $0x02, CX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

one_byte_emit_remainder_encodeBlockAsm12B:
	SHLB $0x02, DL
	MOVB DL, (CX)
	ADDQ $0x01, CX

memmove_emit_remainder_encodeBlockAsm12B:
	LEAQ (CX)(BX*1), DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_tail:
	TESTQ BX, BX
	JEQ   memmove_end_copy_emit_remainder_encodeBlockAsm12B
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_1or2:
	MOVB (AX), BP
	MOVB -1(AX)(BX*1), AL
	MOVB BP, (CX)
	MOVB AL, -1(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_4:
	MOVL (AX), BP
	MOVL BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_3:
	MOVW (AX), BP
	MOVB 2(AX), AL
	MOVW BP, (CX)
	MOVB AL, 2(CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_5through7:
	MOVL (AX), BP
	MOVL -4(AX)(BX*1), AX
	MOVL BP, (CX)
	MOVL AX, -4(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_8:
	MOVQ (AX), BP
	MOVQ BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_9through16:
	MOVQ (AX), BP
	MOVQ -8(AX)(BX*1), AX
	MOVQ BP, (CX)
	MOVQ AX, -8(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_17through32:
	MOVOU (AX), X0
	MOVOU -16(AX)(BX*1), X1
	MOVOU X0, (CX)
	MOVOU X1, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_33through64:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU -32(AX)(BX*1), X2
	MOVOU -16(AX)(BX*1), X3
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, -32(CX)(BX*1)
	MOVOU X3, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_65through128:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_129through256:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU -128(AX)(BX*1), X8
	MOVOU -112(AX)(BX*1), X9
	MOVOU -96(AX)(BX*1), X10
	MOVOU -80(AX)(BX*1), X11
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, -128(CX)(BX*1)
	MOVOU X9, -112(CX)(BX*1)
	MOVOU X10, -96(CX)(BX*1)
	MOVOU X11, -80(CX)(BX*1)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU 128(AX), X8
	MOVOU 144(AX), X9
	MOVOU 160(AX), X10
	MOVOU 176(AX), X11
	MOVOU 192(AX), X12
	MOVOU 208(AX), X13
	MOVOU 224(AX), X14
	MOVOU 240(AX), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, 128(CX)
	MOVOU X9, 144(CX)
	MOVOU X10, 160(CX)
	MOVOU X11, 176(CX)
	MOVOU X12, 192(CX)
	MOVOU X13, 208(CX)
	MOVOU X14, 224(CX)
	MOVOU X15, 240(CX)
	CMPQ  BX, $0x00000100
	LEAQ  256(AX), AX
	LEAQ  256(CX), CX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_tail

memmove_end_copy_emit_remainder_encodeBlockAsm12B:
	MOVQ DX, CX

emit_literal_done_emit_remainder_encodeBlockAsm12B:
	MOVQ CX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm12B:
	MOVQ dst_base+0(FP), AX
	SUBQ 8(SP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm10B(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm10B(SB), $4128-56
	MOVQ $0x00000020, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm10B:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm10B
	MOVL  $0x00000000, 20(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  src_len+32(FP), CX
	LEAQ  -5(CX), BX
	LEAQ  -8(CX), BP
	MOVL  BP, 16(SP)
	SHRQ  $0x05, CX
	SUBL  CX, BX
	LEAQ  (AX)(BX*1), BX
	MOVQ  BX, (SP)
	MOVQ  AX, 8(SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm10B:
	MOVQ  (CX)(AX*1), BP
	MOVL  AX, BX
	SUBL  20(SP), BX
	SHRL  $0x04, BX
	LEAL  4(AX)(BX*1), BX
	MOVL  16(SP), SI
	CMPL  BX, SI
	JGT   emit_remainder_encodeBlockAsm10B
	MOVL  BX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, DI
	MOVQ  BP, R8
	MOVQ  BP, R9
	SHRQ  $0x08, R9
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x36, R8
	SHLQ  $0x10, R9
	IMULQ DI, R9
	SHRQ  $0x36, R9
	MOVL  32(SP)(R8*4), BX
	MOVL  32(SP)(R9*4), SI
	MOVL  AX, 32(SP)(R8*4)
	LEAL  1(AX), R8
	MOVL  R8, 32(SP)(R9*4)
	MOVQ  BP, R8
	SHRQ  $0x10, R8
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x36, R8
	MOVL  AX, DI
	SUBL  24(SP), DI
	MOVL  1(CX)(DI*1), R9
	MOVQ  BP, DI
	SHRQ  $0x08, DI
	CMPL  DI, R9
	JNE   no_repeat_found_encodeBlockAsm10B
	LEAL  1(AX), BP
	MOVL  20(SP), SI
	MOVL  BP, BX
	SUBL  24(SP), BX
	JZ    repeat_extend_back_end_encodeBlockAsm10B

repeat_extend_back_loop_encodeBlockAsm10B:
	CMPL BP, SI
	JLE  repeat_extend_back_end_encodeBlockAsm10B
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(BP*1), DI
	CMPB DL, DI
	JNE  repeat_extend_back_end_encodeBlockAsm10B
	LEAL -1(BP), BP
	DECL BX
	JNZ  repeat_extend_back_loop_encodeBlockAsm10B

repeat_extend_back_end_encodeBlockAsm10B:
	MOVL 20(SP), BX
	CMPL BX, BP
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm10B
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(BX*1), R8
	SUBL BX, DI
	MOVQ dst_base+0(FP), BX
	MOVL DI, R9
	SUBL $0x01, R9
	JC   emit_literal_done_repeat_emit_encodeBlockAsm10B
	CMPL R9, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm10B
	CMPL R9, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm10B
	CMPL R9, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm10B
	CMPL R9, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm10B
	MOVB $0xfc, (BX)
	MOVL R9, 1(BX)
	ADDQ $0x05, BX
	JMP  memmove_repeat_emit_encodeBlockAsm10B

four_bytes_repeat_emit_encodeBlockAsm10B:
	MOVL R9, R10
	SHRL $0x10, R10
	MOVB $0xf8, (BX)
	MOVW R9, 1(BX)
	MOVB R10, 3(BX)
	ADDQ $0x04, BX
	JMP  memmove_repeat_emit_encodeBlockAsm10B

three_bytes_repeat_emit_encodeBlockAsm10B:
	MOVB $0xf4, (BX)
	MOVW R9, 1(BX)
	ADDQ $0x03, BX
	JMP  memmove_repeat_emit_encodeBlockAsm10B

two_bytes_repeat_emit_encodeBlockAsm10B:
	MOVB $0xf0, (BX)
	MOVB R9, 1(BX)
	ADDQ $0x02, BX
	JMP  memmove_repeat_emit_encodeBlockAsm10B

one_byte_repeat_emit_encodeBlockAsm10B:
	SHLB $0x02, R9
	MOVB R9, (BX)
	ADDQ $0x01, BX

memmove_repeat_emit_encodeBlockAsm10B:
	LEAQ (BX)(DI*1), R9
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_repeat_emit_encodeBlockAsm10B
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_256through2048

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_1or2:
	MOVB (R8), R10
	MOVB -1(R8)(DI*1), R8
	MOVB R10, (BX)
	MOVB R8, -1(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_4:
	MOVL (R8), R10
	MOVL R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_3:
	MOVW (R8), R10
	MOVB 2(R8), R8
	MOVW R10, (BX)
	MOVB R8, 2(BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_5through7:
	MOVL (R8), R10
	MOVL -4(R8)(DI*1), R8
	MOVL R10, (BX)
	MOVL R8, -4(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_8:
	MOVQ (R8), R10
	MOVQ R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_9through16:
	MOVQ (R8), R10
	MOVQ -8(R8)(DI*1), R8
	MOVQ R10, (BX)
	MOVQ R8, -8(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_17through32:
	MOVOU (R8), X0
	MOVOU -16(R8)(DI*1), X1
	MOVOU X0, (BX)
	MOVOU X1, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_33through64:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU -32(R8)(DI*1), X2
	MOVOU -16(R8)(DI*1), X3
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, -32(BX)(DI*1)
	MOVOU X3, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_65through128:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_129through256:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU -128(R8)(DI*1), X8
	MOVOU -112(R8)(DI*1), X9
	MOVOU -96(R8)(DI*1), X10
	MOVOU -80(R8)(DI*1), X11
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, -128(BX)(DI*1)
	MOVOU X9, -112(BX)(DI*1)
	MOVOU X10, -96(BX)(DI*1)
	MOVOU X11, -80(BX)(DI*1)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm10B

emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU 128(R8), X8
	MOVOU 144(R8), X9
	MOVOU 160(R8), X10
	MOVOU 176(R8), X11
	MOVOU 192(R8), X12
	MOVOU 208(R8), X13
	MOVOU 224(R8), X14
	MOVOU 240(R8), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, 128(BX)
	MOVOU X9, 144(BX)
	MOVOU X10, 160(BX)
	MOVOU X11, 176(BX)
	MOVOU X12, 192(BX)
	MOVOU X13, 208(BX)
	MOVOU X14, 224(BX)
	MOVOU X15, 240(BX)
	CMPQ  DI, $0x00000100
	LEAQ  256(R8), R8
	LEAQ  256(BX), BX
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm10B_memmove_tail

memmove_end_copy_repeat_emit_encodeBlockAsm10B:
	MOVQ R9, BX

emit_literal_done_repeat_emit_encodeBlockAsm10B:
	MOVQ BX, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm10B:
	ADDL $0x05, AX
	MOVL AX, BX
	SUBL 24(SP), BX
	MOVL 16(SP), DI
	SUBL AX, DI
	LEAQ (CX)(AX*1), R8
	LEAQ (CX)(BX*1), BX
	XORL R10, R10
	CMPL DI, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (R8)(R10*1), R9
	XORQ  (BX)(R10*1), R9
	TESTQ R9, R9
	JZ    matchlen_loop_repeat_extend
	BSFQ  R9, R9
	SARQ  $0x03, R9
	LEAL  (R10)(R9*1), R10
	JMP   repeat_extend_forward_end_encodeBlockAsm10B

matchlen_loop_repeat_extend:
	LEAL -8(DI), DI
	LEAL 8(R10), R10
	CMPL DI, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DI, DI
	JZ    repeat_extend_forward_end_encodeBlockAsm10B

matchlen_single_loopback_repeat_extend:
	MOVB (R8)(R10*1), R9
	CMPB (BX)(R10*1), R9
	JNE  repeat_extend_forward_end_encodeBlockAsm10B
	LEAL 1(R10), R10
	DECL DI
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm10B:
	ADDL  R10, AX
	MOVL  AX, BX
	SUBL  BP, BX
	MOVL  24(SP), BP
	MOVQ  dst_base+0(FP), DI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm10B

emit_repeat_again_match_repeat_encodeBlockAsm10B:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_encodeBlockAsm10B
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_encodeBlockAsm10B
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_match_repeat_encodeBlockAsm10B

cant_repeat_two_offset_match_repeat_encodeBlockAsm10B:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_repeat_encodeBlockAsm10B
	CMPL BX, $0x00010100
	JLT  repeat_four_match_repeat_encodeBlockAsm10B
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_repeat_encodeBlockAsm10B
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_match_repeat_encodeBlockAsm10B

repeat_five_match_repeat_encodeBlockAsm10B:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_four_match_repeat_encodeBlockAsm10B:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_three_match_repeat_encodeBlockAsm10B:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_two_match_repeat_encodeBlockAsm10B:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_two_offset_match_repeat_encodeBlockAsm10B:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_as_copy_encodeBlockAsm10B:
	CMPL BP, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm10B
	CMPL BX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm10B
	MOVB $0xff, (DI)
	MOVL BP, 1(DI)
	LEAL -64(BX), BX
	ADDQ $0x05, DI
	CMPL BX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm10B

emit_repeat_again_repeat_as_copy_encodeBlockAsm10B_emit_copy:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm10B_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm10B_emit_copy
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm10B_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm10B_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm10B_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm10B_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm10B_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm10B_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm10B_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_four_repeat_as_copy_encodeBlockAsm10B_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_three_repeat_as_copy_encodeBlockAsm10B_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_two_repeat_as_copy_encodeBlockAsm10B_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_two_offset_repeat_as_copy_encodeBlockAsm10B_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

four_bytes_remain_repeat_as_copy_encodeBlockAsm10B:
	TESTL BX, BX
	JZ    repeat_end_emit_encodeBlockAsm10B
	MOVB  $0x03, DL
	LEAL  -4(DX)(BX*4), BX
	MOVB  BL, (DI)
	MOVL  BP, 1(DI)
	ADDQ  $0x05, DI
	JMP   repeat_end_emit_encodeBlockAsm10B

two_byte_offset_repeat_as_copy_encodeBlockAsm10B:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm10B
	MOVB $0xee, (DI)
	MOVW BP, 1(DI)
	LEAL -60(BX), BX
	ADDQ $0x03, DI

emit_repeat_again_repeat_as_copy_encodeBlockAsm10B_emit_copy_short:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm10B_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm10B_emit_copy_short
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm10B_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm10B_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm10B_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm10B_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm10B_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm10B_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm10B_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_four_repeat_as_copy_encodeBlockAsm10B_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_three_repeat_as_copy_encodeBlockAsm10B_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_two_repeat_as_copy_encodeBlockAsm10B_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

repeat_two_offset_repeat_as_copy_encodeBlockAsm10B_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

two_byte_offset_short_repeat_as_copy_encodeBlockAsm10B:
	CMPL BX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm10B
	CMPL BP, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm10B
	MOVB $0x01, DL
	LEAL -16(DX)(BX*4), BX
	MOVB BP, 1(DI)
	SHRL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10B

emit_copy_three_repeat_as_copy_encodeBlockAsm10B:
	MOVB $0x02, DL
	LEAL -4(DX)(BX*4), BX
	MOVB BL, (DI)
	MOVW BP, 1(DI)
	ADDQ $0x03, DI

repeat_end_emit_encodeBlockAsm10B:
	MOVL AX, 20(SP)
	MOVQ DI, dst_base+0(FP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm10B
	JMP  search_loop_encodeBlockAsm10B

no_repeat_found_encodeBlockAsm10B:
	CMPL (CX)(BX*1), BP
	JEQ  candidate_match_encodeBlockAsm10B
	SHRQ $0x08, BP
	MOVL 32(SP)(R8*4), BX
	LEAL 2(AX), DI
	CMPL (CX)(SI*1), BP
	JEQ  candidate2_match_encodeBlockAsm10B
	MOVL DI, 32(SP)(R8*4)
	SHRQ $0x08, BP
	CMPL (CX)(BX*1), BP
	JEQ  candidate3_match_encodeBlockAsm10B
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm10B

candidate3_match_encodeBlockAsm10B:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm10B

candidate2_match_encodeBlockAsm10B:
	MOVL DI, 32(SP)(R8*4)
	INCL AX
	MOVL SI, BX

candidate_match_encodeBlockAsm10B:
	MOVL  20(SP), BP
	TESTL BX, BX
	JZ    match_extend_back_end_encodeBlockAsm10B

match_extend_back_loop_encodeBlockAsm10B:
	CMPL AX, BP
	JLE  match_extend_back_end_encodeBlockAsm10B
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(AX*1), SI
	CMPB DL, SI
	JNE  match_extend_back_end_encodeBlockAsm10B
	LEAL -1(AX), AX
	DECL BX
	JZ   match_extend_back_end_encodeBlockAsm10B
	JMP  match_extend_back_loop_encodeBlockAsm10B

match_extend_back_end_encodeBlockAsm10B:
	MOVQ dst_base+0(FP), BP
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ (BP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm10B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm10B:
	MOVL AX, BP
	MOVL 20(SP), SI
	CMPL SI, BP
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm10B
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(SI*1), BP
	SUBL SI, DI
	MOVQ dst_base+0(FP), SI
	MOVL DI, R8
	SUBL $0x01, R8
	JC   emit_literal_done_match_emit_encodeBlockAsm10B
	CMPL R8, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm10B
	CMPL R8, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm10B
	CMPL R8, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm10B
	CMPL R8, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm10B
	MOVB $0xfc, (SI)
	MOVL R8, 1(SI)
	ADDQ $0x05, SI
	JMP  memmove_match_emit_encodeBlockAsm10B

four_bytes_match_emit_encodeBlockAsm10B:
	MOVL R8, R9
	SHRL $0x10, R9
	MOVB $0xf8, (SI)
	MOVW R8, 1(SI)
	MOVB R9, 3(SI)
	ADDQ $0x04, SI
	JMP  memmove_match_emit_encodeBlockAsm10B

three_bytes_match_emit_encodeBlockAsm10B:
	MOVB $0xf4, (SI)
	MOVW R8, 1(SI)
	ADDQ $0x03, SI
	JMP  memmove_match_emit_encodeBlockAsm10B

two_bytes_match_emit_encodeBlockAsm10B:
	MOVB $0xf0, (SI)
	MOVB R8, 1(SI)
	ADDQ $0x02, SI
	JMP  memmove_match_emit_encodeBlockAsm10B

one_byte_match_emit_encodeBlockAsm10B:
	SHLB $0x02, R8
	MOVB R8, (SI)
	ADDQ $0x01, SI

memmove_match_emit_encodeBlockAsm10B:
	LEAQ (SI)(DI*1), R8
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_match_emit_encodeBlockAsm10B
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_1or2:
	MOVB (BP), R9
	MOVB -1(BP)(DI*1), BP
	MOVB R9, (SI)
	MOVB BP, -1(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_4:
	MOVL (BP), R9
	MOVL R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_3:
	MOVW (BP), R9
	MOVB 2(BP), BP
	MOVW R9, (SI)
	MOVB BP, 2(SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_5through7:
	MOVL (BP), R9
	MOVL -4(BP)(DI*1), BP
	MOVL R9, (SI)
	MOVL BP, -4(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_8:
	MOVQ (BP), R9
	MOVQ R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_9through16:
	MOVQ (BP), R9
	MOVQ -8(BP)(DI*1), BP
	MOVQ R9, (SI)
	MOVQ BP, -8(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_17through32:
	MOVOU (BP), X0
	MOVOU -16(BP)(DI*1), X1
	MOVOU X0, (SI)
	MOVOU X1, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_33through64:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU -32(BP)(DI*1), X2
	MOVOU -16(BP)(DI*1), X3
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, -32(SI)(DI*1)
	MOVOU X3, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_65through128:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_129through256:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU -128(BP)(DI*1), X8
	MOVOU -112(BP)(DI*1), X9
	MOVOU -96(BP)(DI*1), X10
	MOVOU -80(BP)(DI*1), X11
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, -128(SI)(DI*1)
	MOVOU X9, -112(SI)(DI*1)
	MOVOU X10, -96(SI)(DI*1)
	MOVOU X11, -80(SI)(DI*1)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm10B

emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU 128(BP), X8
	MOVOU 144(BP), X9
	MOVOU 160(BP), X10
	MOVOU 176(BP), X11
	MOVOU 192(BP), X12
	MOVOU 208(BP), X13
	MOVOU 224(BP), X14
	MOVOU 240(BP), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, 128(SI)
	MOVOU X9, 144(SI)
	MOVOU X10, 160(SI)
	MOVOU X11, 176(SI)
	MOVOU X12, 192(SI)
	MOVOU X13, 208(SI)
	MOVOU X14, 224(SI)
	MOVOU X15, 240(SI)
	CMPQ  DI, $0x00000100
	LEAQ  256(BP), BP
	LEAQ  256(SI), SI
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm10B_memmove_tail

memmove_end_copy_match_emit_encodeBlockAsm10B:
	MOVQ R8, SI

emit_literal_done_match_emit_encodeBlockAsm10B:
	MOVQ SI, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm10B:
match_nolit_loop_encodeBlockAsm10B:
	MOVL AX, BP
	SUBL BX, BP
	MOVL BP, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, BX
	MOVL 16(SP), BP
	SUBL AX, BP
	LEAQ (CX)(AX*1), SI
	LEAQ (CX)(BX*1), BX
	XORL R8, R8
	CMPL BP, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm10B

matchlen_loopback_match_nolit_encodeBlockAsm10B:
	MOVQ  (SI)(R8*1), DI
	XORQ  (BX)(R8*1), DI
	TESTQ DI, DI
	JZ    matchlen_loop_match_nolit_encodeBlockAsm10B
	BSFQ  DI, DI
	SARQ  $0x03, DI
	LEAL  (R8)(DI*1), R8
	JMP   match_nolit_end_encodeBlockAsm10B

matchlen_loop_match_nolit_encodeBlockAsm10B:
	LEAL -8(BP), BP
	LEAL 8(R8), R8
	CMPL BP, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm10B

matchlen_single_match_nolit_encodeBlockAsm10B:
	TESTL BP, BP
	JZ    match_nolit_end_encodeBlockAsm10B

matchlen_single_loopback_match_nolit_encodeBlockAsm10B:
	MOVB (SI)(R8*1), DI
	CMPB (BX)(R8*1), DI
	JNE  match_nolit_end_encodeBlockAsm10B
	LEAL 1(R8), R8
	DECL BP
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm10B

match_nolit_end_encodeBlockAsm10B:
	ADDL R8, AX
	MOVL 24(SP), BX
	ADDL $0x04, R8
	MOVQ dst_base+0(FP), BP
	CMPL BX, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm10B
	CMPL R8, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm10B
	MOVB $0xff, (BP)
	MOVL BX, 1(BP)
	LEAL -64(R8), R8
	ADDQ $0x05, BP
	CMPL R8, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm10B

emit_repeat_again_match_nolit_encodeBlockAsm10B_emit_copy:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm10B_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm10B_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm10B_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm10B_emit_copy:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm10B_emit_copy
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm10B_emit_copy
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm10B_emit_copy
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm10B_emit_copy

repeat_five_match_nolit_encodeBlockAsm10B_emit_copy:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

repeat_four_match_nolit_encodeBlockAsm10B_emit_copy:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

repeat_three_match_nolit_encodeBlockAsm10B_emit_copy:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

repeat_two_match_nolit_encodeBlockAsm10B_emit_copy:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

repeat_two_offset_match_nolit_encodeBlockAsm10B_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

four_bytes_remain_match_nolit_encodeBlockAsm10B:
	TESTL R8, R8
	JZ    match_nolit_emitcopy_end_encodeBlockAsm10B
	MOVB  $0x03, DL
	LEAL  -4(DX)(R8*4), R8
	MOVB  R8, (BP)
	MOVL  BX, 1(BP)
	ADDQ  $0x05, BP
	JMP   match_nolit_emitcopy_end_encodeBlockAsm10B

two_byte_offset_match_nolit_encodeBlockAsm10B:
	CMPL R8, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm10B
	MOVB $0xee, (BP)
	MOVW BX, 1(BP)
	LEAL -60(R8), R8
	ADDQ $0x03, BP

emit_repeat_again_match_nolit_encodeBlockAsm10B_emit_copy_short:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm10B_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm10B_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm10B_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm10B_emit_copy_short:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm10B_emit_copy_short
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm10B_emit_copy_short
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm10B_emit_copy_short
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm10B_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm10B_emit_copy_short:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

repeat_four_match_nolit_encodeBlockAsm10B_emit_copy_short:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

repeat_three_match_nolit_encodeBlockAsm10B_emit_copy_short:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

repeat_two_match_nolit_encodeBlockAsm10B_emit_copy_short:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

repeat_two_offset_match_nolit_encodeBlockAsm10B_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

two_byte_offset_short_match_nolit_encodeBlockAsm10B:
	CMPL R8, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm10B
	CMPL BX, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm10B
	MOVB $0x01, DL
	LEAL -16(DX)(R8*4), R8
	MOVB BL, 1(BP)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10B

emit_copy_three_match_nolit_encodeBlockAsm10B:
	MOVB $0x02, DL
	LEAL -4(DX)(R8*4), R8
	MOVB R8, (BP)
	MOVW BX, 1(BP)
	ADDQ $0x03, BP

match_nolit_emitcopy_end_encodeBlockAsm10B:
	MOVQ BP, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm10B
	CMPQ BP, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm10B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm10B:
	MOVQ  -2(CX)(AX*1), BP
	MOVQ  $0x0000cf1bbcdcbf9b, BX
	MOVQ  BP, SI
	SHRQ  $0x10, BP
	MOVQ  BP, DI
	SHLQ  $0x10, SI
	IMULQ BX, SI
	SHRQ  $0x36, SI
	SHLQ  $0x10, DI
	IMULQ BX, DI
	SHRQ  $0x36, DI
	LEAL  -2(AX), R8
	MOVL  32(SP)(DI*4), BX
	MOVL  R8, 32(SP)(SI*4)
	MOVL  AX, 32(SP)(DI*4)
	CMPL  (CX)(BX*1), BP
	JEQ   match_nolit_loop_encodeBlockAsm10B
	INCL  AX
	JMP   search_loop_encodeBlockAsm10B

emit_remainder_encodeBlockAsm10B:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), DX
	LEAQ (DX)(AX*1), DX
	CMPQ DX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm10B
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm10B:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm10B
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), AX
	SUBL DX, BX
	MOVQ dst_base+0(FP), CX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm10B
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm10B
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm10B
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm10B
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm10B
	MOVB $0xfc, (CX)
	MOVL DX, 1(CX)
	ADDQ $0x05, CX
	JMP  memmove_emit_remainder_encodeBlockAsm10B

four_bytes_emit_remainder_encodeBlockAsm10B:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (CX)
	MOVW DX, 1(CX)
	MOVB BP, 3(CX)
	ADDQ $0x04, CX
	JMP  memmove_emit_remainder_encodeBlockAsm10B

three_bytes_emit_remainder_encodeBlockAsm10B:
	MOVB $0xf4, (CX)
	MOVW DX, 1(CX)
	ADDQ $0x03, CX
	JMP  memmove_emit_remainder_encodeBlockAsm10B

two_bytes_emit_remainder_encodeBlockAsm10B:
	MOVB $0xf0, (CX)
	MOVB DL, 1(CX)
	ADDQ $0x02, CX
	JMP  memmove_emit_remainder_encodeBlockAsm10B

one_byte_emit_remainder_encodeBlockAsm10B:
	SHLB $0x02, DL
	MOVB DL, (CX)
	ADDQ $0x01, CX

memmove_emit_remainder_encodeBlockAsm10B:
	LEAQ (CX)(BX*1), DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_tail:
	TESTQ BX, BX
	JEQ   memmove_end_copy_emit_remainder_encodeBlockAsm10B
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_1or2:
	MOVB (AX), BP
	MOVB -1(AX)(BX*1), AL
	MOVB BP, (CX)
	MOVB AL, -1(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_4:
	MOVL (AX), BP
	MOVL BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_3:
	MOVW (AX), BP
	MOVB 2(AX), AL
	MOVW BP, (CX)
	MOVB AL, 2(CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_5through7:
	MOVL (AX), BP
	MOVL -4(AX)(BX*1), AX
	MOVL BP, (CX)
	MOVL AX, -4(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_8:
	MOVQ (AX), BP
	MOVQ BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_9through16:
	MOVQ (AX), BP
	MOVQ -8(AX)(BX*1), AX
	MOVQ BP, (CX)
	MOVQ AX, -8(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_17through32:
	MOVOU (AX), X0
	MOVOU -16(AX)(BX*1), X1
	MOVOU X0, (CX)
	MOVOU X1, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_33through64:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU -32(AX)(BX*1), X2
	MOVOU -16(AX)(BX*1), X3
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, -32(CX)(BX*1)
	MOVOU X3, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_65through128:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_129through256:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU -128(AX)(BX*1), X8
	MOVOU -112(AX)(BX*1), X9
	MOVOU -96(AX)(BX*1), X10
	MOVOU -80(AX)(BX*1), X11
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, -128(CX)(BX*1)
	MOVOU X9, -112(CX)(BX*1)
	MOVOU X10, -96(CX)(BX*1)
	MOVOU X11, -80(CX)(BX*1)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm10B

emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU 128(AX), X8
	MOVOU 144(AX), X9
	MOVOU 160(AX), X10
	MOVOU 176(AX), X11
	MOVOU 192(AX), X12
	MOVOU 208(AX), X13
	MOVOU 224(AX), X14
	MOVOU 240(AX), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, 128(CX)
	MOVOU X9, 144(CX)
	MOVOU X10, 160(CX)
	MOVOU X11, 176(CX)
	MOVOU X12, 192(CX)
	MOVOU X13, 208(CX)
	MOVOU X14, 224(CX)
	MOVOU X15, 240(CX)
	CMPQ  BX, $0x00000100
	LEAQ  256(AX), AX
	LEAQ  256(CX), CX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm10B_memmove_tail

memmove_end_copy_emit_remainder_encodeBlockAsm10B:
	MOVQ DX, CX

emit_literal_done_emit_remainder_encodeBlockAsm10B:
	MOVQ CX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm10B:
	MOVQ dst_base+0(FP), AX
	SUBQ 8(SP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm8B(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm8B(SB), $1056-56
	MOVQ $0x00000008, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm8B:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm8B
	MOVL  $0x00000000, 20(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  src_len+32(FP), CX
	LEAQ  -5(CX), BX
	LEAQ  -8(CX), BP
	MOVL  BP, 16(SP)
	SHRQ  $0x05, CX
	SUBL  CX, BX
	LEAQ  (AX)(BX*1), BX
	MOVQ  BX, (SP)
	MOVQ  AX, 8(SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm8B:
	MOVQ  (CX)(AX*1), BP
	MOVL  AX, BX
	SUBL  20(SP), BX
	SHRL  $0x04, BX
	LEAL  4(AX)(BX*1), BX
	MOVL  16(SP), SI
	CMPL  BX, SI
	JGT   emit_remainder_encodeBlockAsm8B
	MOVL  BX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, DI
	MOVQ  BP, R8
	MOVQ  BP, R9
	SHRQ  $0x08, R9
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x38, R8
	SHLQ  $0x10, R9
	IMULQ DI, R9
	SHRQ  $0x38, R9
	MOVL  32(SP)(R8*4), BX
	MOVL  32(SP)(R9*4), SI
	MOVL  AX, 32(SP)(R8*4)
	LEAL  1(AX), R8
	MOVL  R8, 32(SP)(R9*4)
	MOVQ  BP, R8
	SHRQ  $0x10, R8
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x38, R8
	MOVL  AX, DI
	SUBL  24(SP), DI
	MOVL  1(CX)(DI*1), R9
	MOVQ  BP, DI
	SHRQ  $0x08, DI
	CMPL  DI, R9
	JNE   no_repeat_found_encodeBlockAsm8B
	LEAL  1(AX), BP
	MOVL  20(SP), SI
	MOVL  BP, BX
	SUBL  24(SP), BX
	JZ    repeat_extend_back_end_encodeBlockAsm8B

repeat_extend_back_loop_encodeBlockAsm8B:
	CMPL BP, SI
	JLE  repeat_extend_back_end_encodeBlockAsm8B
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(BP*1), DI
	CMPB DL, DI
	JNE  repeat_extend_back_end_encodeBlockAsm8B
	LEAL -1(BP), BP
	DECL BX
	JNZ  repeat_extend_back_loop_encodeBlockAsm8B

repeat_extend_back_end_encodeBlockAsm8B:
	MOVL 20(SP), BX
	CMPL BX, BP
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm8B
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(BX*1), R8
	SUBL BX, DI
	MOVQ dst_base+0(FP), BX
	MOVL DI, R9
	SUBL $0x01, R9
	JC   emit_literal_done_repeat_emit_encodeBlockAsm8B
	CMPL R9, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm8B
	CMPL R9, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm8B
	CMPL R9, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm8B
	CMPL R9, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm8B
	MOVB $0xfc, (BX)
	MOVL R9, 1(BX)
	ADDQ $0x05, BX
	JMP  memmove_repeat_emit_encodeBlockAsm8B

four_bytes_repeat_emit_encodeBlockAsm8B:
	MOVL R9, R10
	SHRL $0x10, R10
	MOVB $0xf8, (BX)
	MOVW R9, 1(BX)
	MOVB R10, 3(BX)
	ADDQ $0x04, BX
	JMP  memmove_repeat_emit_encodeBlockAsm8B

three_bytes_repeat_emit_encodeBlockAsm8B:
	MOVB $0xf4, (BX)
	MOVW R9, 1(BX)
	ADDQ $0x03, BX
	JMP  memmove_repeat_emit_encodeBlockAsm8B

two_bytes_repeat_emit_encodeBlockAsm8B:
	MOVB $0xf0, (BX)
	MOVB R9, 1(BX)
	ADDQ $0x02, BX
	JMP  memmove_repeat_emit_encodeBlockAsm8B

one_byte_repeat_emit_encodeBlockAsm8B:
	SHLB $0x02, R9
	MOVB R9, (BX)
	ADDQ $0x01, BX

memmove_repeat_emit_encodeBlockAsm8B:
	LEAQ (BX)(DI*1), R9
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_repeat_emit_encodeBlockAsm8B
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_256through2048

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_1or2:
	MOVB (R8), R10
	MOVB -1(R8)(DI*1), R8
	MOVB R10, (BX)
	MOVB R8, -1(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_4:
	MOVL (R8), R10
	MOVL R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_3:
	MOVW (R8), R10
	MOVB 2(R8), R8
	MOVW R10, (BX)
	MOVB R8, 2(BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_5through7:
	MOVL (R8), R10
	MOVL -4(R8)(DI*1), R8
	MOVL R10, (BX)
	MOVL R8, -4(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_8:
	MOVQ (R8), R10
	MOVQ R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_9through16:
	MOVQ (R8), R10
	MOVQ -8(R8)(DI*1), R8
	MOVQ R10, (BX)
	MOVQ R8, -8(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_17through32:
	MOVOU (R8), X0
	MOVOU -16(R8)(DI*1), X1
	MOVOU X0, (BX)
	MOVOU X1, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_33through64:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU -32(R8)(DI*1), X2
	MOVOU -16(R8)(DI*1), X3
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, -32(BX)(DI*1)
	MOVOU X3, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_65through128:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_129through256:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU -128(R8)(DI*1), X8
	MOVOU -112(R8)(DI*1), X9
	MOVOU -96(R8)(DI*1), X10
	MOVOU -80(R8)(DI*1), X11
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, -128(BX)(DI*1)
	MOVOU X9, -112(BX)(DI*1)
	MOVOU X10, -96(BX)(DI*1)
	MOVOU X11, -80(BX)(DI*1)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm8B

emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU 128(R8), X8
	MOVOU 144(R8), X9
	MOVOU 160(R8), X10
	MOVOU 176(R8), X11
	MOVOU 192(R8), X12
	MOVOU 208(R8), X13
	MOVOU 224(R8), X14
	MOVOU 240(R8), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, 128(BX)
	MOVOU X9, 144(BX)
	MOVOU X10, 160(BX)
	MOVOU X11, 176(BX)
	MOVOU X12, 192(BX)
	MOVOU X13, 208(BX)
	MOVOU X14, 224(BX)
	MOVOU X15, 240(BX)
	CMPQ  DI, $0x00000100
	LEAQ  256(R8), R8
	LEAQ  256(BX), BX
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm8B_memmove_tail

memmove_end_copy_repeat_emit_encodeBlockAsm8B:
	MOVQ R9, BX

emit_literal_done_repeat_emit_encodeBlockAsm8B:
	MOVQ BX, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm8B:
	ADDL $0x05, AX
	MOVL AX, BX
	SUBL 24(SP), BX
	MOVL 16(SP), DI
	SUBL AX, DI
	LEAQ (CX)(AX*1), R8
	LEAQ (CX)(BX*1), BX
	XORL R10, R10
	CMPL DI, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (R8)(R10*1), R9
	XORQ  (BX)(R10*1), R9
	TESTQ R9, R9
	JZ    matchlen_loop_repeat_extend
	BSFQ  R9, R9
	SARQ  $0x03, R9
	LEAL  (R10)(R9*1), R10
	JMP   repeat_extend_forward_end_encodeBlockAsm8B

matchlen_loop_repeat_extend:
	LEAL -8(DI), DI
	LEAL 8(R10), R10
	CMPL DI, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DI, DI
	JZ    repeat_extend_forward_end_encodeBlockAsm8B

matchlen_single_loopback_repeat_extend:
	MOVB (R8)(R10*1), R9
	CMPB (BX)(R10*1), R9
	JNE  repeat_extend_forward_end_encodeBlockAsm8B
	LEAL 1(R10), R10
	DECL DI
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm8B:
	ADDL  R10, AX
	MOVL  AX, BX
	SUBL  BP, BX
	MOVL  24(SP), BP
	MOVQ  dst_base+0(FP), DI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm8B

emit_repeat_again_match_repeat_encodeBlockAsm8B:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_encodeBlockAsm8B
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_encodeBlockAsm8B
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_match_repeat_encodeBlockAsm8B

cant_repeat_two_offset_match_repeat_encodeBlockAsm8B:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_repeat_encodeBlockAsm8B
	CMPL BX, $0x00010100
	JLT  repeat_four_match_repeat_encodeBlockAsm8B
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_repeat_encodeBlockAsm8B
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_match_repeat_encodeBlockAsm8B

repeat_five_match_repeat_encodeBlockAsm8B:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_four_match_repeat_encodeBlockAsm8B:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_three_match_repeat_encodeBlockAsm8B:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_two_match_repeat_encodeBlockAsm8B:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_two_offset_match_repeat_encodeBlockAsm8B:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_as_copy_encodeBlockAsm8B:
	CMPL BP, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm8B
	CMPL BX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm8B
	MOVB $0xff, (DI)
	MOVL BP, 1(DI)
	LEAL -64(BX), BX
	ADDQ $0x05, DI
	CMPL BX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm8B

emit_repeat_again_repeat_as_copy_encodeBlockAsm8B_emit_copy:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm8B_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm8B_emit_copy
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm8B_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm8B_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm8B_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm8B_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm8B_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm8B_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm8B_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_four_repeat_as_copy_encodeBlockAsm8B_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_three_repeat_as_copy_encodeBlockAsm8B_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_two_repeat_as_copy_encodeBlockAsm8B_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_two_offset_repeat_as_copy_encodeBlockAsm8B_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

four_bytes_remain_repeat_as_copy_encodeBlockAsm8B:
	TESTL BX, BX
	JZ    repeat_end_emit_encodeBlockAsm8B
	MOVB  $0x03, DL
	LEAL  -4(DX)(BX*4), BX
	MOVB  BL, (DI)
	MOVL  BP, 1(DI)
	ADDQ  $0x05, DI
	JMP   repeat_end_emit_encodeBlockAsm8B

two_byte_offset_repeat_as_copy_encodeBlockAsm8B:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm8B
	MOVB $0xee, (DI)
	MOVW BP, 1(DI)
	LEAL -60(BX), BX
	ADDQ $0x03, DI

emit_repeat_again_repeat_as_copy_encodeBlockAsm8B_emit_copy_short:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm8B_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm8B_emit_copy_short
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm8B_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm8B_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm8B_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm8B_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm8B_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm8B_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm8B_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_four_repeat_as_copy_encodeBlockAsm8B_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_three_repeat_as_copy_encodeBlockAsm8B_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_two_repeat_as_copy_encodeBlockAsm8B_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

repeat_two_offset_repeat_as_copy_encodeBlockAsm8B_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

two_byte_offset_short_repeat_as_copy_encodeBlockAsm8B:
	CMPL BX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm8B
	CMPL BP, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm8B
	MOVB $0x01, DL
	LEAL -16(DX)(BX*4), BX
	MOVB BP, 1(DI)
	SHRL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8B

emit_copy_three_repeat_as_copy_encodeBlockAsm8B:
	MOVB $0x02, DL
	LEAL -4(DX)(BX*4), BX
	MOVB BL, (DI)
	MOVW BP, 1(DI)
	ADDQ $0x03, DI

repeat_end_emit_encodeBlockAsm8B:
	MOVL AX, 20(SP)
	MOVQ DI, dst_base+0(FP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm8B
	JMP  search_loop_encodeBlockAsm8B

no_repeat_found_encodeBlockAsm8B:
	CMPL (CX)(BX*1), BP
	JEQ  candidate_match_encodeBlockAsm8B
	SHRQ $0x08, BP
	MOVL 32(SP)(R8*4), BX
	LEAL 2(AX), DI
	CMPL (CX)(SI*1), BP
	JEQ  candidate2_match_encodeBlockAsm8B
	MOVL DI, 32(SP)(R8*4)
	SHRQ $0x08, BP
	CMPL (CX)(BX*1), BP
	JEQ  candidate3_match_encodeBlockAsm8B
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm8B

candidate3_match_encodeBlockAsm8B:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm8B

candidate2_match_encodeBlockAsm8B:
	MOVL DI, 32(SP)(R8*4)
	INCL AX
	MOVL SI, BX

candidate_match_encodeBlockAsm8B:
	MOVL  20(SP), BP
	TESTL BX, BX
	JZ    match_extend_back_end_encodeBlockAsm8B

match_extend_back_loop_encodeBlockAsm8B:
	CMPL AX, BP
	JLE  match_extend_back_end_encodeBlockAsm8B
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(AX*1), SI
	CMPB DL, SI
	JNE  match_extend_back_end_encodeBlockAsm8B
	LEAL -1(AX), AX
	DECL BX
	JZ   match_extend_back_end_encodeBlockAsm8B
	JMP  match_extend_back_loop_encodeBlockAsm8B

match_extend_back_end_encodeBlockAsm8B:
	MOVQ dst_base+0(FP), BP
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ (BP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm8B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm8B:
	MOVL AX, BP
	MOVL 20(SP), SI
	CMPL SI, BP
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm8B
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(SI*1), BP
	SUBL SI, DI
	MOVQ dst_base+0(FP), SI
	MOVL DI, R8
	SUBL $0x01, R8
	JC   emit_literal_done_match_emit_encodeBlockAsm8B
	CMPL R8, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm8B
	CMPL R8, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm8B
	CMPL R8, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm8B
	CMPL R8, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm8B
	MOVB $0xfc, (SI)
	MOVL R8, 1(SI)
	ADDQ $0x05, SI
	JMP  memmove_match_emit_encodeBlockAsm8B

four_bytes_match_emit_encodeBlockAsm8B:
	MOVL R8, R9
	SHRL $0x10, R9
	MOVB $0xf8, (SI)
	MOVW R8, 1(SI)
	MOVB R9, 3(SI)
	ADDQ $0x04, SI
	JMP  memmove_match_emit_encodeBlockAsm8B

three_bytes_match_emit_encodeBlockAsm8B:
	MOVB $0xf4, (SI)
	MOVW R8, 1(SI)
	ADDQ $0x03, SI
	JMP  memmove_match_emit_encodeBlockAsm8B

two_bytes_match_emit_encodeBlockAsm8B:
	MOVB $0xf0, (SI)
	MOVB R8, 1(SI)
	ADDQ $0x02, SI
	JMP  memmove_match_emit_encodeBlockAsm8B

one_byte_match_emit_encodeBlockAsm8B:
	SHLB $0x02, R8
	MOVB R8, (SI)
	ADDQ $0x01, SI

memmove_match_emit_encodeBlockAsm8B:
	LEAQ (SI)(DI*1), R8
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_match_emit_encodeBlockAsm8B
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_1or2:
	MOVB (BP), R9
	MOVB -1(BP)(DI*1), BP
	MOVB R9, (SI)
	MOVB BP, -1(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_4:
	MOVL (BP), R9
	MOVL R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_3:
	MOVW (BP), R9
	MOVB 2(BP), BP
	MOVW R9, (SI)
	MOVB BP, 2(SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_5through7:
	MOVL (BP), R9
	MOVL -4(BP)(DI*1), BP
	MOVL R9, (SI)
	MOVL BP, -4(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_8:
	MOVQ (BP), R9
	MOVQ R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_9through16:
	MOVQ (BP), R9
	MOVQ -8(BP)(DI*1), BP
	MOVQ R9, (SI)
	MOVQ BP, -8(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_17through32:
	MOVOU (BP), X0
	MOVOU -16(BP)(DI*1), X1
	MOVOU X0, (SI)
	MOVOU X1, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_33through64:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU -32(BP)(DI*1), X2
	MOVOU -16(BP)(DI*1), X3
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, -32(SI)(DI*1)
	MOVOU X3, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_65through128:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_129through256:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU -128(BP)(DI*1), X8
	MOVOU -112(BP)(DI*1), X9
	MOVOU -96(BP)(DI*1), X10
	MOVOU -80(BP)(DI*1), X11
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, -128(SI)(DI*1)
	MOVOU X9, -112(SI)(DI*1)
	MOVOU X10, -96(SI)(DI*1)
	MOVOU X11, -80(SI)(DI*1)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm8B

emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU 128(BP), X8
	MOVOU 144(BP), X9
	MOVOU 160(BP), X10
	MOVOU 176(BP), X11
	MOVOU 192(BP), X12
	MOVOU 208(BP), X13
	MOVOU 224(BP), X14
	MOVOU 240(BP), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, 128(SI)
	MOVOU X9, 144(SI)
	MOVOU X10, 160(SI)
	MOVOU X11, 176(SI)
	MOVOU X12, 192(SI)
	MOVOU X13, 208(SI)
	MOVOU X14, 224(SI)
	MOVOU X15, 240(SI)
	CMPQ  DI, $0x00000100
	LEAQ  256(BP), BP
	LEAQ  256(SI), SI
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm8B_memmove_tail

memmove_end_copy_match_emit_encodeBlockAsm8B:
	MOVQ R8, SI

emit_literal_done_match_emit_encodeBlockAsm8B:
	MOVQ SI, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm8B:
match_nolit_loop_encodeBlockAsm8B:
	MOVL AX, BP
	SUBL BX, BP
	MOVL BP, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, BX
	MOVL 16(SP), BP
	SUBL AX, BP
	LEAQ (CX)(AX*1), SI
	LEAQ (CX)(BX*1), BX
	XORL R8, R8
	CMPL BP, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm8B

matchlen_loopback_match_nolit_encodeBlockAsm8B:
	MOVQ  (SI)(R8*1), DI
	XORQ  (BX)(R8*1), DI
	TESTQ DI, DI
	JZ    matchlen_loop_match_nolit_encodeBlockAsm8B
	BSFQ  DI, DI
	SARQ  $0x03, DI
	LEAL  (R8)(DI*1), R8
	JMP   match_nolit_end_encodeBlockAsm8B

matchlen_loop_match_nolit_encodeBlockAsm8B:
	LEAL -8(BP), BP
	LEAL 8(R8), R8
	CMPL BP, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm8B

matchlen_single_match_nolit_encodeBlockAsm8B:
	TESTL BP, BP
	JZ    match_nolit_end_encodeBlockAsm8B

matchlen_single_loopback_match_nolit_encodeBlockAsm8B:
	MOVB (SI)(R8*1), DI
	CMPB (BX)(R8*1), DI
	JNE  match_nolit_end_encodeBlockAsm8B
	LEAL 1(R8), R8
	DECL BP
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm8B

match_nolit_end_encodeBlockAsm8B:
	ADDL R8, AX
	MOVL 24(SP), BX
	ADDL $0x04, R8
	MOVQ dst_base+0(FP), BP
	CMPL BX, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm8B
	CMPL R8, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm8B
	MOVB $0xff, (BP)
	MOVL BX, 1(BP)
	LEAL -64(R8), R8
	ADDQ $0x05, BP
	CMPL R8, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm8B

emit_repeat_again_match_nolit_encodeBlockAsm8B_emit_copy:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm8B_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm8B_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm8B_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm8B_emit_copy:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm8B_emit_copy
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm8B_emit_copy
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm8B_emit_copy
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm8B_emit_copy

repeat_five_match_nolit_encodeBlockAsm8B_emit_copy:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

repeat_four_match_nolit_encodeBlockAsm8B_emit_copy:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

repeat_three_match_nolit_encodeBlockAsm8B_emit_copy:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

repeat_two_match_nolit_encodeBlockAsm8B_emit_copy:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

repeat_two_offset_match_nolit_encodeBlockAsm8B_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

four_bytes_remain_match_nolit_encodeBlockAsm8B:
	TESTL R8, R8
	JZ    match_nolit_emitcopy_end_encodeBlockAsm8B
	MOVB  $0x03, DL
	LEAL  -4(DX)(R8*4), R8
	MOVB  R8, (BP)
	MOVL  BX, 1(BP)
	ADDQ  $0x05, BP
	JMP   match_nolit_emitcopy_end_encodeBlockAsm8B

two_byte_offset_match_nolit_encodeBlockAsm8B:
	CMPL R8, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm8B
	MOVB $0xee, (BP)
	MOVW BX, 1(BP)
	LEAL -60(R8), R8
	ADDQ $0x03, BP

emit_repeat_again_match_nolit_encodeBlockAsm8B_emit_copy_short:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm8B_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm8B_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm8B_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm8B_emit_copy_short:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm8B_emit_copy_short
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm8B_emit_copy_short
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm8B_emit_copy_short
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm8B_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm8B_emit_copy_short:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

repeat_four_match_nolit_encodeBlockAsm8B_emit_copy_short:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

repeat_three_match_nolit_encodeBlockAsm8B_emit_copy_short:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

repeat_two_match_nolit_encodeBlockAsm8B_emit_copy_short:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

repeat_two_offset_match_nolit_encodeBlockAsm8B_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

two_byte_offset_short_match_nolit_encodeBlockAsm8B:
	CMPL R8, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm8B
	CMPL BX, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm8B
	MOVB $0x01, DL
	LEAL -16(DX)(R8*4), R8
	MOVB BL, 1(BP)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8B

emit_copy_three_match_nolit_encodeBlockAsm8B:
	MOVB $0x02, DL
	LEAL -4(DX)(R8*4), R8
	MOVB R8, (BP)
	MOVW BX, 1(BP)
	ADDQ $0x03, BP

match_nolit_emitcopy_end_encodeBlockAsm8B:
	MOVQ BP, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm8B
	CMPQ BP, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm8B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm8B:
	MOVQ  -2(CX)(AX*1), BP
	MOVQ  $0x0000cf1bbcdcbf9b, BX
	MOVQ  BP, SI
	SHRQ  $0x10, BP
	MOVQ  BP, DI
	SHLQ  $0x10, SI
	IMULQ BX, SI
	SHRQ  $0x38, SI
	SHLQ  $0x10, DI
	IMULQ BX, DI
	SHRQ  $0x38, DI
	LEAL  -2(AX), R8
	MOVL  32(SP)(DI*4), BX
	MOVL  R8, 32(SP)(SI*4)
	MOVL  AX, 32(SP)(DI*4)
	CMPL  (CX)(BX*1), BP
	JEQ   match_nolit_loop_encodeBlockAsm8B
	INCL  AX
	JMP   search_loop_encodeBlockAsm8B

emit_remainder_encodeBlockAsm8B:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), DX
	LEAQ (DX)(AX*1), DX
	CMPQ DX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm8B
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm8B:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm8B
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), AX
	SUBL DX, BX
	MOVQ dst_base+0(FP), CX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm8B
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm8B
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm8B
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm8B
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm8B
	MOVB $0xfc, (CX)
	MOVL DX, 1(CX)
	ADDQ $0x05, CX
	JMP  memmove_emit_remainder_encodeBlockAsm8B

four_bytes_emit_remainder_encodeBlockAsm8B:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (CX)
	MOVW DX, 1(CX)
	MOVB BP, 3(CX)
	ADDQ $0x04, CX
	JMP  memmove_emit_remainder_encodeBlockAsm8B

three_bytes_emit_remainder_encodeBlockAsm8B:
	MOVB $0xf4, (CX)
	MOVW DX, 1(CX)
	ADDQ $0x03, CX
	JMP  memmove_emit_remainder_encodeBlockAsm8B

two_bytes_emit_remainder_encodeBlockAsm8B:
	MOVB $0xf0, (CX)
	MOVB DL, 1(CX)
	ADDQ $0x02, CX
	JMP  memmove_emit_remainder_encodeBlockAsm8B

one_byte_emit_remainder_encodeBlockAsm8B:
	SHLB $0x02, DL
	MOVB DL, (CX)
	ADDQ $0x01, CX

memmove_emit_remainder_encodeBlockAsm8B:
	LEAQ (CX)(BX*1), DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_tail:
	TESTQ BX, BX
	JEQ   memmove_end_copy_emit_remainder_encodeBlockAsm8B
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_1or2:
	MOVB (AX), BP
	MOVB -1(AX)(BX*1), AL
	MOVB BP, (CX)
	MOVB AL, -1(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_4:
	MOVL (AX), BP
	MOVL BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_3:
	MOVW (AX), BP
	MOVB 2(AX), AL
	MOVW BP, (CX)
	MOVB AL, 2(CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_5through7:
	MOVL (AX), BP
	MOVL -4(AX)(BX*1), AX
	MOVL BP, (CX)
	MOVL AX, -4(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_8:
	MOVQ (AX), BP
	MOVQ BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_9through16:
	MOVQ (AX), BP
	MOVQ -8(AX)(BX*1), AX
	MOVQ BP, (CX)
	MOVQ AX, -8(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_17through32:
	MOVOU (AX), X0
	MOVOU -16(AX)(BX*1), X1
	MOVOU X0, (CX)
	MOVOU X1, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_33through64:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU -32(AX)(BX*1), X2
	MOVOU -16(AX)(BX*1), X3
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, -32(CX)(BX*1)
	MOVOU X3, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_65through128:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_129through256:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU -128(AX)(BX*1), X8
	MOVOU -112(AX)(BX*1), X9
	MOVOU -96(AX)(BX*1), X10
	MOVOU -80(AX)(BX*1), X11
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, -128(CX)(BX*1)
	MOVOU X9, -112(CX)(BX*1)
	MOVOU X10, -96(CX)(BX*1)
	MOVOU X11, -80(CX)(BX*1)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm8B

emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU 128(AX), X8
	MOVOU 144(AX), X9
	MOVOU 160(AX), X10
	MOVOU 176(AX), X11
	MOVOU 192(AX), X12
	MOVOU 208(AX), X13
	MOVOU 224(AX), X14
	MOVOU 240(AX), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, 128(CX)
	MOVOU X9, 144(CX)
	MOVOU X10, 160(CX)
	MOVOU X11, 176(CX)
	MOVOU X12, 192(CX)
	MOVOU X13, 208(CX)
	MOVOU X14, 224(CX)
	MOVOU X15, 240(CX)
	CMPQ  BX, $0x00000100
	LEAQ  256(AX), AX
	LEAQ  256(CX), CX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm8B_memmove_tail

memmove_end_copy_emit_remainder_encodeBlockAsm8B:
	MOVQ DX, CX

emit_literal_done_emit_remainder_encodeBlockAsm8B:
	MOVQ CX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm8B:
	MOVQ dst_base+0(FP), AX
	SUBQ 8(SP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsmAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsmAvx(SB), $65568-56
	MOVQ $0x00000200, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsmAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsmAvx
	MOVL  $0x00000000, 20(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  src_len+32(FP), CX
	LEAQ  -5(CX), BX
	LEAQ  -8(CX), BP
	MOVL  BP, 16(SP)
	SHRQ  $0x05, CX
	SUBL  CX, BX
	LEAQ  (AX)(BX*1), BX
	MOVQ  BX, (SP)
	MOVQ  AX, 8(SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsmAvx:
	MOVQ  (CX)(AX*1), BP
	MOVL  AX, BX
	SUBL  20(SP), BX
	SHRL  $0x05, BX
	LEAL  4(AX)(BX*1), BX
	MOVL  16(SP), SI
	CMPL  BX, SI
	JGT   emit_remainder_encodeBlockAsmAvx
	MOVL  BX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, DI
	MOVQ  BP, R8
	MOVQ  BP, R9
	SHRQ  $0x08, R9
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x32, R8
	SHLQ  $0x10, R9
	IMULQ DI, R9
	SHRQ  $0x32, R9
	MOVL  32(SP)(R8*4), BX
	MOVL  32(SP)(R9*4), SI
	MOVL  AX, 32(SP)(R8*4)
	LEAL  1(AX), R8
	MOVL  R8, 32(SP)(R9*4)
	MOVQ  BP, R8
	SHRQ  $0x10, R8
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x32, R8
	MOVL  AX, DI
	SUBL  24(SP), DI
	MOVL  1(CX)(DI*1), R9
	MOVQ  BP, DI
	SHRQ  $0x08, DI
	CMPL  DI, R9
	JNE   no_repeat_found_encodeBlockAsmAvx
	LEAL  1(AX), BP
	MOVL  20(SP), SI
	MOVL  BP, BX
	SUBL  24(SP), BX
	JZ    repeat_extend_back_end_encodeBlockAsmAvx

repeat_extend_back_loop_encodeBlockAsmAvx:
	CMPL BP, SI
	JLE  repeat_extend_back_end_encodeBlockAsmAvx
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(BP*1), DI
	CMPB DL, DI
	JNE  repeat_extend_back_end_encodeBlockAsmAvx
	LEAL -1(BP), BP
	DECL BX
	JNZ  repeat_extend_back_loop_encodeBlockAsmAvx

repeat_extend_back_end_encodeBlockAsmAvx:
	MOVL 20(SP), BX
	CMPL BX, BP
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsmAvx
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(BX*1), R8
	SUBL BX, DI
	MOVQ dst_base+0(FP), BX
	MOVL DI, R9
	SUBL $0x01, R9
	JC   emit_literal_done_repeat_emit_encodeBlockAsmAvx
	CMPL R9, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsmAvx
	CMPL R9, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsmAvx
	CMPL R9, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsmAvx
	CMPL R9, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsmAvx
	MOVB $0xfc, (BX)
	MOVL R9, 1(BX)
	ADDQ $0x05, BX
	JMP  memmove_repeat_emit_encodeBlockAsmAvx

four_bytes_repeat_emit_encodeBlockAsmAvx:
	MOVL R9, R10
	SHRL $0x10, R10
	MOVB $0xf8, (BX)
	MOVW R9, 1(BX)
	MOVB R10, 3(BX)
	ADDQ $0x04, BX
	JMP  memmove_repeat_emit_encodeBlockAsmAvx

three_bytes_repeat_emit_encodeBlockAsmAvx:
	MOVB $0xf4, (BX)
	MOVW R9, 1(BX)
	ADDQ $0x03, BX
	JMP  memmove_repeat_emit_encodeBlockAsmAvx

two_bytes_repeat_emit_encodeBlockAsmAvx:
	MOVB $0xf0, (BX)
	MOVB R9, 1(BX)
	ADDQ $0x02, BX
	JMP  memmove_repeat_emit_encodeBlockAsmAvx

one_byte_repeat_emit_encodeBlockAsmAvx:
	SHLB $0x02, R9
	MOVB R9, (BX)
	ADDQ $0x01, BX

memmove_repeat_emit_encodeBlockAsmAvx:
	LEAQ (BX)(DI*1), R9
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_repeat_emit_encodeBlockAsmAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_avxUnaligned

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_1or2:
	MOVB (R8), R10
	MOVB -1(R8)(DI*1), R11
	MOVB R10, (BX)
	MOVB R11, -1(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_4:
	MOVL (R8), R10
	MOVL R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_3:
	MOVW (R8), R10
	MOVB 2(R8), R11
	MOVW R10, (BX)
	MOVB R11, 2(BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_5through7:
	MOVL (R8), R10
	MOVL -4(R8)(DI*1), R11
	MOVL R10, (BX)
	MOVL R11, -4(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_8:
	MOVQ (R8), R10
	MOVQ R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_9through16:
	MOVQ (R8), R10
	MOVQ -8(R8)(DI*1), R11
	MOVQ R10, (BX)
	MOVQ R11, -8(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_17through32:
	MOVOU (R8), X0
	MOVOU -16(R8)(DI*1), X1
	MOVOU X0, (BX)
	MOVOU X1, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_33through64:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU -32(R8)(DI*1), X2
	MOVOU -16(R8)(DI*1), X3
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, -32(BX)(DI*1)
	MOVOU X3, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_65through128:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_129through256:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU -128(R8)(DI*1), X8
	MOVOU -112(R8)(DI*1), X9
	MOVOU -96(R8)(DI*1), X10
	MOVOU -80(R8)(DI*1), X11
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, -128(BX)(DI*1)
	MOVOU X9, -112(BX)(DI*1)
	MOVOU X10, -96(BX)(DI*1)
	MOVOU X11, -80(BX)(DI*1)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU 128(R8), X8
	MOVOU 144(R8), X9
	MOVOU 160(R8), X10
	MOVOU 176(R8), X11
	MOVOU 192(R8), X12
	MOVOU 208(R8), X13
	MOVOU 224(R8), X14
	MOVOU 240(R8), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, 128(BX)
	MOVOU X9, 144(BX)
	MOVOU X10, 160(BX)
	MOVOU X11, 176(BX)
	MOVOU X12, 192(BX)
	MOVOU X13, 208(BX)
	MOVOU X14, 224(BX)
	MOVOU X15, 240(BX)
	CMPQ  DI, $0x00000100
	LEAQ  256(R8), R8
	LEAQ  256(BX), BX
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_tail

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_avxUnaligned:
	LEAQ    (R8)(DI*1), R11
	MOVQ    BX, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, BX
	ADDQ    $0x20, BX
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    BX, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, DI
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R8), Y4
	ADDQ    R12, R8
	SUBQ    R10, DI

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_gobble_128_loop:
	VMOVDQU (R8), Y0
	VMOVDQU 32(R8), Y1
	VMOVDQU 64(R8), Y2
	VMOVDQU 96(R8), Y3
	ADDQ    R10, R8
	VMOVDQA Y0, (BX)
	VMOVDQA Y1, 32(BX)
	VMOVDQA Y2, 64(BX)
	VMOVDQA Y3, 96(BX)
	ADDQ    R10, BX
	SUBQ    R10, DI
	JA      emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_gobble_128_loop
	ADDQ    R10, DI
	ADDQ    BX, DI
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)

memmove_end_copy_repeat_emit_encodeBlockAsmAvx:
	MOVQ R9, BX

emit_literal_done_repeat_emit_encodeBlockAsmAvx:
	MOVQ BX, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsmAvx:
	ADDL $0x05, AX
	MOVL AX, BX
	SUBL 24(SP), BX
	MOVL 16(SP), DI
	SUBL AX, DI
	LEAQ (CX)(AX*1), R8
	LEAQ (CX)(BX*1), BX
	XORL R10, R10
	CMPL DI, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (R8)(R10*1), R9
	XORQ  (BX)(R10*1), R9
	TESTQ R9, R9
	JZ    matchlen_loop_repeat_extend
	BSFQ  R9, R9
	SARQ  $0x03, R9
	LEAL  (R10)(R9*1), R10
	JMP   repeat_extend_forward_end_encodeBlockAsmAvx

matchlen_loop_repeat_extend:
	LEAL -8(DI), DI
	LEAL 8(R10), R10
	CMPL DI, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DI, DI
	JZ    repeat_extend_forward_end_encodeBlockAsmAvx

matchlen_single_loopback_repeat_extend:
	MOVB (R8)(R10*1), R9
	CMPB (BX)(R10*1), R9
	JNE  repeat_extend_forward_end_encodeBlockAsmAvx
	LEAL 1(R10), R10
	DECL DI
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsmAvx:
	ADDL  R10, AX
	MOVL  AX, BX
	SUBL  BP, BX
	MOVL  24(SP), BP
	MOVQ  dst_base+0(FP), DI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsmAvx

emit_repeat_again_match_repeat_encodeBlockAsmAvx:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_encodeBlockAsmAvx
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_encodeBlockAsmAvx
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_match_repeat_encodeBlockAsmAvx

cant_repeat_two_offset_match_repeat_encodeBlockAsmAvx:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_repeat_encodeBlockAsmAvx
	CMPL BX, $0x00010100
	JLT  repeat_four_match_repeat_encodeBlockAsmAvx
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_repeat_encodeBlockAsmAvx
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_match_repeat_encodeBlockAsmAvx

repeat_five_match_repeat_encodeBlockAsmAvx:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_four_match_repeat_encodeBlockAsmAvx:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_three_match_repeat_encodeBlockAsmAvx:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_match_repeat_encodeBlockAsmAvx:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_offset_match_repeat_encodeBlockAsmAvx:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_as_copy_encodeBlockAsmAvx:
	CMPL BP, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsmAvx
	CMPL BX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsmAvx
	MOVB $0xff, (DI)
	MOVL BP, 1(DI)
	LEAL -64(BX), BX
	ADDQ $0x05, DI
	CMPL BX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsmAvx

emit_repeat_again_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsmAvx_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_four_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_three_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

four_bytes_remain_repeat_as_copy_encodeBlockAsmAvx:
	TESTL BX, BX
	JZ    repeat_end_emit_encodeBlockAsmAvx
	MOVB  $0x03, DL
	LEAL  -4(DX)(BX*4), BX
	MOVB  BL, (DI)
	MOVL  BP, 1(DI)
	ADDQ  $0x05, DI
	JMP   repeat_end_emit_encodeBlockAsmAvx

two_byte_offset_repeat_as_copy_encodeBlockAsmAvx:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsmAvx
	MOVB $0xee, (DI)
	MOVW BP, 1(DI)
	LEAL -60(BX), BX
	ADDQ $0x03, DI

emit_repeat_again_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_four_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_three_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

two_byte_offset_short_repeat_as_copy_encodeBlockAsmAvx:
	CMPL BX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsmAvx
	CMPL BP, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsmAvx
	MOVB $0x01, DL
	LEAL -16(DX)(BX*4), BX
	MOVB BP, 1(DI)
	SHRL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsmAvx

emit_copy_three_repeat_as_copy_encodeBlockAsmAvx:
	MOVB $0x02, DL
	LEAL -4(DX)(BX*4), BX
	MOVB BL, (DI)
	MOVW BP, 1(DI)
	ADDQ $0x03, DI

repeat_end_emit_encodeBlockAsmAvx:
	MOVL AX, 20(SP)
	MOVQ DI, dst_base+0(FP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsmAvx
	JMP  search_loop_encodeBlockAsmAvx

no_repeat_found_encodeBlockAsmAvx:
	CMPL (CX)(BX*1), BP
	JEQ  candidate_match_encodeBlockAsmAvx
	SHRQ $0x08, BP
	MOVL 32(SP)(R8*4), BX
	LEAL 2(AX), DI
	CMPL (CX)(SI*1), BP
	JEQ  candidate2_match_encodeBlockAsmAvx
	MOVL DI, 32(SP)(R8*4)
	SHRQ $0x08, BP
	CMPL (CX)(BX*1), BP
	JEQ  candidate3_match_encodeBlockAsmAvx
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsmAvx

candidate3_match_encodeBlockAsmAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsmAvx

candidate2_match_encodeBlockAsmAvx:
	MOVL DI, 32(SP)(R8*4)
	INCL AX
	MOVL SI, BX

candidate_match_encodeBlockAsmAvx:
	MOVL  20(SP), BP
	TESTL BX, BX
	JZ    match_extend_back_end_encodeBlockAsmAvx

match_extend_back_loop_encodeBlockAsmAvx:
	CMPL AX, BP
	JLE  match_extend_back_end_encodeBlockAsmAvx
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(AX*1), SI
	CMPB DL, SI
	JNE  match_extend_back_end_encodeBlockAsmAvx
	LEAL -1(AX), AX
	DECL BX
	JZ   match_extend_back_end_encodeBlockAsmAvx
	JMP  match_extend_back_loop_encodeBlockAsmAvx

match_extend_back_end_encodeBlockAsmAvx:
	MOVQ dst_base+0(FP), BP
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ (BP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsmAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsmAvx:
	MOVL AX, BP
	MOVL 20(SP), SI
	CMPL SI, BP
	JEQ  emit_literal_skip_match_emit_encodeBlockAsmAvx
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(SI*1), BP
	SUBL SI, DI
	MOVQ dst_base+0(FP), SI
	MOVL DI, R8
	SUBL $0x01, R8
	JC   emit_literal_done_match_emit_encodeBlockAsmAvx
	CMPL R8, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsmAvx
	CMPL R8, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsmAvx
	CMPL R8, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsmAvx
	CMPL R8, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsmAvx
	MOVB $0xfc, (SI)
	MOVL R8, 1(SI)
	ADDQ $0x05, SI
	JMP  memmove_match_emit_encodeBlockAsmAvx

four_bytes_match_emit_encodeBlockAsmAvx:
	MOVL R8, R9
	SHRL $0x10, R9
	MOVB $0xf8, (SI)
	MOVW R8, 1(SI)
	MOVB R9, 3(SI)
	ADDQ $0x04, SI
	JMP  memmove_match_emit_encodeBlockAsmAvx

three_bytes_match_emit_encodeBlockAsmAvx:
	MOVB $0xf4, (SI)
	MOVW R8, 1(SI)
	ADDQ $0x03, SI
	JMP  memmove_match_emit_encodeBlockAsmAvx

two_bytes_match_emit_encodeBlockAsmAvx:
	MOVB $0xf0, (SI)
	MOVB R8, 1(SI)
	ADDQ $0x02, SI
	JMP  memmove_match_emit_encodeBlockAsmAvx

one_byte_match_emit_encodeBlockAsmAvx:
	SHLB $0x02, R8
	MOVB R8, (SI)
	ADDQ $0x01, SI

memmove_match_emit_encodeBlockAsmAvx:
	LEAQ (SI)(DI*1), R8
	NOP

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_match_emit_encodeBlockAsmAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_1or2:
	MOVB (BP), R9
	MOVB -1(BP)(DI*1), R10
	MOVB R9, (SI)
	MOVB R10, -1(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_4:
	MOVL (BP), R9
	MOVL R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_3:
	MOVW (BP), R9
	MOVB 2(BP), R10
	MOVW R9, (SI)
	MOVB R10, 2(SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_5through7:
	MOVL (BP), R9
	MOVL -4(BP)(DI*1), R10
	MOVL R9, (SI)
	MOVL R10, -4(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_8:
	MOVQ (BP), R9
	MOVQ R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_9through16:
	MOVQ (BP), R9
	MOVQ -8(BP)(DI*1), R10
	MOVQ R9, (SI)
	MOVQ R10, -8(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_17through32:
	MOVOU (BP), X0
	MOVOU -16(BP)(DI*1), X1
	MOVOU X0, (SI)
	MOVOU X1, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_33through64:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU -32(BP)(DI*1), X2
	MOVOU -16(BP)(DI*1), X3
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, -32(SI)(DI*1)
	MOVOU X3, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_65through128:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_129through256:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU -128(BP)(DI*1), X8
	MOVOU -112(BP)(DI*1), X9
	MOVOU -96(BP)(DI*1), X10
	MOVOU -80(BP)(DI*1), X11
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, -128(SI)(DI*1)
	MOVOU X9, -112(SI)(DI*1)
	MOVOU X10, -96(SI)(DI*1)
	MOVOU X11, -80(SI)(DI*1)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU 128(BP), X8
	MOVOU 144(BP), X9
	MOVOU 160(BP), X10
	MOVOU 176(BP), X11
	MOVOU 192(BP), X12
	MOVOU 208(BP), X13
	MOVOU 224(BP), X14
	MOVOU 240(BP), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, 128(SI)
	MOVOU X9, 144(SI)
	MOVOU X10, 160(SI)
	MOVOU X11, 176(SI)
	MOVOU X12, 192(SI)
	MOVOU X13, 208(SI)
	MOVOU X14, 224(SI)
	MOVOU X15, 240(SI)
	CMPQ  DI, $0x00000100
	LEAQ  256(BP), BP
	LEAQ  256(SI), SI
	JGE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_avxUnaligned:
	LEAQ    (BP)(DI*1), R10
	MOVQ    SI, R12
	MOVOU   -128(R10), X5
	MOVOU   -112(R10), X6
	MOVQ    $0x00000080, R9
	ANDQ    $0xffffffe0, SI
	ADDQ    $0x20, SI
	MOVOU   -96(R10), X7
	MOVOU   -80(R10), X8
	MOVQ    SI, R11
	SUBQ    R12, R11
	MOVOU   -64(R10), X9
	MOVOU   -48(R10), X10
	SUBQ    R11, DI
	MOVOU   -32(R10), X11
	MOVOU   -16(R10), X12
	VMOVDQU (BP), Y4
	ADDQ    R11, BP
	SUBQ    R9, DI

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_gobble_128_loop:
	VMOVDQU (BP), Y0
	VMOVDQU 32(BP), Y1
	VMOVDQU 64(BP), Y2
	VMOVDQU 96(BP), Y3
	ADDQ    R9, BP
	VMOVDQA Y0, (SI)
	VMOVDQA Y1, 32(SI)
	VMOVDQA Y2, 64(SI)
	VMOVDQA Y3, 96(SI)
	ADDQ    R9, SI
	SUBQ    R9, DI
	JA      emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_gobble_128_loop
	ADDQ    R9, DI
	ADDQ    SI, DI
	VMOVDQU Y4, (R12)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)

memmove_end_copy_match_emit_encodeBlockAsmAvx:
	MOVQ R8, SI

emit_literal_done_match_emit_encodeBlockAsmAvx:
	MOVQ SI, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsmAvx:
match_nolit_loop_encodeBlockAsmAvx:
	MOVL AX, BP
	SUBL BX, BP
	MOVL BP, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, BX
	MOVL 16(SP), BP
	SUBL AX, BP
	LEAQ (CX)(AX*1), SI
	LEAQ (CX)(BX*1), BX
	XORL R8, R8
	CMPL BP, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsmAvx

matchlen_loopback_match_nolit_encodeBlockAsmAvx:
	MOVQ  (SI)(R8*1), DI
	XORQ  (BX)(R8*1), DI
	TESTQ DI, DI
	JZ    matchlen_loop_match_nolit_encodeBlockAsmAvx
	BSFQ  DI, DI
	SARQ  $0x03, DI
	LEAL  (R8)(DI*1), R8
	JMP   match_nolit_end_encodeBlockAsmAvx

matchlen_loop_match_nolit_encodeBlockAsmAvx:
	LEAL -8(BP), BP
	LEAL 8(R8), R8
	CMPL BP, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsmAvx

matchlen_single_match_nolit_encodeBlockAsmAvx:
	TESTL BP, BP
	JZ    match_nolit_end_encodeBlockAsmAvx

matchlen_single_loopback_match_nolit_encodeBlockAsmAvx:
	MOVB (SI)(R8*1), DI
	CMPB (BX)(R8*1), DI
	JNE  match_nolit_end_encodeBlockAsmAvx
	LEAL 1(R8), R8
	DECL BP
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsmAvx

match_nolit_end_encodeBlockAsmAvx:
	ADDL R8, AX
	MOVL 24(SP), BX
	ADDL $0x04, R8
	MOVQ dst_base+0(FP), BP
	CMPL BX, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsmAvx
	CMPL R8, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsmAvx
	MOVB $0xff, (BP)
	MOVL BX, 1(BP)
	LEAL -64(R8), R8
	ADDQ $0x05, BP
	CMPL R8, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsmAvx

emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

four_bytes_remain_match_nolit_encodeBlockAsmAvx:
	TESTL R8, R8
	JZ    match_nolit_emitcopy_end_encodeBlockAsmAvx
	MOVB  $0x03, DL
	LEAL  -4(DX)(R8*4), R8
	MOVB  R8, (BP)
	MOVL  BX, 1(BP)
	ADDQ  $0x05, BP
	JMP   match_nolit_emitcopy_end_encodeBlockAsmAvx

two_byte_offset_match_nolit_encodeBlockAsmAvx:
	CMPL R8, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsmAvx
	MOVB $0xee, (BP)
	MOVW BX, 1(BP)
	LEAL -60(R8), R8
	ADDQ $0x03, BP

emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy_short
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

two_byte_offset_short_match_nolit_encodeBlockAsmAvx:
	CMPL R8, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsmAvx
	CMPL BX, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsmAvx
	MOVB $0x01, DL
	LEAL -16(DX)(R8*4), R8
	MOVB BL, 1(BP)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

emit_copy_three_match_nolit_encodeBlockAsmAvx:
	MOVB $0x02, DL
	LEAL -4(DX)(R8*4), R8
	MOVB R8, (BP)
	MOVW BX, 1(BP)
	ADDQ $0x03, BP

match_nolit_emitcopy_end_encodeBlockAsmAvx:
	MOVQ BP, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsmAvx
	CMPQ BP, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsmAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsmAvx:
	MOVQ  -2(CX)(AX*1), BP
	MOVQ  $0x0000cf1bbcdcbf9b, BX
	MOVQ  BP, SI
	SHRQ  $0x10, BP
	MOVQ  BP, DI
	SHLQ  $0x10, SI
	IMULQ BX, SI
	SHRQ  $0x32, SI
	SHLQ  $0x10, DI
	IMULQ BX, DI
	SHRQ  $0x32, DI
	LEAL  -2(AX), R8
	MOVL  32(SP)(DI*4), BX
	MOVL  R8, 32(SP)(SI*4)
	MOVL  AX, 32(SP)(DI*4)
	CMPL  (CX)(BX*1), BP
	JEQ   match_nolit_loop_encodeBlockAsmAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsmAvx

emit_remainder_encodeBlockAsmAvx:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), DX
	LEAQ (DX)(AX*1), DX
	CMPQ DX, (SP)
	JL   emit_remainder_ok_encodeBlockAsmAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsmAvx:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsmAvx
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), AX
	SUBL DX, BX
	MOVQ dst_base+0(FP), CX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsmAvx
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsmAvx
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsmAvx
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsmAvx
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsmAvx
	MOVB $0xfc, (CX)
	MOVL DX, 1(CX)
	ADDQ $0x05, CX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

four_bytes_emit_remainder_encodeBlockAsmAvx:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (CX)
	MOVW DX, 1(CX)
	MOVB BP, 3(CX)
	ADDQ $0x04, CX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

three_bytes_emit_remainder_encodeBlockAsmAvx:
	MOVB $0xf4, (CX)
	MOVW DX, 1(CX)
	ADDQ $0x03, CX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

two_bytes_emit_remainder_encodeBlockAsmAvx:
	MOVB $0xf0, (CX)
	MOVB DL, 1(CX)
	ADDQ $0x02, CX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

one_byte_emit_remainder_encodeBlockAsmAvx:
	SHLB $0x02, DL
	MOVB DL, (CX)
	ADDQ $0x01, CX

memmove_emit_remainder_encodeBlockAsmAvx:
	LEAQ (CX)(BX*1), DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_tail:
	TESTQ BX, BX
	JEQ   memmove_end_copy_emit_remainder_encodeBlockAsmAvx
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_1or2:
	MOVB (AX), BP
	MOVB -1(AX)(BX*1), SI
	MOVB BP, (CX)
	MOVB SI, -1(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_4:
	MOVL (AX), BP
	MOVL BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_3:
	MOVW (AX), BP
	MOVB 2(AX), SI
	MOVW BP, (CX)
	MOVB SI, 2(CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_5through7:
	MOVL (AX), BP
	MOVL -4(AX)(BX*1), SI
	MOVL BP, (CX)
	MOVL SI, -4(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_8:
	MOVQ (AX), BP
	MOVQ BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_9through16:
	MOVQ (AX), BP
	MOVQ -8(AX)(BX*1), SI
	MOVQ BP, (CX)
	MOVQ SI, -8(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_17through32:
	MOVOU (AX), X0
	MOVOU -16(AX)(BX*1), X1
	MOVOU X0, (CX)
	MOVOU X1, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_33through64:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU -32(AX)(BX*1), X2
	MOVOU -16(AX)(BX*1), X3
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, -32(CX)(BX*1)
	MOVOU X3, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_65through128:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_129through256:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU -128(AX)(BX*1), X8
	MOVOU -112(AX)(BX*1), X9
	MOVOU -96(AX)(BX*1), X10
	MOVOU -80(AX)(BX*1), X11
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, -128(CX)(BX*1)
	MOVOU X9, -112(CX)(BX*1)
	MOVOU X10, -96(CX)(BX*1)
	MOVOU X11, -80(CX)(BX*1)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU 128(AX), X8
	MOVOU 144(AX), X9
	MOVOU 160(AX), X10
	MOVOU 176(AX), X11
	MOVOU 192(AX), X12
	MOVOU 208(AX), X13
	MOVOU 224(AX), X14
	MOVOU 240(AX), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, 128(CX)
	MOVOU X9, 144(CX)
	MOVOU X10, 160(CX)
	MOVOU X11, 176(CX)
	MOVOU X12, 192(CX)
	MOVOU X13, 208(CX)
	MOVOU X14, 224(CX)
	MOVOU X15, 240(CX)
	CMPQ  BX, $0x00000100
	LEAQ  256(AX), AX
	LEAQ  256(CX), CX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_avxUnaligned:
	LEAQ    (AX)(BX*1), SI
	MOVQ    CX, R8
	MOVOU   -128(SI), X5
	MOVOU   -112(SI), X6
	MOVQ    $0x00000080, BP
	ANDQ    $0xffffffe0, CX
	ADDQ    $0x20, CX
	MOVOU   -96(SI), X7
	MOVOU   -80(SI), X8
	MOVQ    CX, DI
	SUBQ    R8, DI
	MOVOU   -64(SI), X9
	MOVOU   -48(SI), X10
	SUBQ    DI, BX
	MOVOU   -32(SI), X11
	MOVOU   -16(SI), X12
	VMOVDQU (AX), Y4
	ADDQ    DI, AX
	SUBQ    BP, BX

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_gobble_128_loop:
	VMOVDQU (AX), Y0
	VMOVDQU 32(AX), Y1
	VMOVDQU 64(AX), Y2
	VMOVDQU 96(AX), Y3
	ADDQ    BP, AX
	VMOVDQA Y0, (CX)
	VMOVDQA Y1, 32(CX)
	VMOVDQA Y2, 64(CX)
	VMOVDQA Y3, 96(CX)
	ADDQ    BP, CX
	SUBQ    BP, BX
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_gobble_128_loop
	ADDQ    BP, BX
	ADDQ    CX, BX
	VMOVDQU Y4, (R8)
	VZEROUPPER
	MOVOU X5, -128(BX)
	MOVOU X6, -112(BX)
	MOVOU X7, -96(BX)
	MOVOU X8, -80(BX)
	MOVOU X9, -64(BX)
	MOVOU X10, -48(BX)
	MOVOU X11, -32(BX)
	MOVOU X12, -16(BX)

memmove_end_copy_emit_remainder_encodeBlockAsmAvx:
	MOVQ DX, CX

emit_literal_done_emit_remainder_encodeBlockAsmAvx:
	MOVQ CX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsmAvx:
	MOVQ dst_base+0(FP), AX
	SUBQ 8(SP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm12BAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsm12BAvx(SB), $16416-56
	MOVQ $0x00000080, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm12BAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm12BAvx
	MOVL  $0x00000000, 20(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  src_len+32(FP), CX
	LEAQ  -5(CX), BX
	LEAQ  -8(CX), BP
	MOVL  BP, 16(SP)
	SHRQ  $0x05, CX
	SUBL  CX, BX
	LEAQ  (AX)(BX*1), BX
	MOVQ  BX, (SP)
	MOVQ  AX, 8(SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm12BAvx:
	MOVQ  (CX)(AX*1), BP
	MOVL  AX, BX
	SUBL  20(SP), BX
	SHRL  $0x05, BX
	LEAL  4(AX)(BX*1), BX
	MOVL  16(SP), SI
	CMPL  BX, SI
	JGT   emit_remainder_encodeBlockAsm12BAvx
	MOVL  BX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, DI
	MOVQ  BP, R8
	MOVQ  BP, R9
	SHRQ  $0x08, R9
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x34, R8
	SHLQ  $0x10, R9
	IMULQ DI, R9
	SHRQ  $0x34, R9
	MOVL  32(SP)(R8*4), BX
	MOVL  32(SP)(R9*4), SI
	MOVL  AX, 32(SP)(R8*4)
	LEAL  1(AX), R8
	MOVL  R8, 32(SP)(R9*4)
	MOVQ  BP, R8
	SHRQ  $0x10, R8
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x34, R8
	MOVL  AX, DI
	SUBL  24(SP), DI
	MOVL  1(CX)(DI*1), R9
	MOVQ  BP, DI
	SHRQ  $0x08, DI
	CMPL  DI, R9
	JNE   no_repeat_found_encodeBlockAsm12BAvx
	LEAL  1(AX), BP
	MOVL  20(SP), SI
	MOVL  BP, BX
	SUBL  24(SP), BX
	JZ    repeat_extend_back_end_encodeBlockAsm12BAvx

repeat_extend_back_loop_encodeBlockAsm12BAvx:
	CMPL BP, SI
	JLE  repeat_extend_back_end_encodeBlockAsm12BAvx
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(BP*1), DI
	CMPB DL, DI
	JNE  repeat_extend_back_end_encodeBlockAsm12BAvx
	LEAL -1(BP), BP
	DECL BX
	JNZ  repeat_extend_back_loop_encodeBlockAsm12BAvx

repeat_extend_back_end_encodeBlockAsm12BAvx:
	MOVL 20(SP), BX
	CMPL BX, BP
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm12BAvx
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(BX*1), R8
	SUBL BX, DI
	MOVQ dst_base+0(FP), BX
	MOVL DI, R9
	SUBL $0x01, R9
	JC   emit_literal_done_repeat_emit_encodeBlockAsm12BAvx
	CMPL R9, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm12BAvx
	CMPL R9, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm12BAvx
	CMPL R9, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm12BAvx
	CMPL R9, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm12BAvx
	MOVB $0xfc, (BX)
	MOVL R9, 1(BX)
	ADDQ $0x05, BX
	JMP  memmove_repeat_emit_encodeBlockAsm12BAvx

four_bytes_repeat_emit_encodeBlockAsm12BAvx:
	MOVL R9, R10
	SHRL $0x10, R10
	MOVB $0xf8, (BX)
	MOVW R9, 1(BX)
	MOVB R10, 3(BX)
	ADDQ $0x04, BX
	JMP  memmove_repeat_emit_encodeBlockAsm12BAvx

three_bytes_repeat_emit_encodeBlockAsm12BAvx:
	MOVB $0xf4, (BX)
	MOVW R9, 1(BX)
	ADDQ $0x03, BX
	JMP  memmove_repeat_emit_encodeBlockAsm12BAvx

two_bytes_repeat_emit_encodeBlockAsm12BAvx:
	MOVB $0xf0, (BX)
	MOVB R9, 1(BX)
	ADDQ $0x02, BX
	JMP  memmove_repeat_emit_encodeBlockAsm12BAvx

one_byte_repeat_emit_encodeBlockAsm12BAvx:
	SHLB $0x02, R9
	MOVB R9, (BX)
	ADDQ $0x01, BX

memmove_repeat_emit_encodeBlockAsm12BAvx:
	LEAQ (BX)(DI*1), R9
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_1or2:
	MOVB (R8), R10
	MOVB -1(R8)(DI*1), R11
	MOVB R10, (BX)
	MOVB R11, -1(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_4:
	MOVL (R8), R10
	MOVL R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_3:
	MOVW (R8), R10
	MOVB 2(R8), R11
	MOVW R10, (BX)
	MOVB R11, 2(BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_5through7:
	MOVL (R8), R10
	MOVL -4(R8)(DI*1), R11
	MOVL R10, (BX)
	MOVL R11, -4(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_8:
	MOVQ (R8), R10
	MOVQ R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_9through16:
	MOVQ (R8), R10
	MOVQ -8(R8)(DI*1), R11
	MOVQ R10, (BX)
	MOVQ R11, -8(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_17through32:
	MOVOU (R8), X0
	MOVOU -16(R8)(DI*1), X1
	MOVOU X0, (BX)
	MOVOU X1, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_33through64:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU -32(R8)(DI*1), X2
	MOVOU -16(R8)(DI*1), X3
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, -32(BX)(DI*1)
	MOVOU X3, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_65through128:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_129through256:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU -128(R8)(DI*1), X8
	MOVOU -112(R8)(DI*1), X9
	MOVOU -96(R8)(DI*1), X10
	MOVOU -80(R8)(DI*1), X11
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, -128(BX)(DI*1)
	MOVOU X9, -112(BX)(DI*1)
	MOVOU X10, -96(BX)(DI*1)
	MOVOU X11, -80(BX)(DI*1)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU 128(R8), X8
	MOVOU 144(R8), X9
	MOVOU 160(R8), X10
	MOVOU 176(R8), X11
	MOVOU 192(R8), X12
	MOVOU 208(R8), X13
	MOVOU 224(R8), X14
	MOVOU 240(R8), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, 128(BX)
	MOVOU X9, 144(BX)
	MOVOU X10, 160(BX)
	MOVOU X11, 176(BX)
	MOVOU X12, 192(BX)
	MOVOU X13, 208(BX)
	MOVOU X14, 224(BX)
	MOVOU X15, 240(BX)
	CMPQ  DI, $0x00000100
	LEAQ  256(R8), R8
	LEAQ  256(BX), BX
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_tail

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned:
	LEAQ    (R8)(DI*1), R11
	MOVQ    BX, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, BX
	ADDQ    $0x20, BX
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    BX, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, DI
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R8), Y4
	ADDQ    R12, R8
	SUBQ    R10, DI

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop:
	VMOVDQU (R8), Y0
	VMOVDQU 32(R8), Y1
	VMOVDQU 64(R8), Y2
	VMOVDQU 96(R8), Y3
	ADDQ    R10, R8
	VMOVDQA Y0, (BX)
	VMOVDQA Y1, 32(BX)
	VMOVDQA Y2, 64(BX)
	VMOVDQA Y3, 96(BX)
	ADDQ    R10, BX
	SUBQ    R10, DI
	JA      emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop
	ADDQ    R10, DI
	ADDQ    BX, DI
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)

memmove_end_copy_repeat_emit_encodeBlockAsm12BAvx:
	MOVQ R9, BX

emit_literal_done_repeat_emit_encodeBlockAsm12BAvx:
	MOVQ BX, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm12BAvx:
	ADDL $0x05, AX
	MOVL AX, BX
	SUBL 24(SP), BX
	MOVL 16(SP), DI
	SUBL AX, DI
	LEAQ (CX)(AX*1), R8
	LEAQ (CX)(BX*1), BX
	XORL R10, R10
	CMPL DI, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (R8)(R10*1), R9
	XORQ  (BX)(R10*1), R9
	TESTQ R9, R9
	JZ    matchlen_loop_repeat_extend
	BSFQ  R9, R9
	SARQ  $0x03, R9
	LEAL  (R10)(R9*1), R10
	JMP   repeat_extend_forward_end_encodeBlockAsm12BAvx

matchlen_loop_repeat_extend:
	LEAL -8(DI), DI
	LEAL 8(R10), R10
	CMPL DI, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DI, DI
	JZ    repeat_extend_forward_end_encodeBlockAsm12BAvx

matchlen_single_loopback_repeat_extend:
	MOVB (R8)(R10*1), R9
	CMPB (BX)(R10*1), R9
	JNE  repeat_extend_forward_end_encodeBlockAsm12BAvx
	LEAL 1(R10), R10
	DECL DI
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm12BAvx:
	ADDL  R10, AX
	MOVL  AX, BX
	SUBL  BP, BX
	MOVL  24(SP), BP
	MOVQ  dst_base+0(FP), DI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm12BAvx

emit_repeat_again_match_repeat_encodeBlockAsm12BAvx:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_encodeBlockAsm12BAvx
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_encodeBlockAsm12BAvx
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_match_repeat_encodeBlockAsm12BAvx

cant_repeat_two_offset_match_repeat_encodeBlockAsm12BAvx:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_repeat_encodeBlockAsm12BAvx
	CMPL BX, $0x00010100
	JLT  repeat_four_match_repeat_encodeBlockAsm12BAvx
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_repeat_encodeBlockAsm12BAvx
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_match_repeat_encodeBlockAsm12BAvx

repeat_five_match_repeat_encodeBlockAsm12BAvx:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_four_match_repeat_encodeBlockAsm12BAvx:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_three_match_repeat_encodeBlockAsm12BAvx:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_match_repeat_encodeBlockAsm12BAvx:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_offset_match_repeat_encodeBlockAsm12BAvx:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_as_copy_encodeBlockAsm12BAvx:
	CMPL BP, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm12BAvx
	CMPL BX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm12BAvx
	MOVB $0xff, (DI)
	MOVL BP, 1(DI)
	LEAL -64(BX), BX
	ADDQ $0x05, DI
	CMPL BX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm12BAvx

emit_repeat_again_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_four_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_three_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

four_bytes_remain_repeat_as_copy_encodeBlockAsm12BAvx:
	TESTL BX, BX
	JZ    repeat_end_emit_encodeBlockAsm12BAvx
	MOVB  $0x03, DL
	LEAL  -4(DX)(BX*4), BX
	MOVB  BL, (DI)
	MOVL  BP, 1(DI)
	ADDQ  $0x05, DI
	JMP   repeat_end_emit_encodeBlockAsm12BAvx

two_byte_offset_repeat_as_copy_encodeBlockAsm12BAvx:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm12BAvx
	MOVB $0xee, (DI)
	MOVW BP, 1(DI)
	LEAL -60(BX), BX
	ADDQ $0x03, DI

emit_repeat_again_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_four_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_three_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

two_byte_offset_short_repeat_as_copy_encodeBlockAsm12BAvx:
	CMPL BX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm12BAvx
	CMPL BP, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm12BAvx
	MOVB $0x01, DL
	LEAL -16(DX)(BX*4), BX
	MOVB BP, 1(DI)
	SHRL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

emit_copy_three_repeat_as_copy_encodeBlockAsm12BAvx:
	MOVB $0x02, DL
	LEAL -4(DX)(BX*4), BX
	MOVB BL, (DI)
	MOVW BP, 1(DI)
	ADDQ $0x03, DI

repeat_end_emit_encodeBlockAsm12BAvx:
	MOVL AX, 20(SP)
	MOVQ DI, dst_base+0(FP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm12BAvx
	JMP  search_loop_encodeBlockAsm12BAvx

no_repeat_found_encodeBlockAsm12BAvx:
	CMPL (CX)(BX*1), BP
	JEQ  candidate_match_encodeBlockAsm12BAvx
	SHRQ $0x08, BP
	MOVL 32(SP)(R8*4), BX
	LEAL 2(AX), DI
	CMPL (CX)(SI*1), BP
	JEQ  candidate2_match_encodeBlockAsm12BAvx
	MOVL DI, 32(SP)(R8*4)
	SHRQ $0x08, BP
	CMPL (CX)(BX*1), BP
	JEQ  candidate3_match_encodeBlockAsm12BAvx
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm12BAvx

candidate3_match_encodeBlockAsm12BAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm12BAvx

candidate2_match_encodeBlockAsm12BAvx:
	MOVL DI, 32(SP)(R8*4)
	INCL AX
	MOVL SI, BX

candidate_match_encodeBlockAsm12BAvx:
	MOVL  20(SP), BP
	TESTL BX, BX
	JZ    match_extend_back_end_encodeBlockAsm12BAvx

match_extend_back_loop_encodeBlockAsm12BAvx:
	CMPL AX, BP
	JLE  match_extend_back_end_encodeBlockAsm12BAvx
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(AX*1), SI
	CMPB DL, SI
	JNE  match_extend_back_end_encodeBlockAsm12BAvx
	LEAL -1(AX), AX
	DECL BX
	JZ   match_extend_back_end_encodeBlockAsm12BAvx
	JMP  match_extend_back_loop_encodeBlockAsm12BAvx

match_extend_back_end_encodeBlockAsm12BAvx:
	MOVQ dst_base+0(FP), BP
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ (BP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm12BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm12BAvx:
	MOVL AX, BP
	MOVL 20(SP), SI
	CMPL SI, BP
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm12BAvx
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(SI*1), BP
	SUBL SI, DI
	MOVQ dst_base+0(FP), SI
	MOVL DI, R8
	SUBL $0x01, R8
	JC   emit_literal_done_match_emit_encodeBlockAsm12BAvx
	CMPL R8, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm12BAvx
	CMPL R8, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm12BAvx
	CMPL R8, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm12BAvx
	CMPL R8, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm12BAvx
	MOVB $0xfc, (SI)
	MOVL R8, 1(SI)
	ADDQ $0x05, SI
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

four_bytes_match_emit_encodeBlockAsm12BAvx:
	MOVL R8, R9
	SHRL $0x10, R9
	MOVB $0xf8, (SI)
	MOVW R8, 1(SI)
	MOVB R9, 3(SI)
	ADDQ $0x04, SI
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

three_bytes_match_emit_encodeBlockAsm12BAvx:
	MOVB $0xf4, (SI)
	MOVW R8, 1(SI)
	ADDQ $0x03, SI
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

two_bytes_match_emit_encodeBlockAsm12BAvx:
	MOVB $0xf0, (SI)
	MOVB R8, 1(SI)
	ADDQ $0x02, SI
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

one_byte_match_emit_encodeBlockAsm12BAvx:
	SHLB $0x02, R8
	MOVB R8, (SI)
	ADDQ $0x01, SI

memmove_match_emit_encodeBlockAsm12BAvx:
	LEAQ (SI)(DI*1), R8
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_match_emit_encodeBlockAsm12BAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_1or2:
	MOVB (BP), R9
	MOVB -1(BP)(DI*1), R10
	MOVB R9, (SI)
	MOVB R10, -1(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_4:
	MOVL (BP), R9
	MOVL R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_3:
	MOVW (BP), R9
	MOVB 2(BP), R10
	MOVW R9, (SI)
	MOVB R10, 2(SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_5through7:
	MOVL (BP), R9
	MOVL -4(BP)(DI*1), R10
	MOVL R9, (SI)
	MOVL R10, -4(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_8:
	MOVQ (BP), R9
	MOVQ R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_9through16:
	MOVQ (BP), R9
	MOVQ -8(BP)(DI*1), R10
	MOVQ R9, (SI)
	MOVQ R10, -8(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_17through32:
	MOVOU (BP), X0
	MOVOU -16(BP)(DI*1), X1
	MOVOU X0, (SI)
	MOVOU X1, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_33through64:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU -32(BP)(DI*1), X2
	MOVOU -16(BP)(DI*1), X3
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, -32(SI)(DI*1)
	MOVOU X3, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_65through128:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_129through256:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU -128(BP)(DI*1), X8
	MOVOU -112(BP)(DI*1), X9
	MOVOU -96(BP)(DI*1), X10
	MOVOU -80(BP)(DI*1), X11
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, -128(SI)(DI*1)
	MOVOU X9, -112(SI)(DI*1)
	MOVOU X10, -96(SI)(DI*1)
	MOVOU X11, -80(SI)(DI*1)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU 128(BP), X8
	MOVOU 144(BP), X9
	MOVOU 160(BP), X10
	MOVOU 176(BP), X11
	MOVOU 192(BP), X12
	MOVOU 208(BP), X13
	MOVOU 224(BP), X14
	MOVOU 240(BP), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, 128(SI)
	MOVOU X9, 144(SI)
	MOVOU X10, 160(SI)
	MOVOU X11, 176(SI)
	MOVOU X12, 192(SI)
	MOVOU X13, 208(SI)
	MOVOU X14, 224(SI)
	MOVOU X15, 240(SI)
	CMPQ  DI, $0x00000100
	LEAQ  256(BP), BP
	LEAQ  256(SI), SI
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned:
	LEAQ    (BP)(DI*1), R10
	MOVQ    SI, R12
	MOVOU   -128(R10), X5
	MOVOU   -112(R10), X6
	MOVQ    $0x00000080, R9
	ANDQ    $0xffffffe0, SI
	ADDQ    $0x20, SI
	MOVOU   -96(R10), X7
	MOVOU   -80(R10), X8
	MOVQ    SI, R11
	SUBQ    R12, R11
	MOVOU   -64(R10), X9
	MOVOU   -48(R10), X10
	SUBQ    R11, DI
	MOVOU   -32(R10), X11
	MOVOU   -16(R10), X12
	VMOVDQU (BP), Y4
	ADDQ    R11, BP
	SUBQ    R9, DI

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop:
	VMOVDQU (BP), Y0
	VMOVDQU 32(BP), Y1
	VMOVDQU 64(BP), Y2
	VMOVDQU 96(BP), Y3
	ADDQ    R9, BP
	VMOVDQA Y0, (SI)
	VMOVDQA Y1, 32(SI)
	VMOVDQA Y2, 64(SI)
	VMOVDQA Y3, 96(SI)
	ADDQ    R9, SI
	SUBQ    R9, DI
	JA      emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop
	ADDQ    R9, DI
	ADDQ    SI, DI
	VMOVDQU Y4, (R12)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)

memmove_end_copy_match_emit_encodeBlockAsm12BAvx:
	MOVQ R8, SI

emit_literal_done_match_emit_encodeBlockAsm12BAvx:
	MOVQ SI, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm12BAvx:
match_nolit_loop_encodeBlockAsm12BAvx:
	MOVL AX, BP
	SUBL BX, BP
	MOVL BP, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, BX
	MOVL 16(SP), BP
	SUBL AX, BP
	LEAQ (CX)(AX*1), SI
	LEAQ (CX)(BX*1), BX
	XORL R8, R8
	CMPL BP, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm12BAvx

matchlen_loopback_match_nolit_encodeBlockAsm12BAvx:
	MOVQ  (SI)(R8*1), DI
	XORQ  (BX)(R8*1), DI
	TESTQ DI, DI
	JZ    matchlen_loop_match_nolit_encodeBlockAsm12BAvx
	BSFQ  DI, DI
	SARQ  $0x03, DI
	LEAL  (R8)(DI*1), R8
	JMP   match_nolit_end_encodeBlockAsm12BAvx

matchlen_loop_match_nolit_encodeBlockAsm12BAvx:
	LEAL -8(BP), BP
	LEAL 8(R8), R8
	CMPL BP, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm12BAvx

matchlen_single_match_nolit_encodeBlockAsm12BAvx:
	TESTL BP, BP
	JZ    match_nolit_end_encodeBlockAsm12BAvx

matchlen_single_loopback_match_nolit_encodeBlockAsm12BAvx:
	MOVB (SI)(R8*1), DI
	CMPB (BX)(R8*1), DI
	JNE  match_nolit_end_encodeBlockAsm12BAvx
	LEAL 1(R8), R8
	DECL BP
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm12BAvx

match_nolit_end_encodeBlockAsm12BAvx:
	ADDL R8, AX
	MOVL 24(SP), BX
	ADDL $0x04, R8
	MOVQ dst_base+0(FP), BP
	CMPL BX, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm12BAvx
	CMPL R8, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm12BAvx
	MOVB $0xff, (BP)
	MOVL BX, 1(BP)
	LEAL -64(R8), R8
	ADDQ $0x05, BP
	CMPL R8, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm12BAvx

emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

four_bytes_remain_match_nolit_encodeBlockAsm12BAvx:
	TESTL R8, R8
	JZ    match_nolit_emitcopy_end_encodeBlockAsm12BAvx
	MOVB  $0x03, DL
	LEAL  -4(DX)(R8*4), R8
	MOVB  R8, (BP)
	MOVL  BX, 1(BP)
	ADDQ  $0x05, BP
	JMP   match_nolit_emitcopy_end_encodeBlockAsm12BAvx

two_byte_offset_match_nolit_encodeBlockAsm12BAvx:
	CMPL R8, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm12BAvx
	MOVB $0xee, (BP)
	MOVW BX, 1(BP)
	LEAL -60(R8), R8
	ADDQ $0x03, BP

emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

two_byte_offset_short_match_nolit_encodeBlockAsm12BAvx:
	CMPL R8, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12BAvx
	CMPL BX, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12BAvx
	MOVB $0x01, DL
	LEAL -16(DX)(R8*4), R8
	MOVB BL, 1(BP)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

emit_copy_three_match_nolit_encodeBlockAsm12BAvx:
	MOVB $0x02, DL
	LEAL -4(DX)(R8*4), R8
	MOVB R8, (BP)
	MOVW BX, 1(BP)
	ADDQ $0x03, BP

match_nolit_emitcopy_end_encodeBlockAsm12BAvx:
	MOVQ BP, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm12BAvx
	CMPQ BP, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm12BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm12BAvx:
	MOVQ  -2(CX)(AX*1), BP
	MOVQ  $0x0000cf1bbcdcbf9b, BX
	MOVQ  BP, SI
	SHRQ  $0x10, BP
	MOVQ  BP, DI
	SHLQ  $0x10, SI
	IMULQ BX, SI
	SHRQ  $0x34, SI
	SHLQ  $0x10, DI
	IMULQ BX, DI
	SHRQ  $0x34, DI
	LEAL  -2(AX), R8
	MOVL  32(SP)(DI*4), BX
	MOVL  R8, 32(SP)(SI*4)
	MOVL  AX, 32(SP)(DI*4)
	CMPL  (CX)(BX*1), BP
	JEQ   match_nolit_loop_encodeBlockAsm12BAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsm12BAvx

emit_remainder_encodeBlockAsm12BAvx:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), DX
	LEAQ (DX)(AX*1), DX
	CMPQ DX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm12BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm12BAvx:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm12BAvx
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), AX
	SUBL DX, BX
	MOVQ dst_base+0(FP), CX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm12BAvx
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm12BAvx
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm12BAvx
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm12BAvx
	MOVB $0xfc, (CX)
	MOVL DX, 1(CX)
	ADDQ $0x05, CX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

four_bytes_emit_remainder_encodeBlockAsm12BAvx:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (CX)
	MOVW DX, 1(CX)
	MOVB BP, 3(CX)
	ADDQ $0x04, CX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

three_bytes_emit_remainder_encodeBlockAsm12BAvx:
	MOVB $0xf4, (CX)
	MOVW DX, 1(CX)
	ADDQ $0x03, CX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

two_bytes_emit_remainder_encodeBlockAsm12BAvx:
	MOVB $0xf0, (CX)
	MOVB DL, 1(CX)
	ADDQ $0x02, CX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

one_byte_emit_remainder_encodeBlockAsm12BAvx:
	SHLB $0x02, DL
	MOVB DL, (CX)
	ADDQ $0x01, CX

memmove_emit_remainder_encodeBlockAsm12BAvx:
	LEAQ (CX)(BX*1), DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_tail:
	TESTQ BX, BX
	JEQ   memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_1or2:
	MOVB (AX), BP
	MOVB -1(AX)(BX*1), SI
	MOVB BP, (CX)
	MOVB SI, -1(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_4:
	MOVL (AX), BP
	MOVL BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_3:
	MOVW (AX), BP
	MOVB 2(AX), SI
	MOVW BP, (CX)
	MOVB SI, 2(CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_5through7:
	MOVL (AX), BP
	MOVL -4(AX)(BX*1), SI
	MOVL BP, (CX)
	MOVL SI, -4(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_8:
	MOVQ (AX), BP
	MOVQ BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_9through16:
	MOVQ (AX), BP
	MOVQ -8(AX)(BX*1), SI
	MOVQ BP, (CX)
	MOVQ SI, -8(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_17through32:
	MOVOU (AX), X0
	MOVOU -16(AX)(BX*1), X1
	MOVOU X0, (CX)
	MOVOU X1, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_33through64:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU -32(AX)(BX*1), X2
	MOVOU -16(AX)(BX*1), X3
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, -32(CX)(BX*1)
	MOVOU X3, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_65through128:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_129through256:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU -128(AX)(BX*1), X8
	MOVOU -112(AX)(BX*1), X9
	MOVOU -96(AX)(BX*1), X10
	MOVOU -80(AX)(BX*1), X11
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, -128(CX)(BX*1)
	MOVOU X9, -112(CX)(BX*1)
	MOVOU X10, -96(CX)(BX*1)
	MOVOU X11, -80(CX)(BX*1)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU 128(AX), X8
	MOVOU 144(AX), X9
	MOVOU 160(AX), X10
	MOVOU 176(AX), X11
	MOVOU 192(AX), X12
	MOVOU 208(AX), X13
	MOVOU 224(AX), X14
	MOVOU 240(AX), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, 128(CX)
	MOVOU X9, 144(CX)
	MOVOU X10, 160(CX)
	MOVOU X11, 176(CX)
	MOVOU X12, 192(CX)
	MOVOU X13, 208(CX)
	MOVOU X14, 224(CX)
	MOVOU X15, 240(CX)
	CMPQ  BX, $0x00000100
	LEAQ  256(AX), AX
	LEAQ  256(CX), CX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_avxUnaligned:
	LEAQ    (AX)(BX*1), SI
	MOVQ    CX, R8
	MOVOU   -128(SI), X5
	MOVOU   -112(SI), X6
	MOVQ    $0x00000080, BP
	ANDQ    $0xffffffe0, CX
	ADDQ    $0x20, CX
	MOVOU   -96(SI), X7
	MOVOU   -80(SI), X8
	MOVQ    CX, DI
	SUBQ    R8, DI
	MOVOU   -64(SI), X9
	MOVOU   -48(SI), X10
	SUBQ    DI, BX
	MOVOU   -32(SI), X11
	MOVOU   -16(SI), X12
	VMOVDQU (AX), Y4
	ADDQ    DI, AX
	SUBQ    BP, BX

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_gobble_128_loop:
	VMOVDQU (AX), Y0
	VMOVDQU 32(AX), Y1
	VMOVDQU 64(AX), Y2
	VMOVDQU 96(AX), Y3
	ADDQ    BP, AX
	VMOVDQA Y0, (CX)
	VMOVDQA Y1, 32(CX)
	VMOVDQA Y2, 64(CX)
	VMOVDQA Y3, 96(CX)
	ADDQ    BP, CX
	SUBQ    BP, BX
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_gobble_128_loop
	ADDQ    BP, BX
	ADDQ    CX, BX
	VMOVDQU Y4, (R8)
	VZEROUPPER
	MOVOU X5, -128(BX)
	MOVOU X6, -112(BX)
	MOVOU X7, -96(BX)
	MOVOU X8, -80(BX)
	MOVOU X9, -64(BX)
	MOVOU X10, -48(BX)
	MOVOU X11, -32(BX)
	MOVOU X12, -16(BX)

memmove_end_copy_emit_remainder_encodeBlockAsm12BAvx:
	MOVQ DX, CX

emit_literal_done_emit_remainder_encodeBlockAsm12BAvx:
	MOVQ CX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm12BAvx:
	MOVQ dst_base+0(FP), AX
	SUBQ 8(SP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm10BAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsm10BAvx(SB), $4128-56
	MOVQ $0x00000020, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm10BAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm10BAvx
	MOVL  $0x00000000, 20(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  src_len+32(FP), CX
	LEAQ  -5(CX), BX
	LEAQ  -8(CX), BP
	MOVL  BP, 16(SP)
	SHRQ  $0x05, CX
	SUBL  CX, BX
	LEAQ  (AX)(BX*1), BX
	MOVQ  BX, (SP)
	MOVQ  AX, 8(SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm10BAvx:
	MOVQ  (CX)(AX*1), BP
	MOVL  AX, BX
	SUBL  20(SP), BX
	SHRL  $0x04, BX
	LEAL  4(AX)(BX*1), BX
	MOVL  16(SP), SI
	CMPL  BX, SI
	JGT   emit_remainder_encodeBlockAsm10BAvx
	MOVL  BX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, DI
	MOVQ  BP, R8
	MOVQ  BP, R9
	SHRQ  $0x08, R9
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x36, R8
	SHLQ  $0x10, R9
	IMULQ DI, R9
	SHRQ  $0x36, R9
	MOVL  32(SP)(R8*4), BX
	MOVL  32(SP)(R9*4), SI
	MOVL  AX, 32(SP)(R8*4)
	LEAL  1(AX), R8
	MOVL  R8, 32(SP)(R9*4)
	MOVQ  BP, R8
	SHRQ  $0x10, R8
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x36, R8
	MOVL  AX, DI
	SUBL  24(SP), DI
	MOVL  1(CX)(DI*1), R9
	MOVQ  BP, DI
	SHRQ  $0x08, DI
	CMPL  DI, R9
	JNE   no_repeat_found_encodeBlockAsm10BAvx
	LEAL  1(AX), BP
	MOVL  20(SP), SI
	MOVL  BP, BX
	SUBL  24(SP), BX
	JZ    repeat_extend_back_end_encodeBlockAsm10BAvx

repeat_extend_back_loop_encodeBlockAsm10BAvx:
	CMPL BP, SI
	JLE  repeat_extend_back_end_encodeBlockAsm10BAvx
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(BP*1), DI
	CMPB DL, DI
	JNE  repeat_extend_back_end_encodeBlockAsm10BAvx
	LEAL -1(BP), BP
	DECL BX
	JNZ  repeat_extend_back_loop_encodeBlockAsm10BAvx

repeat_extend_back_end_encodeBlockAsm10BAvx:
	MOVL 20(SP), BX
	CMPL BX, BP
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm10BAvx
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(BX*1), R8
	SUBL BX, DI
	MOVQ dst_base+0(FP), BX
	MOVL DI, R9
	SUBL $0x01, R9
	JC   emit_literal_done_repeat_emit_encodeBlockAsm10BAvx
	CMPL R9, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm10BAvx
	CMPL R9, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm10BAvx
	CMPL R9, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm10BAvx
	CMPL R9, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm10BAvx
	MOVB $0xfc, (BX)
	MOVL R9, 1(BX)
	ADDQ $0x05, BX
	JMP  memmove_repeat_emit_encodeBlockAsm10BAvx

four_bytes_repeat_emit_encodeBlockAsm10BAvx:
	MOVL R9, R10
	SHRL $0x10, R10
	MOVB $0xf8, (BX)
	MOVW R9, 1(BX)
	MOVB R10, 3(BX)
	ADDQ $0x04, BX
	JMP  memmove_repeat_emit_encodeBlockAsm10BAvx

three_bytes_repeat_emit_encodeBlockAsm10BAvx:
	MOVB $0xf4, (BX)
	MOVW R9, 1(BX)
	ADDQ $0x03, BX
	JMP  memmove_repeat_emit_encodeBlockAsm10BAvx

two_bytes_repeat_emit_encodeBlockAsm10BAvx:
	MOVB $0xf0, (BX)
	MOVB R9, 1(BX)
	ADDQ $0x02, BX
	JMP  memmove_repeat_emit_encodeBlockAsm10BAvx

one_byte_repeat_emit_encodeBlockAsm10BAvx:
	SHLB $0x02, R9
	MOVB R9, (BX)
	ADDQ $0x01, BX

memmove_repeat_emit_encodeBlockAsm10BAvx:
	LEAQ (BX)(DI*1), R9
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_avxUnaligned

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_1or2:
	MOVB (R8), R10
	MOVB -1(R8)(DI*1), R11
	MOVB R10, (BX)
	MOVB R11, -1(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_4:
	MOVL (R8), R10
	MOVL R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_3:
	MOVW (R8), R10
	MOVB 2(R8), R11
	MOVW R10, (BX)
	MOVB R11, 2(BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_5through7:
	MOVL (R8), R10
	MOVL -4(R8)(DI*1), R11
	MOVL R10, (BX)
	MOVL R11, -4(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_8:
	MOVQ (R8), R10
	MOVQ R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_9through16:
	MOVQ (R8), R10
	MOVQ -8(R8)(DI*1), R11
	MOVQ R10, (BX)
	MOVQ R11, -8(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_17through32:
	MOVOU (R8), X0
	MOVOU -16(R8)(DI*1), X1
	MOVOU X0, (BX)
	MOVOU X1, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_33through64:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU -32(R8)(DI*1), X2
	MOVOU -16(R8)(DI*1), X3
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, -32(BX)(DI*1)
	MOVOU X3, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_65through128:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_129through256:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU -128(R8)(DI*1), X8
	MOVOU -112(R8)(DI*1), X9
	MOVOU -96(R8)(DI*1), X10
	MOVOU -80(R8)(DI*1), X11
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, -128(BX)(DI*1)
	MOVOU X9, -112(BX)(DI*1)
	MOVOU X10, -96(BX)(DI*1)
	MOVOU X11, -80(BX)(DI*1)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU 128(R8), X8
	MOVOU 144(R8), X9
	MOVOU 160(R8), X10
	MOVOU 176(R8), X11
	MOVOU 192(R8), X12
	MOVOU 208(R8), X13
	MOVOU 224(R8), X14
	MOVOU 240(R8), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, 128(BX)
	MOVOU X9, 144(BX)
	MOVOU X10, 160(BX)
	MOVOU X11, 176(BX)
	MOVOU X12, 192(BX)
	MOVOU X13, 208(BX)
	MOVOU X14, 224(BX)
	MOVOU X15, 240(BX)
	CMPQ  DI, $0x00000100
	LEAQ  256(R8), R8
	LEAQ  256(BX), BX
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_tail

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_avxUnaligned:
	LEAQ    (R8)(DI*1), R11
	MOVQ    BX, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, BX
	ADDQ    $0x20, BX
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    BX, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, DI
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R8), Y4
	ADDQ    R12, R8
	SUBQ    R10, DI

emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_gobble_128_loop:
	VMOVDQU (R8), Y0
	VMOVDQU 32(R8), Y1
	VMOVDQU 64(R8), Y2
	VMOVDQU 96(R8), Y3
	ADDQ    R10, R8
	VMOVDQA Y0, (BX)
	VMOVDQA Y1, 32(BX)
	VMOVDQA Y2, 64(BX)
	VMOVDQA Y3, 96(BX)
	ADDQ    R10, BX
	SUBQ    R10, DI
	JA      emit_lit_memmove_repeat_emit_encodeBlockAsm10BAvx_memmove_gobble_128_loop
	ADDQ    R10, DI
	ADDQ    BX, DI
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)

memmove_end_copy_repeat_emit_encodeBlockAsm10BAvx:
	MOVQ R9, BX

emit_literal_done_repeat_emit_encodeBlockAsm10BAvx:
	MOVQ BX, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm10BAvx:
	ADDL $0x05, AX
	MOVL AX, BX
	SUBL 24(SP), BX
	MOVL 16(SP), DI
	SUBL AX, DI
	LEAQ (CX)(AX*1), R8
	LEAQ (CX)(BX*1), BX
	XORL R10, R10
	CMPL DI, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (R8)(R10*1), R9
	XORQ  (BX)(R10*1), R9
	TESTQ R9, R9
	JZ    matchlen_loop_repeat_extend
	BSFQ  R9, R9
	SARQ  $0x03, R9
	LEAL  (R10)(R9*1), R10
	JMP   repeat_extend_forward_end_encodeBlockAsm10BAvx

matchlen_loop_repeat_extend:
	LEAL -8(DI), DI
	LEAL 8(R10), R10
	CMPL DI, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DI, DI
	JZ    repeat_extend_forward_end_encodeBlockAsm10BAvx

matchlen_single_loopback_repeat_extend:
	MOVB (R8)(R10*1), R9
	CMPB (BX)(R10*1), R9
	JNE  repeat_extend_forward_end_encodeBlockAsm10BAvx
	LEAL 1(R10), R10
	DECL DI
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm10BAvx:
	ADDL  R10, AX
	MOVL  AX, BX
	SUBL  BP, BX
	MOVL  24(SP), BP
	MOVQ  dst_base+0(FP), DI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm10BAvx

emit_repeat_again_match_repeat_encodeBlockAsm10BAvx:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_encodeBlockAsm10BAvx
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_encodeBlockAsm10BAvx
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_match_repeat_encodeBlockAsm10BAvx

cant_repeat_two_offset_match_repeat_encodeBlockAsm10BAvx:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_repeat_encodeBlockAsm10BAvx
	CMPL BX, $0x00010100
	JLT  repeat_four_match_repeat_encodeBlockAsm10BAvx
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_repeat_encodeBlockAsm10BAvx
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_match_repeat_encodeBlockAsm10BAvx

repeat_five_match_repeat_encodeBlockAsm10BAvx:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_four_match_repeat_encodeBlockAsm10BAvx:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_three_match_repeat_encodeBlockAsm10BAvx:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_two_match_repeat_encodeBlockAsm10BAvx:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_two_offset_match_repeat_encodeBlockAsm10BAvx:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_as_copy_encodeBlockAsm10BAvx:
	CMPL BP, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm10BAvx
	CMPL BX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm10BAvx
	MOVB $0xff, (DI)
	MOVL BP, 1(DI)
	LEAL -64(BX), BX
	ADDQ $0x05, DI
	CMPL BX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm10BAvx

emit_repeat_again_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_four_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_three_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_two_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

four_bytes_remain_repeat_as_copy_encodeBlockAsm10BAvx:
	TESTL BX, BX
	JZ    repeat_end_emit_encodeBlockAsm10BAvx
	MOVB  $0x03, DL
	LEAL  -4(DX)(BX*4), BX
	MOVB  BL, (DI)
	MOVL  BP, 1(DI)
	ADDQ  $0x05, DI
	JMP   repeat_end_emit_encodeBlockAsm10BAvx

two_byte_offset_repeat_as_copy_encodeBlockAsm10BAvx:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm10BAvx
	MOVB $0xee, (DI)
	MOVW BP, 1(DI)
	LEAL -60(BX), BX
	ADDQ $0x03, DI

emit_repeat_again_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_four_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_three_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_two_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm10BAvx_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

two_byte_offset_short_repeat_as_copy_encodeBlockAsm10BAvx:
	CMPL BX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm10BAvx
	CMPL BP, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm10BAvx
	MOVB $0x01, DL
	LEAL -16(DX)(BX*4), BX
	MOVB BP, 1(DI)
	SHRL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm10BAvx

emit_copy_three_repeat_as_copy_encodeBlockAsm10BAvx:
	MOVB $0x02, DL
	LEAL -4(DX)(BX*4), BX
	MOVB BL, (DI)
	MOVW BP, 1(DI)
	ADDQ $0x03, DI

repeat_end_emit_encodeBlockAsm10BAvx:
	MOVL AX, 20(SP)
	MOVQ DI, dst_base+0(FP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm10BAvx
	JMP  search_loop_encodeBlockAsm10BAvx

no_repeat_found_encodeBlockAsm10BAvx:
	CMPL (CX)(BX*1), BP
	JEQ  candidate_match_encodeBlockAsm10BAvx
	SHRQ $0x08, BP
	MOVL 32(SP)(R8*4), BX
	LEAL 2(AX), DI
	CMPL (CX)(SI*1), BP
	JEQ  candidate2_match_encodeBlockAsm10BAvx
	MOVL DI, 32(SP)(R8*4)
	SHRQ $0x08, BP
	CMPL (CX)(BX*1), BP
	JEQ  candidate3_match_encodeBlockAsm10BAvx
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm10BAvx

candidate3_match_encodeBlockAsm10BAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm10BAvx

candidate2_match_encodeBlockAsm10BAvx:
	MOVL DI, 32(SP)(R8*4)
	INCL AX
	MOVL SI, BX

candidate_match_encodeBlockAsm10BAvx:
	MOVL  20(SP), BP
	TESTL BX, BX
	JZ    match_extend_back_end_encodeBlockAsm10BAvx

match_extend_back_loop_encodeBlockAsm10BAvx:
	CMPL AX, BP
	JLE  match_extend_back_end_encodeBlockAsm10BAvx
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(AX*1), SI
	CMPB DL, SI
	JNE  match_extend_back_end_encodeBlockAsm10BAvx
	LEAL -1(AX), AX
	DECL BX
	JZ   match_extend_back_end_encodeBlockAsm10BAvx
	JMP  match_extend_back_loop_encodeBlockAsm10BAvx

match_extend_back_end_encodeBlockAsm10BAvx:
	MOVQ dst_base+0(FP), BP
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ (BP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm10BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm10BAvx:
	MOVL AX, BP
	MOVL 20(SP), SI
	CMPL SI, BP
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm10BAvx
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(SI*1), BP
	SUBL SI, DI
	MOVQ dst_base+0(FP), SI
	MOVL DI, R8
	SUBL $0x01, R8
	JC   emit_literal_done_match_emit_encodeBlockAsm10BAvx
	CMPL R8, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm10BAvx
	CMPL R8, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm10BAvx
	CMPL R8, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm10BAvx
	CMPL R8, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm10BAvx
	MOVB $0xfc, (SI)
	MOVL R8, 1(SI)
	ADDQ $0x05, SI
	JMP  memmove_match_emit_encodeBlockAsm10BAvx

four_bytes_match_emit_encodeBlockAsm10BAvx:
	MOVL R8, R9
	SHRL $0x10, R9
	MOVB $0xf8, (SI)
	MOVW R8, 1(SI)
	MOVB R9, 3(SI)
	ADDQ $0x04, SI
	JMP  memmove_match_emit_encodeBlockAsm10BAvx

three_bytes_match_emit_encodeBlockAsm10BAvx:
	MOVB $0xf4, (SI)
	MOVW R8, 1(SI)
	ADDQ $0x03, SI
	JMP  memmove_match_emit_encodeBlockAsm10BAvx

two_bytes_match_emit_encodeBlockAsm10BAvx:
	MOVB $0xf0, (SI)
	MOVB R8, 1(SI)
	ADDQ $0x02, SI
	JMP  memmove_match_emit_encodeBlockAsm10BAvx

one_byte_match_emit_encodeBlockAsm10BAvx:
	SHLB $0x02, R8
	MOVB R8, (SI)
	ADDQ $0x01, SI

memmove_match_emit_encodeBlockAsm10BAvx:
	LEAQ (SI)(DI*1), R8
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_match_emit_encodeBlockAsm10BAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_1or2:
	MOVB (BP), R9
	MOVB -1(BP)(DI*1), R10
	MOVB R9, (SI)
	MOVB R10, -1(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_4:
	MOVL (BP), R9
	MOVL R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_3:
	MOVW (BP), R9
	MOVB 2(BP), R10
	MOVW R9, (SI)
	MOVB R10, 2(SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_5through7:
	MOVL (BP), R9
	MOVL -4(BP)(DI*1), R10
	MOVL R9, (SI)
	MOVL R10, -4(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_8:
	MOVQ (BP), R9
	MOVQ R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_9through16:
	MOVQ (BP), R9
	MOVQ -8(BP)(DI*1), R10
	MOVQ R9, (SI)
	MOVQ R10, -8(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_17through32:
	MOVOU (BP), X0
	MOVOU -16(BP)(DI*1), X1
	MOVOU X0, (SI)
	MOVOU X1, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_33through64:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU -32(BP)(DI*1), X2
	MOVOU -16(BP)(DI*1), X3
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, -32(SI)(DI*1)
	MOVOU X3, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_65through128:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_129through256:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU -128(BP)(DI*1), X8
	MOVOU -112(BP)(DI*1), X9
	MOVOU -96(BP)(DI*1), X10
	MOVOU -80(BP)(DI*1), X11
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, -128(SI)(DI*1)
	MOVOU X9, -112(SI)(DI*1)
	MOVOU X10, -96(SI)(DI*1)
	MOVOU X11, -80(SI)(DI*1)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm10BAvx

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU 128(BP), X8
	MOVOU 144(BP), X9
	MOVOU 160(BP), X10
	MOVOU 176(BP), X11
	MOVOU 192(BP), X12
	MOVOU 208(BP), X13
	MOVOU 224(BP), X14
	MOVOU 240(BP), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, 128(SI)
	MOVOU X9, 144(SI)
	MOVOU X10, 160(SI)
	MOVOU X11, 176(SI)
	MOVOU X12, 192(SI)
	MOVOU X13, 208(SI)
	MOVOU X14, 224(SI)
	MOVOU X15, 240(SI)
	CMPQ  DI, $0x00000100
	LEAQ  256(BP), BP
	LEAQ  256(SI), SI
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_avxUnaligned:
	LEAQ    (BP)(DI*1), R10
	MOVQ    SI, R12
	MOVOU   -128(R10), X5
	MOVOU   -112(R10), X6
	MOVQ    $0x00000080, R9
	ANDQ    $0xffffffe0, SI
	ADDQ    $0x20, SI
	MOVOU   -96(R10), X7
	MOVOU   -80(R10), X8
	MOVQ    SI, R11
	SUBQ    R12, R11
	MOVOU   -64(R10), X9
	MOVOU   -48(R10), X10
	SUBQ    R11, DI
	MOVOU   -32(R10), X11
	MOVOU   -16(R10), X12
	VMOVDQU (BP), Y4
	ADDQ    R11, BP
	SUBQ    R9, DI

emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_gobble_128_loop:
	VMOVDQU (BP), Y0
	VMOVDQU 32(BP), Y1
	VMOVDQU 64(BP), Y2
	VMOVDQU 96(BP), Y3
	ADDQ    R9, BP
	VMOVDQA Y0, (SI)
	VMOVDQA Y1, 32(SI)
	VMOVDQA Y2, 64(SI)
	VMOVDQA Y3, 96(SI)
	ADDQ    R9, SI
	SUBQ    R9, DI
	JA      emit_lit_memmove_match_emit_encodeBlockAsm10BAvx_memmove_gobble_128_loop
	ADDQ    R9, DI
	ADDQ    SI, DI
	VMOVDQU Y4, (R12)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)

memmove_end_copy_match_emit_encodeBlockAsm10BAvx:
	MOVQ R8, SI

emit_literal_done_match_emit_encodeBlockAsm10BAvx:
	MOVQ SI, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm10BAvx:
match_nolit_loop_encodeBlockAsm10BAvx:
	MOVL AX, BP
	SUBL BX, BP
	MOVL BP, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, BX
	MOVL 16(SP), BP
	SUBL AX, BP
	LEAQ (CX)(AX*1), SI
	LEAQ (CX)(BX*1), BX
	XORL R8, R8
	CMPL BP, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm10BAvx

matchlen_loopback_match_nolit_encodeBlockAsm10BAvx:
	MOVQ  (SI)(R8*1), DI
	XORQ  (BX)(R8*1), DI
	TESTQ DI, DI
	JZ    matchlen_loop_match_nolit_encodeBlockAsm10BAvx
	BSFQ  DI, DI
	SARQ  $0x03, DI
	LEAL  (R8)(DI*1), R8
	JMP   match_nolit_end_encodeBlockAsm10BAvx

matchlen_loop_match_nolit_encodeBlockAsm10BAvx:
	LEAL -8(BP), BP
	LEAL 8(R8), R8
	CMPL BP, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm10BAvx

matchlen_single_match_nolit_encodeBlockAsm10BAvx:
	TESTL BP, BP
	JZ    match_nolit_end_encodeBlockAsm10BAvx

matchlen_single_loopback_match_nolit_encodeBlockAsm10BAvx:
	MOVB (SI)(R8*1), DI
	CMPB (BX)(R8*1), DI
	JNE  match_nolit_end_encodeBlockAsm10BAvx
	LEAL 1(R8), R8
	DECL BP
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm10BAvx

match_nolit_end_encodeBlockAsm10BAvx:
	ADDL R8, AX
	MOVL 24(SP), BX
	ADDL $0x04, R8
	MOVQ dst_base+0(FP), BP
	CMPL BX, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm10BAvx
	CMPL R8, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm10BAvx
	MOVB $0xff, (BP)
	MOVL BX, 1(BP)
	LEAL -64(R8), R8
	ADDQ $0x05, BP
	CMPL R8, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm10BAvx

emit_repeat_again_match_nolit_encodeBlockAsm10BAvx_emit_copy:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm10BAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm10BAvx_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm10BAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm10BAvx_emit_copy:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm10BAvx_emit_copy
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm10BAvx_emit_copy
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm10BAvx_emit_copy
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm10BAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsm10BAvx_emit_copy:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

repeat_four_match_nolit_encodeBlockAsm10BAvx_emit_copy:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

repeat_three_match_nolit_encodeBlockAsm10BAvx_emit_copy:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

repeat_two_match_nolit_encodeBlockAsm10BAvx_emit_copy:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

repeat_two_offset_match_nolit_encodeBlockAsm10BAvx_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

four_bytes_remain_match_nolit_encodeBlockAsm10BAvx:
	TESTL R8, R8
	JZ    match_nolit_emitcopy_end_encodeBlockAsm10BAvx
	MOVB  $0x03, DL
	LEAL  -4(DX)(R8*4), R8
	MOVB  R8, (BP)
	MOVL  BX, 1(BP)
	ADDQ  $0x05, BP
	JMP   match_nolit_emitcopy_end_encodeBlockAsm10BAvx

two_byte_offset_match_nolit_encodeBlockAsm10BAvx:
	CMPL R8, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm10BAvx
	MOVB $0xee, (BP)
	MOVW BX, 1(BP)
	LEAL -60(R8), R8
	ADDQ $0x03, BP

emit_repeat_again_match_nolit_encodeBlockAsm10BAvx_emit_copy_short:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm10BAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm10BAvx_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm10BAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm10BAvx_emit_copy_short:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm10BAvx_emit_copy_short
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm10BAvx_emit_copy_short
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm10BAvx_emit_copy_short
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm10BAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm10BAvx_emit_copy_short:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

repeat_four_match_nolit_encodeBlockAsm10BAvx_emit_copy_short:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

repeat_three_match_nolit_encodeBlockAsm10BAvx_emit_copy_short:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

repeat_two_match_nolit_encodeBlockAsm10BAvx_emit_copy_short:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

repeat_two_offset_match_nolit_encodeBlockAsm10BAvx_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

two_byte_offset_short_match_nolit_encodeBlockAsm10BAvx:
	CMPL R8, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm10BAvx
	CMPL BX, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm10BAvx
	MOVB $0x01, DL
	LEAL -16(DX)(R8*4), R8
	MOVB BL, 1(BP)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm10BAvx

emit_copy_three_match_nolit_encodeBlockAsm10BAvx:
	MOVB $0x02, DL
	LEAL -4(DX)(R8*4), R8
	MOVB R8, (BP)
	MOVW BX, 1(BP)
	ADDQ $0x03, BP

match_nolit_emitcopy_end_encodeBlockAsm10BAvx:
	MOVQ BP, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm10BAvx
	CMPQ BP, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm10BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm10BAvx:
	MOVQ  -2(CX)(AX*1), BP
	MOVQ  $0x0000cf1bbcdcbf9b, BX
	MOVQ  BP, SI
	SHRQ  $0x10, BP
	MOVQ  BP, DI
	SHLQ  $0x10, SI
	IMULQ BX, SI
	SHRQ  $0x36, SI
	SHLQ  $0x10, DI
	IMULQ BX, DI
	SHRQ  $0x36, DI
	LEAL  -2(AX), R8
	MOVL  32(SP)(DI*4), BX
	MOVL  R8, 32(SP)(SI*4)
	MOVL  AX, 32(SP)(DI*4)
	CMPL  (CX)(BX*1), BP
	JEQ   match_nolit_loop_encodeBlockAsm10BAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsm10BAvx

emit_remainder_encodeBlockAsm10BAvx:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), DX
	LEAQ (DX)(AX*1), DX
	CMPQ DX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm10BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm10BAvx:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm10BAvx
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), AX
	SUBL DX, BX
	MOVQ dst_base+0(FP), CX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm10BAvx
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm10BAvx
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm10BAvx
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm10BAvx
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm10BAvx
	MOVB $0xfc, (CX)
	MOVL DX, 1(CX)
	ADDQ $0x05, CX
	JMP  memmove_emit_remainder_encodeBlockAsm10BAvx

four_bytes_emit_remainder_encodeBlockAsm10BAvx:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (CX)
	MOVW DX, 1(CX)
	MOVB BP, 3(CX)
	ADDQ $0x04, CX
	JMP  memmove_emit_remainder_encodeBlockAsm10BAvx

three_bytes_emit_remainder_encodeBlockAsm10BAvx:
	MOVB $0xf4, (CX)
	MOVW DX, 1(CX)
	ADDQ $0x03, CX
	JMP  memmove_emit_remainder_encodeBlockAsm10BAvx

two_bytes_emit_remainder_encodeBlockAsm10BAvx:
	MOVB $0xf0, (CX)
	MOVB DL, 1(CX)
	ADDQ $0x02, CX
	JMP  memmove_emit_remainder_encodeBlockAsm10BAvx

one_byte_emit_remainder_encodeBlockAsm10BAvx:
	SHLB $0x02, DL
	MOVB DL, (CX)
	ADDQ $0x01, CX

memmove_emit_remainder_encodeBlockAsm10BAvx:
	LEAQ (CX)(BX*1), DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_tail:
	TESTQ BX, BX
	JEQ   memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_1or2:
	MOVB (AX), BP
	MOVB -1(AX)(BX*1), SI
	MOVB BP, (CX)
	MOVB SI, -1(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_4:
	MOVL (AX), BP
	MOVL BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_3:
	MOVW (AX), BP
	MOVB 2(AX), SI
	MOVW BP, (CX)
	MOVB SI, 2(CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_5through7:
	MOVL (AX), BP
	MOVL -4(AX)(BX*1), SI
	MOVL BP, (CX)
	MOVL SI, -4(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_8:
	MOVQ (AX), BP
	MOVQ BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_9through16:
	MOVQ (AX), BP
	MOVQ -8(AX)(BX*1), SI
	MOVQ BP, (CX)
	MOVQ SI, -8(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_17through32:
	MOVOU (AX), X0
	MOVOU -16(AX)(BX*1), X1
	MOVOU X0, (CX)
	MOVOU X1, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_33through64:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU -32(AX)(BX*1), X2
	MOVOU -16(AX)(BX*1), X3
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, -32(CX)(BX*1)
	MOVOU X3, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_65through128:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_129through256:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU -128(AX)(BX*1), X8
	MOVOU -112(AX)(BX*1), X9
	MOVOU -96(AX)(BX*1), X10
	MOVOU -80(AX)(BX*1), X11
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, -128(CX)(BX*1)
	MOVOU X9, -112(CX)(BX*1)
	MOVOU X10, -96(CX)(BX*1)
	MOVOU X11, -80(CX)(BX*1)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU 128(AX), X8
	MOVOU 144(AX), X9
	MOVOU 160(AX), X10
	MOVOU 176(AX), X11
	MOVOU 192(AX), X12
	MOVOU 208(AX), X13
	MOVOU 224(AX), X14
	MOVOU 240(AX), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, 128(CX)
	MOVOU X9, 144(CX)
	MOVOU X10, 160(CX)
	MOVOU X11, 176(CX)
	MOVOU X12, 192(CX)
	MOVOU X13, 208(CX)
	MOVOU X14, 224(CX)
	MOVOU X15, 240(CX)
	CMPQ  BX, $0x00000100
	LEAQ  256(AX), AX
	LEAQ  256(CX), CX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_avxUnaligned:
	LEAQ    (AX)(BX*1), SI
	MOVQ    CX, R8
	MOVOU   -128(SI), X5
	MOVOU   -112(SI), X6
	MOVQ    $0x00000080, BP
	ANDQ    $0xffffffe0, CX
	ADDQ    $0x20, CX
	MOVOU   -96(SI), X7
	MOVOU   -80(SI), X8
	MOVQ    CX, DI
	SUBQ    R8, DI
	MOVOU   -64(SI), X9
	MOVOU   -48(SI), X10
	SUBQ    DI, BX
	MOVOU   -32(SI), X11
	MOVOU   -16(SI), X12
	VMOVDQU (AX), Y4
	ADDQ    DI, AX
	SUBQ    BP, BX

emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_gobble_128_loop:
	VMOVDQU (AX), Y0
	VMOVDQU 32(AX), Y1
	VMOVDQU 64(AX), Y2
	VMOVDQU 96(AX), Y3
	ADDQ    BP, AX
	VMOVDQA Y0, (CX)
	VMOVDQA Y1, 32(CX)
	VMOVDQA Y2, 64(CX)
	VMOVDQA Y3, 96(CX)
	ADDQ    BP, CX
	SUBQ    BP, BX
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsm10BAvx_memmove_gobble_128_loop
	ADDQ    BP, BX
	ADDQ    CX, BX
	VMOVDQU Y4, (R8)
	VZEROUPPER
	MOVOU X5, -128(BX)
	MOVOU X6, -112(BX)
	MOVOU X7, -96(BX)
	MOVOU X8, -80(BX)
	MOVOU X9, -64(BX)
	MOVOU X10, -48(BX)
	MOVOU X11, -32(BX)
	MOVOU X12, -16(BX)

memmove_end_copy_emit_remainder_encodeBlockAsm10BAvx:
	MOVQ DX, CX

emit_literal_done_emit_remainder_encodeBlockAsm10BAvx:
	MOVQ CX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm10BAvx:
	MOVQ dst_base+0(FP), AX
	SUBQ 8(SP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm8BAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsm8BAvx(SB), $1056-56
	MOVQ $0x00000008, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm8BAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm8BAvx
	MOVL  $0x00000000, 20(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  src_len+32(FP), CX
	LEAQ  -5(CX), BX
	LEAQ  -8(CX), BP
	MOVL  BP, 16(SP)
	SHRQ  $0x05, CX
	SUBL  CX, BX
	LEAQ  (AX)(BX*1), BX
	MOVQ  BX, (SP)
	MOVQ  AX, 8(SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm8BAvx:
	MOVQ  (CX)(AX*1), BP
	MOVL  AX, BX
	SUBL  20(SP), BX
	SHRL  $0x04, BX
	LEAL  4(AX)(BX*1), BX
	MOVL  16(SP), SI
	CMPL  BX, SI
	JGT   emit_remainder_encodeBlockAsm8BAvx
	MOVL  BX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, DI
	MOVQ  BP, R8
	MOVQ  BP, R9
	SHRQ  $0x08, R9
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x38, R8
	SHLQ  $0x10, R9
	IMULQ DI, R9
	SHRQ  $0x38, R9
	MOVL  32(SP)(R8*4), BX
	MOVL  32(SP)(R9*4), SI
	MOVL  AX, 32(SP)(R8*4)
	LEAL  1(AX), R8
	MOVL  R8, 32(SP)(R9*4)
	MOVQ  BP, R8
	SHRQ  $0x10, R8
	SHLQ  $0x10, R8
	IMULQ DI, R8
	SHRQ  $0x38, R8
	MOVL  AX, DI
	SUBL  24(SP), DI
	MOVL  1(CX)(DI*1), R9
	MOVQ  BP, DI
	SHRQ  $0x08, DI
	CMPL  DI, R9
	JNE   no_repeat_found_encodeBlockAsm8BAvx
	LEAL  1(AX), BP
	MOVL  20(SP), SI
	MOVL  BP, BX
	SUBL  24(SP), BX
	JZ    repeat_extend_back_end_encodeBlockAsm8BAvx

repeat_extend_back_loop_encodeBlockAsm8BAvx:
	CMPL BP, SI
	JLE  repeat_extend_back_end_encodeBlockAsm8BAvx
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(BP*1), DI
	CMPB DL, DI
	JNE  repeat_extend_back_end_encodeBlockAsm8BAvx
	LEAL -1(BP), BP
	DECL BX
	JNZ  repeat_extend_back_loop_encodeBlockAsm8BAvx

repeat_extend_back_end_encodeBlockAsm8BAvx:
	MOVL 20(SP), BX
	CMPL BX, BP
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm8BAvx
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(BX*1), R8
	SUBL BX, DI
	MOVQ dst_base+0(FP), BX
	MOVL DI, R9
	SUBL $0x01, R9
	JC   emit_literal_done_repeat_emit_encodeBlockAsm8BAvx
	CMPL R9, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm8BAvx
	CMPL R9, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm8BAvx
	CMPL R9, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm8BAvx
	CMPL R9, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm8BAvx
	MOVB $0xfc, (BX)
	MOVL R9, 1(BX)
	ADDQ $0x05, BX
	JMP  memmove_repeat_emit_encodeBlockAsm8BAvx

four_bytes_repeat_emit_encodeBlockAsm8BAvx:
	MOVL R9, R10
	SHRL $0x10, R10
	MOVB $0xf8, (BX)
	MOVW R9, 1(BX)
	MOVB R10, 3(BX)
	ADDQ $0x04, BX
	JMP  memmove_repeat_emit_encodeBlockAsm8BAvx

three_bytes_repeat_emit_encodeBlockAsm8BAvx:
	MOVB $0xf4, (BX)
	MOVW R9, 1(BX)
	ADDQ $0x03, BX
	JMP  memmove_repeat_emit_encodeBlockAsm8BAvx

two_bytes_repeat_emit_encodeBlockAsm8BAvx:
	MOVB $0xf0, (BX)
	MOVB R9, 1(BX)
	ADDQ $0x02, BX
	JMP  memmove_repeat_emit_encodeBlockAsm8BAvx

one_byte_repeat_emit_encodeBlockAsm8BAvx:
	SHLB $0x02, R9
	MOVB R9, (BX)
	ADDQ $0x01, BX

memmove_repeat_emit_encodeBlockAsm8BAvx:
	LEAQ (BX)(DI*1), R9
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_avxUnaligned

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_1or2:
	MOVB (R8), R10
	MOVB -1(R8)(DI*1), R11
	MOVB R10, (BX)
	MOVB R11, -1(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_4:
	MOVL (R8), R10
	MOVL R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_3:
	MOVW (R8), R10
	MOVB 2(R8), R11
	MOVW R10, (BX)
	MOVB R11, 2(BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_5through7:
	MOVL (R8), R10
	MOVL -4(R8)(DI*1), R11
	MOVL R10, (BX)
	MOVL R11, -4(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_8:
	MOVQ (R8), R10
	MOVQ R10, (BX)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_9through16:
	MOVQ (R8), R10
	MOVQ -8(R8)(DI*1), R11
	MOVQ R10, (BX)
	MOVQ R11, -8(BX)(DI*1)
	JMP  memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_17through32:
	MOVOU (R8), X0
	MOVOU -16(R8)(DI*1), X1
	MOVOU X0, (BX)
	MOVOU X1, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_33through64:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU -32(R8)(DI*1), X2
	MOVOU -16(R8)(DI*1), X3
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, -32(BX)(DI*1)
	MOVOU X3, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_65through128:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_129through256:
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU -128(R8)(DI*1), X8
	MOVOU -112(R8)(DI*1), X9
	MOVOU -96(R8)(DI*1), X10
	MOVOU -80(R8)(DI*1), X11
	MOVOU -64(R8)(DI*1), X12
	MOVOU -48(R8)(DI*1), X13
	MOVOU -32(R8)(DI*1), X14
	MOVOU -16(R8)(DI*1), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, -128(BX)(DI*1)
	MOVOU X9, -112(BX)(DI*1)
	MOVOU X10, -96(BX)(DI*1)
	MOVOU X11, -80(BX)(DI*1)
	MOVOU X12, -64(BX)(DI*1)
	MOVOU X13, -48(BX)(DI*1)
	MOVOU X14, -32(BX)(DI*1)
	MOVOU X15, -16(BX)(DI*1)
	JMP   memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R8), X0
	MOVOU 16(R8), X1
	MOVOU 32(R8), X2
	MOVOU 48(R8), X3
	MOVOU 64(R8), X4
	MOVOU 80(R8), X5
	MOVOU 96(R8), X6
	MOVOU 112(R8), X7
	MOVOU 128(R8), X8
	MOVOU 144(R8), X9
	MOVOU 160(R8), X10
	MOVOU 176(R8), X11
	MOVOU 192(R8), X12
	MOVOU 208(R8), X13
	MOVOU 224(R8), X14
	MOVOU 240(R8), X15
	MOVOU X0, (BX)
	MOVOU X1, 16(BX)
	MOVOU X2, 32(BX)
	MOVOU X3, 48(BX)
	MOVOU X4, 64(BX)
	MOVOU X5, 80(BX)
	MOVOU X6, 96(BX)
	MOVOU X7, 112(BX)
	MOVOU X8, 128(BX)
	MOVOU X9, 144(BX)
	MOVOU X10, 160(BX)
	MOVOU X11, 176(BX)
	MOVOU X12, 192(BX)
	MOVOU X13, 208(BX)
	MOVOU X14, 224(BX)
	MOVOU X15, 240(BX)
	CMPQ  DI, $0x00000100
	LEAQ  256(R8), R8
	LEAQ  256(BX), BX
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_tail

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_avxUnaligned:
	LEAQ    (R8)(DI*1), R11
	MOVQ    BX, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, BX
	ADDQ    $0x20, BX
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    BX, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, DI
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R8), Y4
	ADDQ    R12, R8
	SUBQ    R10, DI

emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_gobble_128_loop:
	VMOVDQU (R8), Y0
	VMOVDQU 32(R8), Y1
	VMOVDQU 64(R8), Y2
	VMOVDQU 96(R8), Y3
	ADDQ    R10, R8
	VMOVDQA Y0, (BX)
	VMOVDQA Y1, 32(BX)
	VMOVDQA Y2, 64(BX)
	VMOVDQA Y3, 96(BX)
	ADDQ    R10, BX
	SUBQ    R10, DI
	JA      emit_lit_memmove_repeat_emit_encodeBlockAsm8BAvx_memmove_gobble_128_loop
	ADDQ    R10, DI
	ADDQ    BX, DI
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)

memmove_end_copy_repeat_emit_encodeBlockAsm8BAvx:
	MOVQ R9, BX

emit_literal_done_repeat_emit_encodeBlockAsm8BAvx:
	MOVQ BX, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm8BAvx:
	ADDL $0x05, AX
	MOVL AX, BX
	SUBL 24(SP), BX
	MOVL 16(SP), DI
	SUBL AX, DI
	LEAQ (CX)(AX*1), R8
	LEAQ (CX)(BX*1), BX
	XORL R10, R10
	CMPL DI, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (R8)(R10*1), R9
	XORQ  (BX)(R10*1), R9
	TESTQ R9, R9
	JZ    matchlen_loop_repeat_extend
	BSFQ  R9, R9
	SARQ  $0x03, R9
	LEAL  (R10)(R9*1), R10
	JMP   repeat_extend_forward_end_encodeBlockAsm8BAvx

matchlen_loop_repeat_extend:
	LEAL -8(DI), DI
	LEAL 8(R10), R10
	CMPL DI, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DI, DI
	JZ    repeat_extend_forward_end_encodeBlockAsm8BAvx

matchlen_single_loopback_repeat_extend:
	MOVB (R8)(R10*1), R9
	CMPB (BX)(R10*1), R9
	JNE  repeat_extend_forward_end_encodeBlockAsm8BAvx
	LEAL 1(R10), R10
	DECL DI
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm8BAvx:
	ADDL  R10, AX
	MOVL  AX, BX
	SUBL  BP, BX
	MOVL  24(SP), BP
	MOVQ  dst_base+0(FP), DI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm8BAvx

emit_repeat_again_match_repeat_encodeBlockAsm8BAvx:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_encodeBlockAsm8BAvx
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_encodeBlockAsm8BAvx
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_match_repeat_encodeBlockAsm8BAvx

cant_repeat_two_offset_match_repeat_encodeBlockAsm8BAvx:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_repeat_encodeBlockAsm8BAvx
	CMPL BX, $0x00010100
	JLT  repeat_four_match_repeat_encodeBlockAsm8BAvx
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_repeat_encodeBlockAsm8BAvx
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_match_repeat_encodeBlockAsm8BAvx

repeat_five_match_repeat_encodeBlockAsm8BAvx:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_four_match_repeat_encodeBlockAsm8BAvx:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_three_match_repeat_encodeBlockAsm8BAvx:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_two_match_repeat_encodeBlockAsm8BAvx:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_two_offset_match_repeat_encodeBlockAsm8BAvx:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_as_copy_encodeBlockAsm8BAvx:
	CMPL BP, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm8BAvx
	CMPL BX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm8BAvx
	MOVB $0xff, (DI)
	MOVL BP, 1(DI)
	LEAL -64(BX), BX
	ADDQ $0x05, DI
	CMPL BX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm8BAvx

emit_repeat_again_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_four_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_three_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_two_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

four_bytes_remain_repeat_as_copy_encodeBlockAsm8BAvx:
	TESTL BX, BX
	JZ    repeat_end_emit_encodeBlockAsm8BAvx
	MOVB  $0x03, DL
	LEAL  -4(DX)(BX*4), BX
	MOVB  BL, (DI)
	MOVL  BP, 1(DI)
	ADDQ  $0x05, DI
	JMP   repeat_end_emit_encodeBlockAsm8BAvx

two_byte_offset_repeat_as_copy_encodeBlockAsm8BAvx:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm8BAvx
	MOVB $0xee, (DI)
	MOVW BP, 1(DI)
	LEAL -60(BX), BX
	ADDQ $0x03, DI

emit_repeat_again_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short:
	MOVL BX, SI
	LEAL -4(BX), BX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short
	CMPL BP, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (DI)
	MOVW $0xfffb, 2(DI)
	MOVB $0xff, 4(DI)
	ADDQ $0x05, DI
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, BP
	MOVW $0x001d, (DI)
	MOVW BX, 2(DI)
	SARL $0x10, BP
	MOVB BP, 4(DI)
	ADDQ $0x05, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_four_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (DI)
	MOVW BX, 2(DI)
	ADDQ $0x04, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_three_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (DI)
	MOVB BL, 2(DI)
	ADDQ $0x03, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_two_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm8BAvx_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(BX*4), BX
	MOVB BP, 1(DI)
	SARL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

two_byte_offset_short_repeat_as_copy_encodeBlockAsm8BAvx:
	CMPL BX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm8BAvx
	CMPL BP, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm8BAvx
	MOVB $0x01, DL
	LEAL -16(DX)(BX*4), BX
	MOVB BP, 1(DI)
	SHRL $0x08, BP
	SHLL $0x05, BP
	ORL  BP, BX
	MOVB BL, (DI)
	ADDQ $0x02, DI
	JMP  repeat_end_emit_encodeBlockAsm8BAvx

emit_copy_three_repeat_as_copy_encodeBlockAsm8BAvx:
	MOVB $0x02, DL
	LEAL -4(DX)(BX*4), BX
	MOVB BL, (DI)
	MOVW BP, 1(DI)
	ADDQ $0x03, DI

repeat_end_emit_encodeBlockAsm8BAvx:
	MOVL AX, 20(SP)
	MOVQ DI, dst_base+0(FP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm8BAvx
	JMP  search_loop_encodeBlockAsm8BAvx

no_repeat_found_encodeBlockAsm8BAvx:
	CMPL (CX)(BX*1), BP
	JEQ  candidate_match_encodeBlockAsm8BAvx
	SHRQ $0x08, BP
	MOVL 32(SP)(R8*4), BX
	LEAL 2(AX), DI
	CMPL (CX)(SI*1), BP
	JEQ  candidate2_match_encodeBlockAsm8BAvx
	MOVL DI, 32(SP)(R8*4)
	SHRQ $0x08, BP
	CMPL (CX)(BX*1), BP
	JEQ  candidate3_match_encodeBlockAsm8BAvx
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm8BAvx

candidate3_match_encodeBlockAsm8BAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm8BAvx

candidate2_match_encodeBlockAsm8BAvx:
	MOVL DI, 32(SP)(R8*4)
	INCL AX
	MOVL SI, BX

candidate_match_encodeBlockAsm8BAvx:
	MOVL  20(SP), BP
	TESTL BX, BX
	JZ    match_extend_back_end_encodeBlockAsm8BAvx

match_extend_back_loop_encodeBlockAsm8BAvx:
	CMPL AX, BP
	JLE  match_extend_back_end_encodeBlockAsm8BAvx
	MOVB -1(CX)(BX*1), DL
	MOVB -1(CX)(AX*1), SI
	CMPB DL, SI
	JNE  match_extend_back_end_encodeBlockAsm8BAvx
	LEAL -1(AX), AX
	DECL BX
	JZ   match_extend_back_end_encodeBlockAsm8BAvx
	JMP  match_extend_back_loop_encodeBlockAsm8BAvx

match_extend_back_end_encodeBlockAsm8BAvx:
	MOVQ dst_base+0(FP), BP
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ (BP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm8BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm8BAvx:
	MOVL AX, BP
	MOVL 20(SP), SI
	CMPL SI, BP
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm8BAvx
	MOVL BP, DI
	MOVL BP, 20(SP)
	LEAQ (CX)(SI*1), BP
	SUBL SI, DI
	MOVQ dst_base+0(FP), SI
	MOVL DI, R8
	SUBL $0x01, R8
	JC   emit_literal_done_match_emit_encodeBlockAsm8BAvx
	CMPL R8, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm8BAvx
	CMPL R8, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm8BAvx
	CMPL R8, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm8BAvx
	CMPL R8, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm8BAvx
	MOVB $0xfc, (SI)
	MOVL R8, 1(SI)
	ADDQ $0x05, SI
	JMP  memmove_match_emit_encodeBlockAsm8BAvx

four_bytes_match_emit_encodeBlockAsm8BAvx:
	MOVL R8, R9
	SHRL $0x10, R9
	MOVB $0xf8, (SI)
	MOVW R8, 1(SI)
	MOVB R9, 3(SI)
	ADDQ $0x04, SI
	JMP  memmove_match_emit_encodeBlockAsm8BAvx

three_bytes_match_emit_encodeBlockAsm8BAvx:
	MOVB $0xf4, (SI)
	MOVW R8, 1(SI)
	ADDQ $0x03, SI
	JMP  memmove_match_emit_encodeBlockAsm8BAvx

two_bytes_match_emit_encodeBlockAsm8BAvx:
	MOVB $0xf0, (SI)
	MOVB R8, 1(SI)
	ADDQ $0x02, SI
	JMP  memmove_match_emit_encodeBlockAsm8BAvx

one_byte_match_emit_encodeBlockAsm8BAvx:
	SHLB $0x02, R8
	MOVB R8, (SI)
	ADDQ $0x01, SI

memmove_match_emit_encodeBlockAsm8BAvx:
	LEAQ (SI)(DI*1), R8
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   memmove_end_copy_match_emit_encodeBlockAsm8BAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_1or2:
	MOVB (BP), R9
	MOVB -1(BP)(DI*1), R10
	MOVB R9, (SI)
	MOVB R10, -1(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_4:
	MOVL (BP), R9
	MOVL R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_3:
	MOVW (BP), R9
	MOVB 2(BP), R10
	MOVW R9, (SI)
	MOVB R10, 2(SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_5through7:
	MOVL (BP), R9
	MOVL -4(BP)(DI*1), R10
	MOVL R9, (SI)
	MOVL R10, -4(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_8:
	MOVQ (BP), R9
	MOVQ R9, (SI)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_9through16:
	MOVQ (BP), R9
	MOVQ -8(BP)(DI*1), R10
	MOVQ R9, (SI)
	MOVQ R10, -8(SI)(DI*1)
	JMP  memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_17through32:
	MOVOU (BP), X0
	MOVOU -16(BP)(DI*1), X1
	MOVOU X0, (SI)
	MOVOU X1, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_33through64:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU -32(BP)(DI*1), X2
	MOVOU -16(BP)(DI*1), X3
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, -32(SI)(DI*1)
	MOVOU X3, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_65through128:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_129through256:
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU -128(BP)(DI*1), X8
	MOVOU -112(BP)(DI*1), X9
	MOVOU -96(BP)(DI*1), X10
	MOVOU -80(BP)(DI*1), X11
	MOVOU -64(BP)(DI*1), X12
	MOVOU -48(BP)(DI*1), X13
	MOVOU -32(BP)(DI*1), X14
	MOVOU -16(BP)(DI*1), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, -128(SI)(DI*1)
	MOVOU X9, -112(SI)(DI*1)
	MOVOU X10, -96(SI)(DI*1)
	MOVOU X11, -80(SI)(DI*1)
	MOVOU X12, -64(SI)(DI*1)
	MOVOU X13, -48(SI)(DI*1)
	MOVOU X14, -32(SI)(DI*1)
	MOVOU X15, -16(SI)(DI*1)
	JMP   memmove_end_copy_match_emit_encodeBlockAsm8BAvx

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (BP), X0
	MOVOU 16(BP), X1
	MOVOU 32(BP), X2
	MOVOU 48(BP), X3
	MOVOU 64(BP), X4
	MOVOU 80(BP), X5
	MOVOU 96(BP), X6
	MOVOU 112(BP), X7
	MOVOU 128(BP), X8
	MOVOU 144(BP), X9
	MOVOU 160(BP), X10
	MOVOU 176(BP), X11
	MOVOU 192(BP), X12
	MOVOU 208(BP), X13
	MOVOU 224(BP), X14
	MOVOU 240(BP), X15
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	MOVOU X2, 32(SI)
	MOVOU X3, 48(SI)
	MOVOU X4, 64(SI)
	MOVOU X5, 80(SI)
	MOVOU X6, 96(SI)
	MOVOU X7, 112(SI)
	MOVOU X8, 128(SI)
	MOVOU X9, 144(SI)
	MOVOU X10, 160(SI)
	MOVOU X11, 176(SI)
	MOVOU X12, 192(SI)
	MOVOU X13, 208(SI)
	MOVOU X14, 224(SI)
	MOVOU X15, 240(SI)
	CMPQ  DI, $0x00000100
	LEAQ  256(BP), BP
	LEAQ  256(SI), SI
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_avxUnaligned:
	LEAQ    (BP)(DI*1), R10
	MOVQ    SI, R12
	MOVOU   -128(R10), X5
	MOVOU   -112(R10), X6
	MOVQ    $0x00000080, R9
	ANDQ    $0xffffffe0, SI
	ADDQ    $0x20, SI
	MOVOU   -96(R10), X7
	MOVOU   -80(R10), X8
	MOVQ    SI, R11
	SUBQ    R12, R11
	MOVOU   -64(R10), X9
	MOVOU   -48(R10), X10
	SUBQ    R11, DI
	MOVOU   -32(R10), X11
	MOVOU   -16(R10), X12
	VMOVDQU (BP), Y4
	ADDQ    R11, BP
	SUBQ    R9, DI

emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_gobble_128_loop:
	VMOVDQU (BP), Y0
	VMOVDQU 32(BP), Y1
	VMOVDQU 64(BP), Y2
	VMOVDQU 96(BP), Y3
	ADDQ    R9, BP
	VMOVDQA Y0, (SI)
	VMOVDQA Y1, 32(SI)
	VMOVDQA Y2, 64(SI)
	VMOVDQA Y3, 96(SI)
	ADDQ    R9, SI
	SUBQ    R9, DI
	JA      emit_lit_memmove_match_emit_encodeBlockAsm8BAvx_memmove_gobble_128_loop
	ADDQ    R9, DI
	ADDQ    SI, DI
	VMOVDQU Y4, (R12)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)

memmove_end_copy_match_emit_encodeBlockAsm8BAvx:
	MOVQ R8, SI

emit_literal_done_match_emit_encodeBlockAsm8BAvx:
	MOVQ SI, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm8BAvx:
match_nolit_loop_encodeBlockAsm8BAvx:
	MOVL AX, BP
	SUBL BX, BP
	MOVL BP, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, BX
	MOVL 16(SP), BP
	SUBL AX, BP
	LEAQ (CX)(AX*1), SI
	LEAQ (CX)(BX*1), BX
	XORL R8, R8
	CMPL BP, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm8BAvx

matchlen_loopback_match_nolit_encodeBlockAsm8BAvx:
	MOVQ  (SI)(R8*1), DI
	XORQ  (BX)(R8*1), DI
	TESTQ DI, DI
	JZ    matchlen_loop_match_nolit_encodeBlockAsm8BAvx
	BSFQ  DI, DI
	SARQ  $0x03, DI
	LEAL  (R8)(DI*1), R8
	JMP   match_nolit_end_encodeBlockAsm8BAvx

matchlen_loop_match_nolit_encodeBlockAsm8BAvx:
	LEAL -8(BP), BP
	LEAL 8(R8), R8
	CMPL BP, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm8BAvx

matchlen_single_match_nolit_encodeBlockAsm8BAvx:
	TESTL BP, BP
	JZ    match_nolit_end_encodeBlockAsm8BAvx

matchlen_single_loopback_match_nolit_encodeBlockAsm8BAvx:
	MOVB (SI)(R8*1), DI
	CMPB (BX)(R8*1), DI
	JNE  match_nolit_end_encodeBlockAsm8BAvx
	LEAL 1(R8), R8
	DECL BP
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm8BAvx

match_nolit_end_encodeBlockAsm8BAvx:
	ADDL R8, AX
	MOVL 24(SP), BX
	ADDL $0x04, R8
	MOVQ dst_base+0(FP), BP
	CMPL BX, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm8BAvx
	CMPL R8, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm8BAvx
	MOVB $0xff, (BP)
	MOVL BX, 1(BP)
	LEAL -64(R8), R8
	ADDQ $0x05, BP
	CMPL R8, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm8BAvx

emit_repeat_again_match_nolit_encodeBlockAsm8BAvx_emit_copy:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm8BAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm8BAvx_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm8BAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm8BAvx_emit_copy:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm8BAvx_emit_copy
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm8BAvx_emit_copy
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm8BAvx_emit_copy
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm8BAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsm8BAvx_emit_copy:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

repeat_four_match_nolit_encodeBlockAsm8BAvx_emit_copy:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

repeat_three_match_nolit_encodeBlockAsm8BAvx_emit_copy:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

repeat_two_match_nolit_encodeBlockAsm8BAvx_emit_copy:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

repeat_two_offset_match_nolit_encodeBlockAsm8BAvx_emit_copy:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

four_bytes_remain_match_nolit_encodeBlockAsm8BAvx:
	TESTL R8, R8
	JZ    match_nolit_emitcopy_end_encodeBlockAsm8BAvx
	MOVB  $0x03, DL
	LEAL  -4(DX)(R8*4), R8
	MOVB  R8, (BP)
	MOVL  BX, 1(BP)
	ADDQ  $0x05, BP
	JMP   match_nolit_emitcopy_end_encodeBlockAsm8BAvx

two_byte_offset_match_nolit_encodeBlockAsm8BAvx:
	CMPL R8, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm8BAvx
	MOVB $0xee, (BP)
	MOVW BX, 1(BP)
	LEAL -60(R8), R8
	ADDQ $0x03, BP

emit_repeat_again_match_nolit_encodeBlockAsm8BAvx_emit_copy_short:
	MOVL R8, SI
	LEAL -4(R8), R8
	CMPL SI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm8BAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm8BAvx_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm8BAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm8BAvx_emit_copy_short:
	CMPL R8, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm8BAvx_emit_copy_short
	CMPL R8, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm8BAvx_emit_copy_short
	CMPL R8, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm8BAvx_emit_copy_short
	LEAL -16842747(R8), R8
	MOVW $0x001d, (BP)
	MOVW $0xfffb, 2(BP)
	MOVB $0xff, 4(BP)
	ADDQ $0x05, BP
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm8BAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm8BAvx_emit_copy_short:
	LEAL -65536(R8), R8
	MOVL R8, BX
	MOVW $0x001d, (BP)
	MOVW R8, 2(BP)
	SARL $0x10, BX
	MOVB BL, 4(BP)
	ADDQ $0x05, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

repeat_four_match_nolit_encodeBlockAsm8BAvx_emit_copy_short:
	LEAL -256(R8), R8
	MOVW $0x0019, (BP)
	MOVW R8, 2(BP)
	ADDQ $0x04, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

repeat_three_match_nolit_encodeBlockAsm8BAvx_emit_copy_short:
	LEAL -4(R8), R8
	MOVW $0x0015, (BP)
	MOVB R8, 2(BP)
	ADDQ $0x03, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

repeat_two_match_nolit_encodeBlockAsm8BAvx_emit_copy_short:
	SHLL $0x02, R8
	ORL  $0x01, R8
	MOVW R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

repeat_two_offset_match_nolit_encodeBlockAsm8BAvx_emit_copy_short:
	XORQ SI, SI
	LEAL 1(SI)(R8*4), R8
	MOVB BL, 1(BP)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

two_byte_offset_short_match_nolit_encodeBlockAsm8BAvx:
	CMPL R8, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm8BAvx
	CMPL BX, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm8BAvx
	MOVB $0x01, DL
	LEAL -16(DX)(R8*4), R8
	MOVB BL, 1(BP)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, R8
	MOVB R8, (BP)
	ADDQ $0x02, BP
	JMP  match_nolit_emitcopy_end_encodeBlockAsm8BAvx

emit_copy_three_match_nolit_encodeBlockAsm8BAvx:
	MOVB $0x02, DL
	LEAL -4(DX)(R8*4), R8
	MOVB R8, (BP)
	MOVW BX, 1(BP)
	ADDQ $0x03, BP

match_nolit_emitcopy_end_encodeBlockAsm8BAvx:
	MOVQ BP, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm8BAvx
	CMPQ BP, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm8BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm8BAvx:
	MOVQ  -2(CX)(AX*1), BP
	MOVQ  $0x0000cf1bbcdcbf9b, BX
	MOVQ  BP, SI
	SHRQ  $0x10, BP
	MOVQ  BP, DI
	SHLQ  $0x10, SI
	IMULQ BX, SI
	SHRQ  $0x38, SI
	SHLQ  $0x10, DI
	IMULQ BX, DI
	SHRQ  $0x38, DI
	LEAL  -2(AX), R8
	MOVL  32(SP)(DI*4), BX
	MOVL  R8, 32(SP)(SI*4)
	MOVL  AX, 32(SP)(DI*4)
	CMPL  (CX)(BX*1), BP
	JEQ   match_nolit_loop_encodeBlockAsm8BAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsm8BAvx

emit_remainder_encodeBlockAsm8BAvx:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), DX
	LEAQ (DX)(AX*1), DX
	CMPQ DX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm8BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm8BAvx:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm8BAvx
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), AX
	SUBL DX, BX
	MOVQ dst_base+0(FP), CX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm8BAvx
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm8BAvx
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm8BAvx
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm8BAvx
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm8BAvx
	MOVB $0xfc, (CX)
	MOVL DX, 1(CX)
	ADDQ $0x05, CX
	JMP  memmove_emit_remainder_encodeBlockAsm8BAvx

four_bytes_emit_remainder_encodeBlockAsm8BAvx:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (CX)
	MOVW DX, 1(CX)
	MOVB BP, 3(CX)
	ADDQ $0x04, CX
	JMP  memmove_emit_remainder_encodeBlockAsm8BAvx

three_bytes_emit_remainder_encodeBlockAsm8BAvx:
	MOVB $0xf4, (CX)
	MOVW DX, 1(CX)
	ADDQ $0x03, CX
	JMP  memmove_emit_remainder_encodeBlockAsm8BAvx

two_bytes_emit_remainder_encodeBlockAsm8BAvx:
	MOVB $0xf0, (CX)
	MOVB DL, 1(CX)
	ADDQ $0x02, CX
	JMP  memmove_emit_remainder_encodeBlockAsm8BAvx

one_byte_emit_remainder_encodeBlockAsm8BAvx:
	SHLB $0x02, DL
	MOVB DL, (CX)
	ADDQ $0x01, CX

memmove_emit_remainder_encodeBlockAsm8BAvx:
	LEAQ (CX)(BX*1), DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_tail:
	TESTQ BX, BX
	JEQ   memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_1or2:
	MOVB (AX), BP
	MOVB -1(AX)(BX*1), SI
	MOVB BP, (CX)
	MOVB SI, -1(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_4:
	MOVL (AX), BP
	MOVL BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_3:
	MOVW (AX), BP
	MOVB 2(AX), SI
	MOVW BP, (CX)
	MOVB SI, 2(CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_5through7:
	MOVL (AX), BP
	MOVL -4(AX)(BX*1), SI
	MOVL BP, (CX)
	MOVL SI, -4(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_8:
	MOVQ (AX), BP
	MOVQ BP, (CX)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_9through16:
	MOVQ (AX), BP
	MOVQ -8(AX)(BX*1), SI
	MOVQ BP, (CX)
	MOVQ SI, -8(CX)(BX*1)
	JMP  memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_17through32:
	MOVOU (AX), X0
	MOVOU -16(AX)(BX*1), X1
	MOVOU X0, (CX)
	MOVOU X1, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_33through64:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU -32(AX)(BX*1), X2
	MOVOU -16(AX)(BX*1), X3
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, -32(CX)(BX*1)
	MOVOU X3, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_65through128:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_129through256:
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU -128(AX)(BX*1), X8
	MOVOU -112(AX)(BX*1), X9
	MOVOU -96(AX)(BX*1), X10
	MOVOU -80(AX)(BX*1), X11
	MOVOU -64(AX)(BX*1), X12
	MOVOU -48(AX)(BX*1), X13
	MOVOU -32(AX)(BX*1), X14
	MOVOU -16(AX)(BX*1), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, -128(CX)(BX*1)
	MOVOU X9, -112(CX)(BX*1)
	MOVOU X10, -96(CX)(BX*1)
	MOVOU X11, -80(CX)(BX*1)
	MOVOU X12, -64(CX)(BX*1)
	MOVOU X13, -48(CX)(BX*1)
	MOVOU X14, -32(CX)(BX*1)
	MOVOU X15, -16(CX)(BX*1)
	JMP   memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (AX), X0
	MOVOU 16(AX), X1
	MOVOU 32(AX), X2
	MOVOU 48(AX), X3
	MOVOU 64(AX), X4
	MOVOU 80(AX), X5
	MOVOU 96(AX), X6
	MOVOU 112(AX), X7
	MOVOU 128(AX), X8
	MOVOU 144(AX), X9
	MOVOU 160(AX), X10
	MOVOU 176(AX), X11
	MOVOU 192(AX), X12
	MOVOU 208(AX), X13
	MOVOU 224(AX), X14
	MOVOU 240(AX), X15
	MOVOU X0, (CX)
	MOVOU X1, 16(CX)
	MOVOU X2, 32(CX)
	MOVOU X3, 48(CX)
	MOVOU X4, 64(CX)
	MOVOU X5, 80(CX)
	MOVOU X6, 96(CX)
	MOVOU X7, 112(CX)
	MOVOU X8, 128(CX)
	MOVOU X9, 144(CX)
	MOVOU X10, 160(CX)
	MOVOU X11, 176(CX)
	MOVOU X12, 192(CX)
	MOVOU X13, 208(CX)
	MOVOU X14, 224(CX)
	MOVOU X15, 240(CX)
	CMPQ  BX, $0x00000100
	LEAQ  256(AX), AX
	LEAQ  256(CX), CX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_avxUnaligned:
	LEAQ    (AX)(BX*1), SI
	MOVQ    CX, R8
	MOVOU   -128(SI), X5
	MOVOU   -112(SI), X6
	MOVQ    $0x00000080, BP
	ANDQ    $0xffffffe0, CX
	ADDQ    $0x20, CX
	MOVOU   -96(SI), X7
	MOVOU   -80(SI), X8
	MOVQ    CX, DI
	SUBQ    R8, DI
	MOVOU   -64(SI), X9
	MOVOU   -48(SI), X10
	SUBQ    DI, BX
	MOVOU   -32(SI), X11
	MOVOU   -16(SI), X12
	VMOVDQU (AX), Y4
	ADDQ    DI, AX
	SUBQ    BP, BX

emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_gobble_128_loop:
	VMOVDQU (AX), Y0
	VMOVDQU 32(AX), Y1
	VMOVDQU 64(AX), Y2
	VMOVDQU 96(AX), Y3
	ADDQ    BP, AX
	VMOVDQA Y0, (CX)
	VMOVDQA Y1, 32(CX)
	VMOVDQA Y2, 64(CX)
	VMOVDQA Y3, 96(CX)
	ADDQ    BP, CX
	SUBQ    BP, BX
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsm8BAvx_memmove_gobble_128_loop
	ADDQ    BP, BX
	ADDQ    CX, BX
	VMOVDQU Y4, (R8)
	VZEROUPPER
	MOVOU X5, -128(BX)
	MOVOU X6, -112(BX)
	MOVOU X7, -96(BX)
	MOVOU X8, -80(BX)
	MOVOU X9, -64(BX)
	MOVOU X10, -48(BX)
	MOVOU X11, -32(BX)
	MOVOU X12, -16(BX)

memmove_end_copy_emit_remainder_encodeBlockAsm8BAvx:
	MOVQ DX, CX

emit_literal_done_emit_remainder_encodeBlockAsm8BAvx:
	MOVQ CX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm8BAvx:
	MOVQ dst_base+0(FP), AX
	SUBQ 8(SP), AX
	MOVQ AX, ret+48(FP)
	RET

// func emitLiteral(dst []byte, lit []byte) int
// Requires: SSE2
TEXT Â·emitLiteral(SB), NOSPLIT, $0-56
	MOVQ dst_base+0(FP), AX
	MOVQ lit_base+24(FP), CX
	MOVQ lit_len+32(FP), DX
	MOVL DX, BX
	MOVL DX, BP
	SUBL $0x01, BP
	JC   emit_literal_end_standalone
	CMPL BP, $0x3c
	JLT  one_byte_standalone
	CMPL BP, $0x00000100
	JLT  two_bytes_standalone
	CMPL BP, $0x00010000
	JLT  three_bytes_standalone
	CMPL BP, $0x01000000
	JLT  four_bytes_standalone
	MOVB $0xfc, (AX)
	MOVL BP, 1(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  memmove_standalone

four_bytes_standalone:
	MOVL BP, SI
	SHRL $0x10, SI
	MOVB $0xf8, (AX)
	MOVW BP, 1(AX)
	MOVB SI, 3(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  memmove_standalone

three_bytes_standalone:
	MOVB $0xf4, (AX)
	MOVW BP, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  memmove_standalone

two_bytes_standalone:
	MOVB $0xf0, (AX)
	MOVB BP, 1(AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  memmove_standalone

one_byte_standalone:
	SHLB $0x02, BP
	MOVB BP, (AX)
	ADDQ $0x01, BX
	ADDQ $0x01, AX

memmove_standalone:
	NOP

emit_lit_memmove_standalone_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_end_standalone
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_standalone_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_standalone_memmove_move_3
	JBE   emit_lit_memmove_standalone_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_standalone_memmove_move_5through7
	JE    emit_lit_memmove_standalone_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_standalone_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_standalone_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_standalone_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_standalone_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_standalone_memmove_move_129through256
	JMP   emit_lit_memmove_standalone_memmove_move_256through2048

emit_lit_memmove_standalone_memmove_move_1or2:
	MOVB (CX), BP
	MOVB -1(CX)(DX*1), CL
	MOVB BP, (AX)
	MOVB CL, -1(AX)(DX*1)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_4:
	MOVL (CX), BP
	MOVL BP, (AX)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_3:
	MOVW (CX), BP
	MOVB 2(CX), CL
	MOVW BP, (AX)
	MOVB CL, 2(AX)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_5through7:
	MOVL (CX), BP
	MOVL -4(CX)(DX*1), CX
	MOVL BP, (AX)
	MOVL CX, -4(AX)(DX*1)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_8:
	MOVQ (CX), BP
	MOVQ BP, (AX)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_9through16:
	MOVQ (CX), BP
	MOVQ -8(CX)(DX*1), CX
	MOVQ BP, (AX)
	MOVQ CX, -8(AX)(DX*1)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_standalone_memmove_move_256through2048
	JMP   emit_lit_memmove_standalone_memmove_tail

emit_literal_end_standalone:
	MOVQ BX, ret+48(FP)
	RET

// func emitLiteralAvx(dst []byte, lit []byte) int
// Requires: AVX, SSE2
TEXT Â·emitLiteralAvx(SB), NOSPLIT, $0-56
	MOVQ dst_base+0(FP), AX
	MOVQ lit_base+24(FP), CX
	MOVQ lit_len+32(FP), DX
	MOVL DX, BX
	MOVL DX, BP
	SUBL $0x01, BP
	JC   emit_literal_end_avx_standalone
	CMPL BP, $0x3c
	JLT  one_byte_standalone
	CMPL BP, $0x00000100
	JLT  two_bytes_standalone
	CMPL BP, $0x00010000
	JLT  three_bytes_standalone
	CMPL BP, $0x01000000
	JLT  four_bytes_standalone
	MOVB $0xfc, (AX)
	MOVL BP, 1(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  memmove_standalone

four_bytes_standalone:
	MOVL BP, SI
	SHRL $0x10, SI
	MOVB $0xf8, (AX)
	MOVW BP, 1(AX)
	MOVB SI, 3(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  memmove_standalone

three_bytes_standalone:
	MOVB $0xf4, (AX)
	MOVW BP, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  memmove_standalone

two_bytes_standalone:
	MOVB $0xf0, (AX)
	MOVB BP, 1(AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  memmove_standalone

one_byte_standalone:
	SHLB $0x02, BP
	MOVB BP, (AX)
	ADDQ $0x01, BX
	ADDQ $0x01, AX

memmove_standalone:
	NOP

emit_lit_memmove_standalone_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_end_avx_standalone
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_standalone_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_standalone_memmove_move_3
	JBE   emit_lit_memmove_standalone_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_standalone_memmove_move_5through7
	JE    emit_lit_memmove_standalone_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_standalone_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_standalone_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_standalone_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_standalone_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_standalone_memmove_move_129through256
	JMP   emit_lit_memmove_standalone_memmove_avxUnaligned

emit_lit_memmove_standalone_memmove_move_1or2:
	MOVB (CX), BP
	MOVB -1(CX)(DX*1), SI
	MOVB BP, (AX)
	MOVB SI, -1(AX)(DX*1)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_4:
	MOVL (CX), BP
	MOVL BP, (AX)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_3:
	MOVW (CX), BP
	MOVB 2(CX), SI
	MOVW BP, (AX)
	MOVB SI, 2(AX)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_5through7:
	MOVL (CX), BP
	MOVL -4(CX)(DX*1), SI
	MOVL BP, (AX)
	MOVL SI, -4(AX)(DX*1)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_8:
	MOVQ (CX), BP
	MOVQ BP, (AX)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_9through16:
	MOVQ (CX), BP
	MOVQ -8(CX)(DX*1), SI
	MOVQ BP, (AX)
	MOVQ SI, -8(AX)(DX*1)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_standalone_memmove_move_256through2048
	JMP   emit_lit_memmove_standalone_memmove_tail

emit_lit_memmove_standalone_memmove_avxUnaligned:
	LEAQ    (CX)(DX*1), SI
	MOVQ    AX, R8
	MOVOU   -128(SI), X5
	MOVOU   -112(SI), X6
	MOVQ    $0x00000080, BP
	ANDQ    $0xffffffe0, AX
	ADDQ    $0x20, AX
	MOVOU   -96(SI), X7
	MOVOU   -80(SI), X8
	MOVQ    AX, DI
	SUBQ    R8, DI
	MOVOU   -64(SI), X9
	MOVOU   -48(SI), X10
	SUBQ    DI, DX
	MOVOU   -32(SI), X11
	MOVOU   -16(SI), X12
	VMOVDQU (CX), Y4
	ADDQ    DI, CX
	SUBQ    BP, DX

emit_lit_memmove_standalone_memmove_gobble_128_loop:
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	ADDQ    BP, CX
	VMOVDQA Y0, (AX)
	VMOVDQA Y1, 32(AX)
	VMOVDQA Y2, 64(AX)
	VMOVDQA Y3, 96(AX)
	ADDQ    BP, AX
	SUBQ    BP, DX
	JA      emit_lit_memmove_standalone_memmove_gobble_128_loop
	ADDQ    BP, DX
	ADDQ    AX, DX
	VMOVDQU Y4, (R8)
	VZEROUPPER
	MOVOU X5, -128(DX)
	MOVOU X6, -112(DX)
	MOVOU X7, -96(DX)
	MOVOU X8, -80(DX)
	MOVOU X9, -64(DX)
	MOVOU X10, -48(DX)
	MOVOU X11, -32(DX)
	MOVOU X12, -16(DX)

emit_literal_end_avx_standalone:
	MOVQ BX, ret+48(FP)
	RET

// func emitRepeat(dst []byte, offset int, length int) int
TEXT Â·emitRepeat(SB), NOSPLIT, $0-48
	XORQ BX, BX
	MOVQ dst_base+0(FP), AX
	MOVQ offset+24(FP), CX
	MOVQ length+32(FP), DX

emit_repeat_again_standalone:
	MOVL DX, BP
	LEAL -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_two_standalone
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offset_standalone
	CMPL CX, $0x00000800
	JLT  repeat_two_offset_standalone

cant_repeat_two_offset_standalone:
	CMPL DX, $0x00000104
	JLT  repeat_three_standalone
	CMPL DX, $0x00010100
	JLT  repeat_four_standalone
	CMPL DX, $0x0100ffff
	JLT  repeat_five_standalone
	LEAL -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_again_standalone

repeat_five_standalone:
	LEAL -65536(DX), DX
	MOVL DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARL $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  gen_emit_repeat_end

repeat_four_standalone:
	LEAL -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  gen_emit_repeat_end

repeat_three_standalone:
	LEAL -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  gen_emit_repeat_end

repeat_two_standalone:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_repeat_end

repeat_two_offset_standalone:
	XORQ BP, BP
	LEAL 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX

gen_emit_repeat_end:
	MOVQ BX, ret+40(FP)
	RET

// func emitCopy(dst []byte, offset int, length int) int
TEXT Â·emitCopy(SB), NOSPLIT, $0-48
	XORQ BX, BX
	MOVQ dst_base+0(FP), AX
	MOVQ offset+24(FP), CX
	MOVQ length+32(FP), DX
	CMPL CX, $0x00010000
	JL   two_byte_offset_standalone
	CMPL DX, $0x40
	JLE  four_bytes_remain_standalone
	MOVB $0xff, (AX)
	MOVL CX, 1(AX)
	LEAL -64(DX), DX
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	CMPL DX, $0x04
	JL   four_bytes_remain_standalone

emit_repeat_again_standalone_emit_copy:
	MOVL DX, BP
	LEAL -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_two_standalone_emit_copy
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offset_standalone_emit_copy
	CMPL CX, $0x00000800
	JLT  repeat_two_offset_standalone_emit_copy

cant_repeat_two_offset_standalone_emit_copy:
	CMPL DX, $0x00000104
	JLT  repeat_three_standalone_emit_copy
	CMPL DX, $0x00010100
	JLT  repeat_four_standalone_emit_copy
	CMPL DX, $0x0100ffff
	JLT  repeat_five_standalone_emit_copy
	LEAL -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_again_standalone_emit_copy

repeat_five_standalone_emit_copy:
	LEAL -65536(DX), DX
	MOVL DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARL $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  gen_emit_copy_end

repeat_four_standalone_emit_copy:
	LEAL -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  gen_emit_copy_end

repeat_three_standalone_emit_copy:
	LEAL -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  gen_emit_copy_end

repeat_two_standalone_emit_copy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

repeat_two_offset_standalone_emit_copy:
	XORQ BP, BP
	LEAL 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

four_bytes_remain_standalone:
	TESTL DX, DX
	JZ    gen_emit_copy_end
	MOVB  $0x03, BP
	LEAL  -4(BP)(DX*4), DX
	MOVB  DL, (AX)
	MOVL  CX, 1(AX)
	ADDQ  $0x05, BX
	ADDQ  $0x05, AX
	JMP   gen_emit_copy_end

two_byte_offset_standalone:
	CMPL DX, $0x40
	JLE  two_byte_offset_short_standalone
	MOVB $0xee, (AX)
	MOVW CX, 1(AX)
	LEAL -60(DX), DX
	ADDQ $0x03, AX
	ADDQ $0x03, BX

emit_repeat_again_standalone_emit_copy_short:
	MOVL DX, BP
	LEAL -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_two_standalone_emit_copy_short
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offset_standalone_emit_copy_short
	CMPL CX, $0x00000800
	JLT  repeat_two_offset_standalone_emit_copy_short

cant_repeat_two_offset_standalone_emit_copy_short:
	CMPL DX, $0x00000104
	JLT  repeat_three_standalone_emit_copy_short
	CMPL DX, $0x00010100
	JLT  repeat_four_standalone_emit_copy_short
	CMPL DX, $0x0100ffff
	JLT  repeat_five_standalone_emit_copy_short
	LEAL -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_again_standalone_emit_copy_short

repeat_five_standalone_emit_copy_short:
	LEAL -65536(DX), DX
	MOVL DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARL $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  gen_emit_copy_end

repeat_four_standalone_emit_copy_short:
	LEAL -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  gen_emit_copy_end

repeat_three_standalone_emit_copy_short:
	LEAL -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  gen_emit_copy_end

repeat_two_standalone_emit_copy_short:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

repeat_two_offset_standalone_emit_copy_short:
	XORQ BP, BP
	LEAL 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

two_byte_offset_short_standalone:
	CMPL DX, $0x0c
	JGE  emit_copy_three_standalone
	CMPL CX, $0x00000800
	JGE  emit_copy_three_standalone
	MOVB $0x01, BP
	LEAL -16(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SHRL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

emit_copy_three_standalone:
	MOVB $0x02, BP
	LEAL -4(BP)(DX*4), DX
	MOVB DL, (AX)
	MOVW CX, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX

gen_emit_copy_end:
	MOVQ BX, ret+40(FP)
	RET

// func matchLen(a []byte, b []byte) int
TEXT Â·matchLen(SB), NOSPLIT, $0-56
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ a_len+8(FP), DX
	XORL BP, BP
	CMPL DX, $0x08
	JL   matchlen_single_standalone

matchlen_loopback_standalone:
	MOVQ  (AX)(BP*1), BX
	XORQ  (CX)(BP*1), BX
	TESTQ BX, BX
	JZ    matchlen_loop_standalone
	BSFQ  BX, BX
	SARQ  $0x03, BX
	LEAL  (BP)(BX*1), BP
	JMP   gen_match_len_end

matchlen_loop_standalone:
	LEAL -8(DX), DX
	LEAL 8(BP), BP
	CMPL DX, $0x08
	JGE  matchlen_loopback_standalone

matchlen_single_standalone:
	TESTL DX, DX
	JZ    gen_match_len_end

matchlen_single_loopback_standalone:
	MOVB (AX)(BP*1), BL
	CMPB (CX)(BP*1), BL
	JNE  gen_match_len_end
	LEAL 1(BP), BP
	DECL DX
	JNZ  matchlen_single_loopback_standalone

gen_match_len_end:
	MOVQ BP, ret+48(FP)
	RET
