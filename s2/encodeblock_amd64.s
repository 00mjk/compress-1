// Code generated by command: go run gen.go -out encodeblock_amd64.s -stubs encodeblock_amd64.go. DO NOT EDIT.

// +build !appengine
// +build !noasm
// +build gc

#include "textflag.h"

// func encodeBlockAsm(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm(SB), $65568-56
	MOVQ $0x00000200, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R9
	SHRQ  $0x05, AX
	SUBL  CX, AX
	MOVL  R9, 16(SP)
	MOVQ  dst_base+0(FP), CX
	MOVQ  CX, 8(SP)
	LEAQ  (CX)(AX*1), AX
	MOVQ  AX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm:
	MOVQ  (CX)(AX*1), R10
	MOVL  20(SP), DX
	SUBL  AX, DX
	SHRL  $0x06, DX
	LEAQ  4(AX)(DX*1), R9
	MOVL  16(SP), DX
	CMPL  R9, DX
	JGT   emit_remainder_encodeBlockAsm
	MOVL  R9, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	MOVQ  R10, R13
	SHRQ  $0x08, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x30, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x30, R13
	MOVL  32(SP)(R12*1), R9
	MOVL  32(SP)(R13*1), DX
	MOVL  AX, 32(SP)(R12*1)
	MOVL  AX, BX
	DECL  BX
	MOVL  BX, 32(SP)(R13*1)
	MOVQ  R10, R12
	SHRQ  $0x10, R12
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x30, R12
	CMPL  (CX)(R9*1), R10
	JEQ   candidate_match_encodeBlockAsm
	SHRQ  $0x08, R10
	MOVL  32(SP)(R12*1), R9
	CMPL  (CX)(DX*1), R10
	JEQ   candidate2_match_encodeBlockAsm
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	SHRQ  $0x08, R10
	CMPL  (CX)(R9*1), R10
	JEQ   candidate3_match_encodeBlockAsm
	MOVL  28(SP), AX
	JMP   search_loop_encodeBlockAsm

candidate3_match_encodeBlockAsm:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm

candidate2_match_encodeBlockAsm:
	LEAQ -2(AX), R9
	MOVL R9, 32(SP)(R12*1)
	INCL AX
	MOVL DX, R9

candidate_match_encodeBlockAsm:
	MOVL  20(SP), DX
	TESTL R9, R9
	JZ    match_extend_back_end_encodeBlockAsm

match_extend_back_loop_encodeBlockAsm:
	CMPL AX, DX
	JG   match_extend_back_end_encodeBlockAsm
	MOVB -1(CX)(R9*1), BL
	MOVB -1(CX)(AX*1), BP
	CMPB BL, BP
	JNE  match_extend_back_end_encodeBlockAsm
	LEAL -1(AX), AX
	DECL R9
	JZ   match_extend_back_end_encodeBlockAsm
	JMP  match_extend_back_loop_encodeBlockAsm

match_extend_back_end_encodeBlockAsm:
	MOVL 20(SP), BX
	SUBL AX, BX
	LEAQ dst_base+0(FP)(BX*1), BX
	CMPQ BX, (SP)
	JL   match_dst_size_check_encodeBlockAsm
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm:
	MOVL R9, DX
	CMPL 20(SP), DX
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm
	MOVL 20(SP), BP
	MOVQ DX, R10
	LEAQ (CX)(BP*1), R11
	SUBQ R10, BP
	MOVQ dst_base+0(FP), R10
	MOVL DX, 20(SP)
	MOVQ BP, R12
	SUBL $0x01, R12
	JC   emit_literal_done_match_emit_encodeBlockAsm
	CMPL R12, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm
	CMPL R12, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm
	CMPL R12, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm
	CMPL R12, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm
	MOVB $0xfc, (R10)
	MOVL R12, 1(R10)
	ADDQ $0x05, R10
	JMP  memmove_match_emit_encodeBlockAsm

four_bytes_match_emit_encodeBlockAsm:
	MOVQ R12, R13
	SHRL $0x10, R13
	MOVB $0xf8, (R10)
	MOVW R12, 1(R10)
	MOVB R13, 3(R10)
	ADDQ $0x04, R10
	JMP  memmove_match_emit_encodeBlockAsm

three_bytes_match_emit_encodeBlockAsm:
	MOVB $0xf4, (R10)
	MOVW R12, 1(R10)
	ADDQ $0x03, R10
	JMP  memmove_match_emit_encodeBlockAsm

two_bytes_match_emit_encodeBlockAsm:
	MOVB $0xf0, (R10)
	MOVB R12, 1(R10)
	ADDQ $0x02, R10
	JMP  memmove_match_emit_encodeBlockAsm

one_byte_match_emit_encodeBlockAsm:
	SHLB $0x02, R12
	MOVB R12, (R10)
	ADDQ $0x01, R10

memmove_match_emit_encodeBlockAsm:
	LEAQ (R10)(BP*1), R12
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_tail:
	TESTQ BP, BP
	JEQ   emit_literal_done_match_emit_encodeBlockAsm
	CMPQ  BP, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_1or2
	CMPQ  BP, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_4
	CMPQ  BP, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_8
	CMPQ  BP, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_9through16
	CMPQ  BP, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_17through32
	CMPQ  BP, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_33through64
	CMPQ  BP, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_65through128
	CMPQ  BP, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_1or2:
	MOVB (R11), R12
	MOVB -1(R11)(BP*1), R11
	MOVB R12, (R10)
	MOVB R11, -1(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_4:
	MOVL (R11), R12
	MOVL R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_3:
	MOVW (R11), R12
	MOVB 2(R11), R11
	MOVW R12, (R10)
	MOVB R11, 2(R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_5through7:
	MOVL (R11), R12
	MOVL -4(R11)(BP*1), R11
	MOVL R12, (R10)
	MOVL R11, -4(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_8:
	MOVQ (R11), R12
	MOVQ R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_9through16:
	MOVQ (R11), R12
	MOVQ -8(R11)(BP*1), R11
	MOVQ R12, (R10)
	MOVQ R11, -8(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_17through32:
	MOVOU (R11), X0
	MOVOU -16(R11)(BP*1), X1
	MOVOU X0, (R10)
	MOVOU X1, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_33through64:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU -32(R11)(BP*1), X2
	MOVOU -16(R11)(BP*1), X3
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, -32(R10)(BP*1)
	MOVOU X3, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_65through128:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_129through256:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU -128(R11)(BP*1), X8
	MOVOU -112(R11)(BP*1), X9
	MOVOU -96(R11)(BP*1), X10
	MOVOU -80(R11)(BP*1), X11
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, -128(R10)(BP*1)
	MOVOU X9, -112(R10)(BP*1)
	MOVOU X10, -96(R10)(BP*1)
	MOVOU X11, -80(R10)(BP*1)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_256through2048:
	LEAQ  -256(BP), BP
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU 128(R11), X8
	MOVOU 144(R11), X9
	MOVOU 160(R11), X10
	MOVOU 176(R11), X11
	MOVOU 192(R11), X12
	MOVOU 208(R11), X13
	MOVOU 224(R11), X14
	MOVOU 240(R11), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, 128(R10)
	MOVOU X9, 144(R10)
	MOVOU X10, 160(R10)
	MOVOU X11, 176(R10)
	MOVOU X12, 192(R10)
	MOVOU X13, 208(R10)
	MOVOU X14, 224(R10)
	MOVOU X15, 240(R10)
	CMPQ  BP, $0x00000100
	LEAQ  256(R11), R11
	LEAQ  256(R10), R10
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_tail
	MOVQ  R12, R10

emit_literal_done_match_emit_encodeBlockAsm:
	MOVQ R10, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm:
	NOP

match_nolit_loop_encodeBlockAsm:
	MOVL AX, DX
	MOVL 24(SP), DX
	SUBL AX, DX
	MOVL DX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, R9
	MOVL AX, SI
	SUBL 16(SP), SI
	XORQ R11, R11
	CMPQ SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm

matchlen_loopback_match_nolit_encodeBlockAsm:
	MOVQ  (CX)(R11*1), R10
	XORQ  (CX)(R11*1), R10
	TESTQ R10, R10
	JZ    matchlen_loop_match_nolit_encodeBlockAsm
	BSFQ  R10, R10
	SARQ  $0x03, R10
	LEAQ  (R11)(R10*1), R11
	JMP   match_nolit_end_encodeBlockAsm

matchlen_loop_match_nolit_encodeBlockAsm:
	LEAQ -8(SI), SI
	LEAQ 8(R11), R11
	CMPQ SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm

matchlen_single_match_nolit_encodeBlockAsm:
	TESTQ SI, SI
	JZ    match_nolit_end_encodeBlockAsm

matchlen_single_loopback_match_nolit_encodeBlockAsm:
	MOVB (CX)(R11*1), R10
	CMPB (CX)(R11*1), R10
	JNE  match_nolit_end_encodeBlockAsm
	LEAQ 1(R11), R11
	DECQ SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm

match_nolit_end_encodeBlockAsm:
	MOVL 24(SP), DI
	ADDQ $0x04, R11
	MOVQ dst_base+0(FP), R10
	CMPL DI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm
	CMPL R11, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm
	MOVB $0xff, (R10)
	MOVD DI, 1(R10)
	LEAQ -64(R11), R11
	ADDQ $0x05, R10
	CMPL R11, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm

emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm_emit_copy
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm_emit_copy
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm_emit_copy
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm_emit_copy
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy

repeat_five_match_nolit_encodeBlockAsm_emit_copy:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_four_match_nolit_encodeBlockAsm_emit_copy:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_three_match_nolit_encodeBlockAsm_emit_copy:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_match_nolit_encodeBlockAsm_emit_copy:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

four_bytes_remain_match_nolit_encodeBlockAsm:
	TESTL R11, R11
	JZ    match_nolit_emitcopy_end_encodeBlockAsm
	MOVB  $0x03, R8
	LEAQ  -4(R8)(R11*4), R11
	MOVB  R11, (R10)
	MOVD  DI, 1(R10)
	ADDQ  $0x05, R10
	JMP   match_nolit_emitcopy_end_encodeBlockAsm

two_byte_offset_match_nolit_encodeBlockAsm:
	CMPL R11, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm
	MOVB $0xee, (R10)
	MOVW DI, 1(R10)
	LEAQ -60(R11), R11
	ADDQ $0x03, R10

emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy_short:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm_emit_copy_short
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm_emit_copy_short:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_four_match_nolit_encodeBlockAsm_emit_copy_short:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_three_match_nolit_encodeBlockAsm_emit_copy_short:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_match_nolit_encodeBlockAsm_emit_copy_short:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

two_byte_offset_short_match_nolit_encodeBlockAsm:
	CMPL R11, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm
	CMPL DI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm
	MOVB $0x01, R8
	LEAQ -16(R8)(R11*4), R11
	MOVB DI, 1(R10)
	SHRL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

emit_copy_three_match_nolit_encodeBlockAsm:
	MOVB $0x02, R8
	LEAQ -4(R8)(R11*4), R11
	MOVB R11, (R10)
	MOVW DI, 1(R10)
	ADDQ $0x03, R10

match_nolit_emitcopy_end_encodeBlockAsm:
	MOVQ R10, dst_base+0(FP)
	ADDL R11, AX
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm
	CMPQ R10, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm:
	MOVQ  -2(CX)(AX*1), R10
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	SHRQ  $0x10, R10
	MOVQ  R10, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x30, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x30, R13
	MOVL  32(SP)(R12*1), DX
	MOVL  32(SP)(R13*1), DX
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	MOVL  AX, 32(SP)(R13*1)
	CMPL  (CX), R10
	JEQ   match_nolit_loop_encodeBlockAsm
	INCL  AX
	JMP   search_loop_encodeBlockAsm

emit_remainder_encodeBlockAsm:
	MOVL 20(SP), DX
	SUBQ src_len+32(FP), DX
	MOVQ dst_base+0(FP), AX
	LEAQ (AX)(DX*1), AX
	CMPQ AX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm:
	MOVQ src_len+32(FP), AX
	CMPL 20(SP), AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm
	MOVL 20(SP), R8
	MOVQ AX, DX
	LEAQ (CX)(R8*1), CX
	SUBQ DX, R8
	MOVQ dst_base+0(FP), DX
	MOVL AX, 20(SP)
	MOVQ R8, AX
	SUBL $0x01, AX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm
	CMPL AX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm
	CMPL AX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm
	CMPL AX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm
	CMPL AX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm
	MOVB $0xfc, (DX)
	MOVL AX, 1(DX)
	ADDQ $0x05, DX
	JMP  memmove_emit_remainder_encodeBlockAsm

four_bytes_emit_remainder_encodeBlockAsm:
	MOVQ AX, BX
	SHRL $0x10, BX
	MOVB $0xf8, (DX)
	MOVW AX, 1(DX)
	MOVB BL, 3(DX)
	ADDQ $0x04, DX
	JMP  memmove_emit_remainder_encodeBlockAsm

three_bytes_emit_remainder_encodeBlockAsm:
	MOVB $0xf4, (DX)
	MOVW AX, 1(DX)
	ADDQ $0x03, DX
	JMP  memmove_emit_remainder_encodeBlockAsm

two_bytes_emit_remainder_encodeBlockAsm:
	MOVB $0xf0, (DX)
	MOVB AL, 1(DX)
	ADDQ $0x02, DX
	JMP  memmove_emit_remainder_encodeBlockAsm

one_byte_emit_remainder_encodeBlockAsm:
	SHLB $0x02, AL
	MOVB AL, (DX)
	ADDQ $0x01, DX

memmove_emit_remainder_encodeBlockAsm:
	LEAQ (DX)(R8*1), AX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_tail:
	TESTQ R8, R8
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm
	CMPQ  R8, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_1or2
	CMPQ  R8, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_4
	CMPQ  R8, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_8
	CMPQ  R8, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_9through16
	CMPQ  R8, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_17through32
	CMPQ  R8, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_33through64
	CMPQ  R8, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_65through128
	CMPQ  R8, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_1or2:
	MOVB (CX), AL
	MOVB -1(CX)(R8*1), CL
	MOVB AL, (DX)
	MOVB CL, -1(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_4:
	MOVL (CX), AX
	MOVL AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_3:
	MOVW (CX), AX
	MOVB 2(CX), CL
	MOVW AX, (DX)
	MOVB CL, 2(DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_5through7:
	MOVL (CX), AX
	MOVL -4(CX)(R8*1), CX
	MOVL AX, (DX)
	MOVL CX, -4(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_8:
	MOVQ (CX), AX
	MOVQ AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_9through16:
	MOVQ (CX), AX
	MOVQ -8(CX)(R8*1), CX
	MOVQ AX, (DX)
	MOVQ CX, -8(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(R8*1), X1
	MOVOU X0, (DX)
	MOVOU X1, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(R8*1), X2
	MOVOU -16(CX)(R8*1), X3
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, -32(DX)(R8*1)
	MOVOU X3, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(R8*1), X8
	MOVOU -112(CX)(R8*1), X9
	MOVOU -96(CX)(R8*1), X10
	MOVOU -80(CX)(R8*1), X11
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, -128(DX)(R8*1)
	MOVOU X9, -112(DX)(R8*1)
	MOVOU X10, -96(DX)(R8*1)
	MOVOU X11, -80(DX)(R8*1)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_256through2048:
	LEAQ  -256(R8), R8
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, 128(DX)
	MOVOU X9, 144(DX)
	MOVOU X10, 160(DX)
	MOVOU X11, 176(DX)
	MOVOU X12, 192(DX)
	MOVOU X13, 208(DX)
	MOVOU X14, 224(DX)
	MOVOU X15, 240(DX)
	CMPQ  R8, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(DX), DX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_tail
	MOVQ  AX, DX

emit_literal_done_emit_remainder_encodeBlockAsm:
	MOVQ DX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm14B(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm14B(SB), $16416-56
	MOVQ $0x00000080, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm14B:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm14B
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R9
	SHRQ  $0x05, AX
	SUBL  CX, AX
	MOVL  R9, 16(SP)
	MOVQ  dst_base+0(FP), CX
	MOVQ  CX, 8(SP)
	LEAQ  (CX)(AX*1), AX
	MOVQ  AX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm14B:
	MOVQ  (CX)(AX*1), R10
	MOVL  20(SP), DX
	SUBL  AX, DX
	SHRL  $0x05, DX
	LEAQ  4(AX)(DX*1), R9
	MOVL  16(SP), DX
	CMPL  R9, DX
	JGT   emit_remainder_encodeBlockAsm14B
	MOVL  R9, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	MOVQ  R10, R13
	SHRQ  $0x08, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x32, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x32, R13
	MOVL  32(SP)(R12*1), R9
	MOVL  32(SP)(R13*1), DX
	MOVL  AX, 32(SP)(R12*1)
	MOVL  AX, BX
	DECL  BX
	MOVL  BX, 32(SP)(R13*1)
	MOVQ  R10, R12
	SHRQ  $0x10, R12
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x32, R12
	CMPL  (CX)(R9*1), R10
	JEQ   candidate_match_encodeBlockAsm14B
	SHRQ  $0x08, R10
	MOVL  32(SP)(R12*1), R9
	CMPL  (CX)(DX*1), R10
	JEQ   candidate2_match_encodeBlockAsm14B
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	SHRQ  $0x08, R10
	CMPL  (CX)(R9*1), R10
	JEQ   candidate3_match_encodeBlockAsm14B
	MOVL  28(SP), AX
	JMP   search_loop_encodeBlockAsm14B

candidate3_match_encodeBlockAsm14B:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm14B

candidate2_match_encodeBlockAsm14B:
	LEAQ -2(AX), R9
	MOVL R9, 32(SP)(R12*1)
	INCL AX
	MOVL DX, R9

candidate_match_encodeBlockAsm14B:
	MOVL  20(SP), DX
	TESTL R9, R9
	JZ    match_extend_back_end_encodeBlockAsm14B

match_extend_back_loop_encodeBlockAsm14B:
	CMPL AX, DX
	JG   match_extend_back_end_encodeBlockAsm14B
	MOVB -1(CX)(R9*1), BL
	MOVB -1(CX)(AX*1), BP
	CMPB BL, BP
	JNE  match_extend_back_end_encodeBlockAsm14B
	LEAL -1(AX), AX
	DECL R9
	JZ   match_extend_back_end_encodeBlockAsm14B
	JMP  match_extend_back_loop_encodeBlockAsm14B

match_extend_back_end_encodeBlockAsm14B:
	MOVL 20(SP), BX
	SUBL AX, BX
	LEAQ dst_base+0(FP)(BX*1), BX
	CMPQ BX, (SP)
	JL   match_dst_size_check_encodeBlockAsm14B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm14B:
	MOVL R9, DX
	CMPL 20(SP), DX
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm14B
	MOVL 20(SP), BP
	MOVQ DX, R10
	LEAQ (CX)(BP*1), R11
	SUBQ R10, BP
	MOVQ dst_base+0(FP), R10
	MOVL DX, 20(SP)
	MOVQ BP, R12
	SUBL $0x01, R12
	JC   emit_literal_done_match_emit_encodeBlockAsm14B
	CMPL R12, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm14B
	CMPL R12, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm14B
	CMPL R12, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm14B
	CMPL R12, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm14B
	MOVB $0xfc, (R10)
	MOVL R12, 1(R10)
	ADDQ $0x05, R10
	JMP  memmove_match_emit_encodeBlockAsm14B

four_bytes_match_emit_encodeBlockAsm14B:
	MOVQ R12, R13
	SHRL $0x10, R13
	MOVB $0xf8, (R10)
	MOVW R12, 1(R10)
	MOVB R13, 3(R10)
	ADDQ $0x04, R10
	JMP  memmove_match_emit_encodeBlockAsm14B

three_bytes_match_emit_encodeBlockAsm14B:
	MOVB $0xf4, (R10)
	MOVW R12, 1(R10)
	ADDQ $0x03, R10
	JMP  memmove_match_emit_encodeBlockAsm14B

two_bytes_match_emit_encodeBlockAsm14B:
	MOVB $0xf0, (R10)
	MOVB R12, 1(R10)
	ADDQ $0x02, R10
	JMP  memmove_match_emit_encodeBlockAsm14B

one_byte_match_emit_encodeBlockAsm14B:
	SHLB $0x02, R12
	MOVB R12, (R10)
	ADDQ $0x01, R10

memmove_match_emit_encodeBlockAsm14B:
	LEAQ (R10)(BP*1), R12
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_tail:
	TESTQ BP, BP
	JEQ   emit_literal_done_match_emit_encodeBlockAsm14B
	CMPQ  BP, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_1or2
	CMPQ  BP, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_4
	CMPQ  BP, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_8
	CMPQ  BP, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_9through16
	CMPQ  BP, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_17through32
	CMPQ  BP, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_33through64
	CMPQ  BP, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_65through128
	CMPQ  BP, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_1or2:
	MOVB (R11), R12
	MOVB -1(R11)(BP*1), R11
	MOVB R12, (R10)
	MOVB R11, -1(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_4:
	MOVL (R11), R12
	MOVL R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_3:
	MOVW (R11), R12
	MOVB 2(R11), R11
	MOVW R12, (R10)
	MOVB R11, 2(R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_5through7:
	MOVL (R11), R12
	MOVL -4(R11)(BP*1), R11
	MOVL R12, (R10)
	MOVL R11, -4(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_8:
	MOVQ (R11), R12
	MOVQ R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_9through16:
	MOVQ (R11), R12
	MOVQ -8(R11)(BP*1), R11
	MOVQ R12, (R10)
	MOVQ R11, -8(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_17through32:
	MOVOU (R11), X0
	MOVOU -16(R11)(BP*1), X1
	MOVOU X0, (R10)
	MOVOU X1, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_33through64:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU -32(R11)(BP*1), X2
	MOVOU -16(R11)(BP*1), X3
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, -32(R10)(BP*1)
	MOVOU X3, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_65through128:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_129through256:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU -128(R11)(BP*1), X8
	MOVOU -112(R11)(BP*1), X9
	MOVOU -96(R11)(BP*1), X10
	MOVOU -80(R11)(BP*1), X11
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, -128(R10)(BP*1)
	MOVOU X9, -112(R10)(BP*1)
	MOVOU X10, -96(R10)(BP*1)
	MOVOU X11, -80(R10)(BP*1)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_256through2048:
	LEAQ  -256(BP), BP
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU 128(R11), X8
	MOVOU 144(R11), X9
	MOVOU 160(R11), X10
	MOVOU 176(R11), X11
	MOVOU 192(R11), X12
	MOVOU 208(R11), X13
	MOVOU 224(R11), X14
	MOVOU 240(R11), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, 128(R10)
	MOVOU X9, 144(R10)
	MOVOU X10, 160(R10)
	MOVOU X11, 176(R10)
	MOVOU X12, 192(R10)
	MOVOU X13, 208(R10)
	MOVOU X14, 224(R10)
	MOVOU X15, 240(R10)
	CMPQ  BP, $0x00000100
	LEAQ  256(R11), R11
	LEAQ  256(R10), R10
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_tail
	MOVQ  R12, R10

emit_literal_done_match_emit_encodeBlockAsm14B:
	MOVQ R10, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm14B:
	NOP

match_nolit_loop_encodeBlockAsm14B:
	MOVL AX, DX
	MOVL 24(SP), DX
	SUBL AX, DX
	MOVL DX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, R9
	MOVL AX, SI
	SUBL 16(SP), SI
	XORQ R11, R11
	CMPQ SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm14B

matchlen_loopback_match_nolit_encodeBlockAsm14B:
	MOVQ  (CX)(R11*1), R10
	XORQ  (CX)(R11*1), R10
	TESTQ R10, R10
	JZ    matchlen_loop_match_nolit_encodeBlockAsm14B
	BSFQ  R10, R10
	SARQ  $0x03, R10
	LEAQ  (R11)(R10*1), R11
	JMP   match_nolit_end_encodeBlockAsm14B

matchlen_loop_match_nolit_encodeBlockAsm14B:
	LEAQ -8(SI), SI
	LEAQ 8(R11), R11
	CMPQ SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm14B

matchlen_single_match_nolit_encodeBlockAsm14B:
	TESTQ SI, SI
	JZ    match_nolit_end_encodeBlockAsm14B

matchlen_single_loopback_match_nolit_encodeBlockAsm14B:
	MOVB (CX)(R11*1), R10
	CMPB (CX)(R11*1), R10
	JNE  match_nolit_end_encodeBlockAsm14B
	LEAQ 1(R11), R11
	DECQ SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm14B

match_nolit_end_encodeBlockAsm14B:
	MOVL 24(SP), DI
	ADDQ $0x04, R11
	MOVQ dst_base+0(FP), R10
	CMPL DI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm14B
	CMPL R11, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm14B
	MOVB $0xff, (R10)
	MOVD DI, 1(R10)
	LEAQ -64(R11), R11
	ADDQ $0x05, R10
	CMPL R11, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm14B

emit_repeat_again_match_nolit_encodeBlockAsm14B_emit_copy:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm14B_emit_copy
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm14B_emit_copy
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm14B_emit_copy
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm14B_emit_copy
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm14B_emit_copy

repeat_five_match_nolit_encodeBlockAsm14B_emit_copy:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_four_match_nolit_encodeBlockAsm14B_emit_copy:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_three_match_nolit_encodeBlockAsm14B_emit_copy:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_two_match_nolit_encodeBlockAsm14B_emit_copy:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

four_bytes_remain_match_nolit_encodeBlockAsm14B:
	TESTL R11, R11
	JZ    match_nolit_emitcopy_end_encodeBlockAsm14B
	MOVB  $0x03, R8
	LEAQ  -4(R8)(R11*4), R11
	MOVB  R11, (R10)
	MOVD  DI, 1(R10)
	ADDQ  $0x05, R10
	JMP   match_nolit_emitcopy_end_encodeBlockAsm14B

two_byte_offset_match_nolit_encodeBlockAsm14B:
	CMPL R11, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm14B
	MOVB $0xee, (R10)
	MOVW DI, 1(R10)
	LEAQ -60(R11), R11
	ADDQ $0x03, R10

emit_repeat_again_match_nolit_encodeBlockAsm14B_emit_copy_short:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm14B_emit_copy_short
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy_short
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy_short:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm14B_emit_copy_short
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm14B_emit_copy_short
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm14B_emit_copy_short
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm14B_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm14B_emit_copy_short:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_four_match_nolit_encodeBlockAsm14B_emit_copy_short:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_three_match_nolit_encodeBlockAsm14B_emit_copy_short:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_two_match_nolit_encodeBlockAsm14B_emit_copy_short:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy_short:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

two_byte_offset_short_match_nolit_encodeBlockAsm14B:
	CMPL R11, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm14B
	CMPL DI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm14B
	MOVB $0x01, R8
	LEAQ -16(R8)(R11*4), R11
	MOVB DI, 1(R10)
	SHRL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

emit_copy_three_match_nolit_encodeBlockAsm14B:
	MOVB $0x02, R8
	LEAQ -4(R8)(R11*4), R11
	MOVB R11, (R10)
	MOVW DI, 1(R10)
	ADDQ $0x03, R10

match_nolit_emitcopy_end_encodeBlockAsm14B:
	MOVQ R10, dst_base+0(FP)
	ADDL R11, AX
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm14B
	CMPQ R10, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm14B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm14B:
	MOVQ  -2(CX)(AX*1), R10
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	SHRQ  $0x10, R10
	MOVQ  R10, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x32, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x32, R13
	MOVL  32(SP)(R12*1), DX
	MOVL  32(SP)(R13*1), DX
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	MOVL  AX, 32(SP)(R13*1)
	CMPL  (CX), R10
	JEQ   match_nolit_loop_encodeBlockAsm14B
	INCL  AX
	JMP   search_loop_encodeBlockAsm14B

emit_remainder_encodeBlockAsm14B:
	MOVL 20(SP), DX
	SUBQ src_len+32(FP), DX
	MOVQ dst_base+0(FP), AX
	LEAQ (AX)(DX*1), AX
	CMPQ AX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm14B
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm14B:
	MOVQ src_len+32(FP), AX
	CMPL 20(SP), AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm14B
	MOVL 20(SP), R8
	MOVQ AX, DX
	LEAQ (CX)(R8*1), CX
	SUBQ DX, R8
	MOVQ dst_base+0(FP), DX
	MOVL AX, 20(SP)
	MOVQ R8, AX
	SUBL $0x01, AX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm14B
	CMPL AX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm14B
	CMPL AX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm14B
	CMPL AX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm14B
	CMPL AX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm14B
	MOVB $0xfc, (DX)
	MOVL AX, 1(DX)
	ADDQ $0x05, DX
	JMP  memmove_emit_remainder_encodeBlockAsm14B

four_bytes_emit_remainder_encodeBlockAsm14B:
	MOVQ AX, BX
	SHRL $0x10, BX
	MOVB $0xf8, (DX)
	MOVW AX, 1(DX)
	MOVB BL, 3(DX)
	ADDQ $0x04, DX
	JMP  memmove_emit_remainder_encodeBlockAsm14B

three_bytes_emit_remainder_encodeBlockAsm14B:
	MOVB $0xf4, (DX)
	MOVW AX, 1(DX)
	ADDQ $0x03, DX
	JMP  memmove_emit_remainder_encodeBlockAsm14B

two_bytes_emit_remainder_encodeBlockAsm14B:
	MOVB $0xf0, (DX)
	MOVB AL, 1(DX)
	ADDQ $0x02, DX
	JMP  memmove_emit_remainder_encodeBlockAsm14B

one_byte_emit_remainder_encodeBlockAsm14B:
	SHLB $0x02, AL
	MOVB AL, (DX)
	ADDQ $0x01, DX

memmove_emit_remainder_encodeBlockAsm14B:
	LEAQ (DX)(R8*1), AX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_tail:
	TESTQ R8, R8
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm14B
	CMPQ  R8, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_1or2
	CMPQ  R8, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_4
	CMPQ  R8, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_8
	CMPQ  R8, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_9through16
	CMPQ  R8, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_17through32
	CMPQ  R8, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_33through64
	CMPQ  R8, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_65through128
	CMPQ  R8, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_1or2:
	MOVB (CX), AL
	MOVB -1(CX)(R8*1), CL
	MOVB AL, (DX)
	MOVB CL, -1(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_4:
	MOVL (CX), AX
	MOVL AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_3:
	MOVW (CX), AX
	MOVB 2(CX), CL
	MOVW AX, (DX)
	MOVB CL, 2(DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_5through7:
	MOVL (CX), AX
	MOVL -4(CX)(R8*1), CX
	MOVL AX, (DX)
	MOVL CX, -4(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_8:
	MOVQ (CX), AX
	MOVQ AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_9through16:
	MOVQ (CX), AX
	MOVQ -8(CX)(R8*1), CX
	MOVQ AX, (DX)
	MOVQ CX, -8(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(R8*1), X1
	MOVOU X0, (DX)
	MOVOU X1, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(R8*1), X2
	MOVOU -16(CX)(R8*1), X3
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, -32(DX)(R8*1)
	MOVOU X3, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(R8*1), X8
	MOVOU -112(CX)(R8*1), X9
	MOVOU -96(CX)(R8*1), X10
	MOVOU -80(CX)(R8*1), X11
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, -128(DX)(R8*1)
	MOVOU X9, -112(DX)(R8*1)
	MOVOU X10, -96(DX)(R8*1)
	MOVOU X11, -80(DX)(R8*1)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_256through2048:
	LEAQ  -256(R8), R8
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, 128(DX)
	MOVOU X9, 144(DX)
	MOVOU X10, 160(DX)
	MOVOU X11, 176(DX)
	MOVOU X12, 192(DX)
	MOVOU X13, 208(DX)
	MOVOU X14, 224(DX)
	MOVOU X15, 240(DX)
	CMPQ  R8, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(DX), DX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_tail
	MOVQ  AX, DX

emit_literal_done_emit_remainder_encodeBlockAsm14B:
	MOVQ DX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm14B:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm12B(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm12B(SB), $4128-56
	MOVQ $0x00000020, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm12B:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm12B
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R9
	SHRQ  $0x05, AX
	SUBL  CX, AX
	MOVL  R9, 16(SP)
	MOVQ  dst_base+0(FP), CX
	MOVQ  CX, 8(SP)
	LEAQ  (CX)(AX*1), AX
	MOVQ  AX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm12B:
	MOVQ  (CX)(AX*1), R10
	MOVL  20(SP), DX
	SUBL  AX, DX
	SHRL  $0x04, DX
	LEAQ  4(AX)(DX*1), R9
	MOVL  16(SP), DX
	CMPL  R9, DX
	JGT   emit_remainder_encodeBlockAsm12B
	MOVL  R9, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	MOVQ  R10, R13
	SHRQ  $0x08, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x34, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x34, R13
	MOVL  32(SP)(R12*1), R9
	MOVL  32(SP)(R13*1), DX
	MOVL  AX, 32(SP)(R12*1)
	MOVL  AX, BX
	DECL  BX
	MOVL  BX, 32(SP)(R13*1)
	MOVQ  R10, R12
	SHRQ  $0x10, R12
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x34, R12
	CMPL  (CX)(R9*1), R10
	JEQ   candidate_match_encodeBlockAsm12B
	SHRQ  $0x08, R10
	MOVL  32(SP)(R12*1), R9
	CMPL  (CX)(DX*1), R10
	JEQ   candidate2_match_encodeBlockAsm12B
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	SHRQ  $0x08, R10
	CMPL  (CX)(R9*1), R10
	JEQ   candidate3_match_encodeBlockAsm12B
	MOVL  28(SP), AX
	JMP   search_loop_encodeBlockAsm12B

candidate3_match_encodeBlockAsm12B:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm12B

candidate2_match_encodeBlockAsm12B:
	LEAQ -2(AX), R9
	MOVL R9, 32(SP)(R12*1)
	INCL AX
	MOVL DX, R9

candidate_match_encodeBlockAsm12B:
	MOVL  20(SP), DX
	TESTL R9, R9
	JZ    match_extend_back_end_encodeBlockAsm12B

match_extend_back_loop_encodeBlockAsm12B:
	CMPL AX, DX
	JG   match_extend_back_end_encodeBlockAsm12B
	MOVB -1(CX)(R9*1), BL
	MOVB -1(CX)(AX*1), BP
	CMPB BL, BP
	JNE  match_extend_back_end_encodeBlockAsm12B
	LEAL -1(AX), AX
	DECL R9
	JZ   match_extend_back_end_encodeBlockAsm12B
	JMP  match_extend_back_loop_encodeBlockAsm12B

match_extend_back_end_encodeBlockAsm12B:
	MOVL 20(SP), BX
	SUBL AX, BX
	LEAQ dst_base+0(FP)(BX*1), BX
	CMPQ BX, (SP)
	JL   match_dst_size_check_encodeBlockAsm12B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm12B:
	MOVL R9, DX
	CMPL 20(SP), DX
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm12B
	MOVL 20(SP), BP
	MOVQ DX, R10
	LEAQ (CX)(BP*1), R11
	SUBQ R10, BP
	MOVQ dst_base+0(FP), R10
	MOVL DX, 20(SP)
	MOVQ BP, R12
	SUBL $0x01, R12
	JC   emit_literal_done_match_emit_encodeBlockAsm12B
	CMPL R12, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm12B
	CMPL R12, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm12B
	CMPL R12, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm12B
	CMPL R12, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm12B
	MOVB $0xfc, (R10)
	MOVL R12, 1(R10)
	ADDQ $0x05, R10
	JMP  memmove_match_emit_encodeBlockAsm12B

four_bytes_match_emit_encodeBlockAsm12B:
	MOVQ R12, R13
	SHRL $0x10, R13
	MOVB $0xf8, (R10)
	MOVW R12, 1(R10)
	MOVB R13, 3(R10)
	ADDQ $0x04, R10
	JMP  memmove_match_emit_encodeBlockAsm12B

three_bytes_match_emit_encodeBlockAsm12B:
	MOVB $0xf4, (R10)
	MOVW R12, 1(R10)
	ADDQ $0x03, R10
	JMP  memmove_match_emit_encodeBlockAsm12B

two_bytes_match_emit_encodeBlockAsm12B:
	MOVB $0xf0, (R10)
	MOVB R12, 1(R10)
	ADDQ $0x02, R10
	JMP  memmove_match_emit_encodeBlockAsm12B

one_byte_match_emit_encodeBlockAsm12B:
	SHLB $0x02, R12
	MOVB R12, (R10)
	ADDQ $0x01, R10

memmove_match_emit_encodeBlockAsm12B:
	LEAQ (R10)(BP*1), R12
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_tail:
	TESTQ BP, BP
	JEQ   emit_literal_done_match_emit_encodeBlockAsm12B
	CMPQ  BP, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_1or2
	CMPQ  BP, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_4
	CMPQ  BP, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_8
	CMPQ  BP, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_9through16
	CMPQ  BP, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_17through32
	CMPQ  BP, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_33through64
	CMPQ  BP, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_65through128
	CMPQ  BP, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_1or2:
	MOVB (R11), R12
	MOVB -1(R11)(BP*1), R11
	MOVB R12, (R10)
	MOVB R11, -1(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_4:
	MOVL (R11), R12
	MOVL R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_3:
	MOVW (R11), R12
	MOVB 2(R11), R11
	MOVW R12, (R10)
	MOVB R11, 2(R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_5through7:
	MOVL (R11), R12
	MOVL -4(R11)(BP*1), R11
	MOVL R12, (R10)
	MOVL R11, -4(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_8:
	MOVQ (R11), R12
	MOVQ R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_9through16:
	MOVQ (R11), R12
	MOVQ -8(R11)(BP*1), R11
	MOVQ R12, (R10)
	MOVQ R11, -8(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_17through32:
	MOVOU (R11), X0
	MOVOU -16(R11)(BP*1), X1
	MOVOU X0, (R10)
	MOVOU X1, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_33through64:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU -32(R11)(BP*1), X2
	MOVOU -16(R11)(BP*1), X3
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, -32(R10)(BP*1)
	MOVOU X3, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_65through128:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_129through256:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU -128(R11)(BP*1), X8
	MOVOU -112(R11)(BP*1), X9
	MOVOU -96(R11)(BP*1), X10
	MOVOU -80(R11)(BP*1), X11
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, -128(R10)(BP*1)
	MOVOU X9, -112(R10)(BP*1)
	MOVOU X10, -96(R10)(BP*1)
	MOVOU X11, -80(R10)(BP*1)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_256through2048:
	LEAQ  -256(BP), BP
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU 128(R11), X8
	MOVOU 144(R11), X9
	MOVOU 160(R11), X10
	MOVOU 176(R11), X11
	MOVOU 192(R11), X12
	MOVOU 208(R11), X13
	MOVOU 224(R11), X14
	MOVOU 240(R11), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, 128(R10)
	MOVOU X9, 144(R10)
	MOVOU X10, 160(R10)
	MOVOU X11, 176(R10)
	MOVOU X12, 192(R10)
	MOVOU X13, 208(R10)
	MOVOU X14, 224(R10)
	MOVOU X15, 240(R10)
	CMPQ  BP, $0x00000100
	LEAQ  256(R11), R11
	LEAQ  256(R10), R10
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_tail
	MOVQ  R12, R10

emit_literal_done_match_emit_encodeBlockAsm12B:
	MOVQ R10, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm12B:
	NOP

match_nolit_loop_encodeBlockAsm12B:
	MOVL AX, DX
	MOVL 24(SP), DX
	SUBL AX, DX
	MOVL DX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, R9
	MOVL AX, SI
	SUBL 16(SP), SI
	XORQ R11, R11
	CMPQ SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm12B

matchlen_loopback_match_nolit_encodeBlockAsm12B:
	MOVQ  (CX)(R11*1), R10
	XORQ  (CX)(R11*1), R10
	TESTQ R10, R10
	JZ    matchlen_loop_match_nolit_encodeBlockAsm12B
	BSFQ  R10, R10
	SARQ  $0x03, R10
	LEAQ  (R11)(R10*1), R11
	JMP   match_nolit_end_encodeBlockAsm12B

matchlen_loop_match_nolit_encodeBlockAsm12B:
	LEAQ -8(SI), SI
	LEAQ 8(R11), R11
	CMPQ SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm12B

matchlen_single_match_nolit_encodeBlockAsm12B:
	TESTQ SI, SI
	JZ    match_nolit_end_encodeBlockAsm12B

matchlen_single_loopback_match_nolit_encodeBlockAsm12B:
	MOVB (CX)(R11*1), R10
	CMPB (CX)(R11*1), R10
	JNE  match_nolit_end_encodeBlockAsm12B
	LEAQ 1(R11), R11
	DECQ SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm12B

match_nolit_end_encodeBlockAsm12B:
	MOVL 24(SP), DI
	ADDQ $0x04, R11
	MOVQ dst_base+0(FP), R10
	CMPL DI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm12B
	CMPL R11, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm12B
	MOVB $0xff, (R10)
	MOVD DI, 1(R10)
	LEAQ -64(R11), R11
	ADDQ $0x05, R10
	CMPL R11, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm12B

emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12B_emit_copy
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy

repeat_five_match_nolit_encodeBlockAsm12B_emit_copy:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_four_match_nolit_encodeBlockAsm12B_emit_copy:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_three_match_nolit_encodeBlockAsm12B_emit_copy:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_match_nolit_encodeBlockAsm12B_emit_copy:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

four_bytes_remain_match_nolit_encodeBlockAsm12B:
	TESTL R11, R11
	JZ    match_nolit_emitcopy_end_encodeBlockAsm12B
	MOVB  $0x03, R8
	LEAQ  -4(R8)(R11*4), R11
	MOVB  R11, (R10)
	MOVD  DI, 1(R10)
	ADDQ  $0x05, R10
	JMP   match_nolit_emitcopy_end_encodeBlockAsm12B

two_byte_offset_match_nolit_encodeBlockAsm12B:
	CMPL R11, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm12B
	MOVB $0xee, (R10)
	MOVW DI, 1(R10)
	LEAQ -60(R11), R11
	ADDQ $0x03, R10

emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy_short:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12B_emit_copy_short
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm12B_emit_copy_short:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_four_match_nolit_encodeBlockAsm12B_emit_copy_short:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_three_match_nolit_encodeBlockAsm12B_emit_copy_short:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_match_nolit_encodeBlockAsm12B_emit_copy_short:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

two_byte_offset_short_match_nolit_encodeBlockAsm12B:
	CMPL R11, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12B
	CMPL DI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12B
	MOVB $0x01, R8
	LEAQ -16(R8)(R11*4), R11
	MOVB DI, 1(R10)
	SHRL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

emit_copy_three_match_nolit_encodeBlockAsm12B:
	MOVB $0x02, R8
	LEAQ -4(R8)(R11*4), R11
	MOVB R11, (R10)
	MOVW DI, 1(R10)
	ADDQ $0x03, R10

match_nolit_emitcopy_end_encodeBlockAsm12B:
	MOVQ R10, dst_base+0(FP)
	ADDL R11, AX
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm12B
	CMPQ R10, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm12B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm12B:
	MOVQ  -2(CX)(AX*1), R10
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	SHRQ  $0x10, R10
	MOVQ  R10, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x34, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x34, R13
	MOVL  32(SP)(R12*1), DX
	MOVL  32(SP)(R13*1), DX
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	MOVL  AX, 32(SP)(R13*1)
	CMPL  (CX), R10
	JEQ   match_nolit_loop_encodeBlockAsm12B
	INCL  AX
	JMP   search_loop_encodeBlockAsm12B

emit_remainder_encodeBlockAsm12B:
	MOVL 20(SP), DX
	SUBQ src_len+32(FP), DX
	MOVQ dst_base+0(FP), AX
	LEAQ (AX)(DX*1), AX
	CMPQ AX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm12B
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm12B:
	MOVQ src_len+32(FP), AX
	CMPL 20(SP), AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm12B
	MOVL 20(SP), R8
	MOVQ AX, DX
	LEAQ (CX)(R8*1), CX
	SUBQ DX, R8
	MOVQ dst_base+0(FP), DX
	MOVL AX, 20(SP)
	MOVQ R8, AX
	SUBL $0x01, AX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm12B
	CMPL AX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm12B
	CMPL AX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm12B
	CMPL AX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm12B
	CMPL AX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm12B
	MOVB $0xfc, (DX)
	MOVL AX, 1(DX)
	ADDQ $0x05, DX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

four_bytes_emit_remainder_encodeBlockAsm12B:
	MOVQ AX, BX
	SHRL $0x10, BX
	MOVB $0xf8, (DX)
	MOVW AX, 1(DX)
	MOVB BL, 3(DX)
	ADDQ $0x04, DX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

three_bytes_emit_remainder_encodeBlockAsm12B:
	MOVB $0xf4, (DX)
	MOVW AX, 1(DX)
	ADDQ $0x03, DX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

two_bytes_emit_remainder_encodeBlockAsm12B:
	MOVB $0xf0, (DX)
	MOVB AL, 1(DX)
	ADDQ $0x02, DX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

one_byte_emit_remainder_encodeBlockAsm12B:
	SHLB $0x02, AL
	MOVB AL, (DX)
	ADDQ $0x01, DX

memmove_emit_remainder_encodeBlockAsm12B:
	LEAQ (DX)(R8*1), AX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_tail:
	TESTQ R8, R8
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm12B
	CMPQ  R8, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_1or2
	CMPQ  R8, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_4
	CMPQ  R8, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_8
	CMPQ  R8, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_9through16
	CMPQ  R8, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_17through32
	CMPQ  R8, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_33through64
	CMPQ  R8, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_65through128
	CMPQ  R8, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_1or2:
	MOVB (CX), AL
	MOVB -1(CX)(R8*1), CL
	MOVB AL, (DX)
	MOVB CL, -1(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_4:
	MOVL (CX), AX
	MOVL AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_3:
	MOVW (CX), AX
	MOVB 2(CX), CL
	MOVW AX, (DX)
	MOVB CL, 2(DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_5through7:
	MOVL (CX), AX
	MOVL -4(CX)(R8*1), CX
	MOVL AX, (DX)
	MOVL CX, -4(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_8:
	MOVQ (CX), AX
	MOVQ AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_9through16:
	MOVQ (CX), AX
	MOVQ -8(CX)(R8*1), CX
	MOVQ AX, (DX)
	MOVQ CX, -8(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(R8*1), X1
	MOVOU X0, (DX)
	MOVOU X1, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(R8*1), X2
	MOVOU -16(CX)(R8*1), X3
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, -32(DX)(R8*1)
	MOVOU X3, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(R8*1), X8
	MOVOU -112(CX)(R8*1), X9
	MOVOU -96(CX)(R8*1), X10
	MOVOU -80(CX)(R8*1), X11
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, -128(DX)(R8*1)
	MOVOU X9, -112(DX)(R8*1)
	MOVOU X10, -96(DX)(R8*1)
	MOVOU X11, -80(DX)(R8*1)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_256through2048:
	LEAQ  -256(R8), R8
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, 128(DX)
	MOVOU X9, 144(DX)
	MOVOU X10, 160(DX)
	MOVOU X11, 176(DX)
	MOVOU X12, 192(DX)
	MOVOU X13, 208(DX)
	MOVOU X14, 224(DX)
	MOVOU X15, 240(DX)
	CMPQ  R8, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(DX), DX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_tail
	MOVQ  AX, DX

emit_literal_done_emit_remainder_encodeBlockAsm12B:
	MOVQ DX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm12B:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsmAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsmAvx(SB), $65568-56
	MOVQ $0x00000200, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsmAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsmAvx
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R9
	SHRQ  $0x05, AX
	SUBL  CX, AX
	MOVL  R9, 16(SP)
	MOVQ  dst_base+0(FP), CX
	MOVQ  CX, 8(SP)
	LEAQ  (CX)(AX*1), AX
	MOVQ  AX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsmAvx:
	MOVQ  (CX)(AX*1), R10
	MOVL  20(SP), DX
	SUBL  AX, DX
	SHRL  $0x06, DX
	LEAQ  4(AX)(DX*1), R9
	MOVL  16(SP), DX
	CMPL  R9, DX
	JGT   emit_remainder_encodeBlockAsmAvx
	MOVL  R9, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	MOVQ  R10, R13
	SHRQ  $0x08, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x30, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x30, R13
	MOVL  32(SP)(R12*1), R9
	MOVL  32(SP)(R13*1), DX
	MOVL  AX, 32(SP)(R12*1)
	MOVL  AX, BX
	DECL  BX
	MOVL  BX, 32(SP)(R13*1)
	MOVQ  R10, R12
	SHRQ  $0x10, R12
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x30, R12
	CMPL  (CX)(R9*1), R10
	JEQ   candidate_match_encodeBlockAsmAvx
	SHRQ  $0x08, R10
	MOVL  32(SP)(R12*1), R9
	CMPL  (CX)(DX*1), R10
	JEQ   candidate2_match_encodeBlockAsmAvx
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	SHRQ  $0x08, R10
	CMPL  (CX)(R9*1), R10
	JEQ   candidate3_match_encodeBlockAsmAvx
	MOVL  28(SP), AX
	JMP   search_loop_encodeBlockAsmAvx

candidate3_match_encodeBlockAsmAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsmAvx

candidate2_match_encodeBlockAsmAvx:
	LEAQ -2(AX), R9
	MOVL R9, 32(SP)(R12*1)
	INCL AX
	MOVL DX, R9

candidate_match_encodeBlockAsmAvx:
	MOVL  20(SP), DX
	TESTL R9, R9
	JZ    match_extend_back_end_encodeBlockAsmAvx

match_extend_back_loop_encodeBlockAsmAvx:
	CMPL AX, DX
	JG   match_extend_back_end_encodeBlockAsmAvx
	MOVB -1(CX)(R9*1), BL
	MOVB -1(CX)(AX*1), BP
	CMPB BL, BP
	JNE  match_extend_back_end_encodeBlockAsmAvx
	LEAL -1(AX), AX
	DECL R9
	JZ   match_extend_back_end_encodeBlockAsmAvx
	JMP  match_extend_back_loop_encodeBlockAsmAvx

match_extend_back_end_encodeBlockAsmAvx:
	MOVL 20(SP), BX
	SUBL AX, BX
	LEAQ dst_base+0(FP)(BX*1), BX
	CMPQ BX, (SP)
	JL   match_dst_size_check_encodeBlockAsmAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsmAvx:
	MOVL R9, DX
	CMPL 20(SP), DX
	JEQ  emit_literal_skip_match_emit_encodeBlockAsmAvx
	MOVL 20(SP), BP
	MOVQ DX, R10
	LEAQ (CX)(BP*1), R11
	SUBQ R10, BP
	MOVQ dst_base+0(FP), R10
	MOVL DX, 20(SP)
	MOVQ BP, R12
	SUBL $0x01, R12
	JC   emit_literal_done_match_emit_encodeBlockAsmAvx
	CMPL R12, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsmAvx
	CMPL R12, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsmAvx
	CMPL R12, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsmAvx
	CMPL R12, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsmAvx
	MOVB $0xfc, (R10)
	MOVL R12, 1(R10)
	ADDQ $0x05, R10
	JMP  memmove_match_emit_encodeBlockAsmAvx

four_bytes_match_emit_encodeBlockAsmAvx:
	MOVQ R12, R13
	SHRL $0x10, R13
	MOVB $0xf8, (R10)
	MOVW R12, 1(R10)
	MOVB R13, 3(R10)
	ADDQ $0x04, R10
	JMP  memmove_match_emit_encodeBlockAsmAvx

three_bytes_match_emit_encodeBlockAsmAvx:
	MOVB $0xf4, (R10)
	MOVW R12, 1(R10)
	ADDQ $0x03, R10
	JMP  memmove_match_emit_encodeBlockAsmAvx

two_bytes_match_emit_encodeBlockAsmAvx:
	MOVB $0xf0, (R10)
	MOVB R12, 1(R10)
	ADDQ $0x02, R10
	JMP  memmove_match_emit_encodeBlockAsmAvx

one_byte_match_emit_encodeBlockAsmAvx:
	SHLB $0x02, R12
	MOVB R12, (R10)
	ADDQ $0x01, R10

memmove_match_emit_encodeBlockAsmAvx:
	LEAQ (R10)(BP*1), R12
	NOP

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_tail:
	TESTQ BP, BP
	JEQ   emit_literal_done_match_emit_encodeBlockAsmAvx
	CMPQ  BP, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_1or2
	CMPQ  BP, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_4
	CMPQ  BP, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_8
	CMPQ  BP, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_9through16
	CMPQ  BP, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_17through32
	CMPQ  BP, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_33through64
	CMPQ  BP, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_65through128
	CMPQ  BP, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_1or2:
	MOVB (R11), R12
	MOVB -1(R11)(BP*1), R13
	MOVB R12, (R10)
	MOVB R13, -1(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_4:
	MOVL (R11), R12
	MOVL R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_3:
	MOVW (R11), R12
	MOVB 2(R11), R13
	MOVW R12, (R10)
	MOVB R13, 2(R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_5through7:
	MOVL (R11), R12
	MOVL -4(R11)(BP*1), R13
	MOVL R12, (R10)
	MOVL R13, -4(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_8:
	MOVQ (R11), R12
	MOVQ R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_9through16:
	MOVQ (R11), R12
	MOVQ -8(R11)(BP*1), R13
	MOVQ R12, (R10)
	MOVQ R13, -8(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_17through32:
	MOVOU (R11), X0
	MOVOU -16(R11)(BP*1), X1
	MOVOU X0, (R10)
	MOVOU X1, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_33through64:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU -32(R11)(BP*1), X2
	MOVOU -16(R11)(BP*1), X3
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, -32(R10)(BP*1)
	MOVOU X3, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_65through128:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_129through256:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU -128(R11)(BP*1), X8
	MOVOU -112(R11)(BP*1), X9
	MOVOU -96(R11)(BP*1), X10
	MOVOU -80(R11)(BP*1), X11
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, -128(R10)(BP*1)
	MOVOU X9, -112(R10)(BP*1)
	MOVOU X10, -96(R10)(BP*1)
	MOVOU X11, -80(R10)(BP*1)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_256through2048:
	LEAQ  -256(BP), BP
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU 128(R11), X8
	MOVOU 144(R11), X9
	MOVOU 160(R11), X10
	MOVOU 176(R11), X11
	MOVOU 192(R11), X12
	MOVOU 208(R11), X13
	MOVOU 224(R11), X14
	MOVOU 240(R11), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, 128(R10)
	MOVOU X9, 144(R10)
	MOVOU X10, 160(R10)
	MOVOU X11, 176(R10)
	MOVOU X12, 192(R10)
	MOVOU X13, 208(R10)
	MOVOU X14, 224(R10)
	MOVOU X15, 240(R10)
	CMPQ  BP, $0x00000100
	LEAQ  256(R11), R11
	LEAQ  256(R10), R10
	JGE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_avxUnaligned:
	LEAQ    (R11)(BP*1), R13
	MOVQ    R10, R15
	MOVOU   -128(R13), X5
	MOVOU   -112(R13), X6
	MOVQ    $0x00000080, R12
	ANDQ    $0xffffffe0, R10
	ADDQ    $0x20, R10
	MOVOU   -96(R13), X7
	MOVOU   -80(R13), X8
	MOVQ    R10, R14
	SUBQ    R15, R14
	MOVOU   -64(R13), X9
	MOVOU   -48(R13), X10
	SUBQ    R14, BP
	MOVOU   -32(R13), X11
	MOVOU   -16(R13), X12
	VMOVDQU (R11), Y4
	ADDQ    R14, R11
	SUBQ    R12, BP

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_gobble_128_loop:
	VMOVDQU (R11), Y0
	VMOVDQU 32(R11), Y1
	VMOVDQU 64(R11), Y2
	VMOVDQU 96(R11), Y3
	ADDQ    R12, R11
	VMOVDQA Y0, (R10)
	VMOVDQA Y1, 32(R10)
	VMOVDQA Y2, 64(R10)
	VMOVDQA Y3, 96(R10)
	ADDQ    R12, R10
	SUBQ    R12, BP
	JA      emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_gobble_128_loop
	ADDQ    R12, BP
	ADDQ    R10, BP
	VMOVDQU Y4, (R15)
	VZEROUPPER
	MOVOU X5, -128(BP)
	MOVOU X6, -112(BP)
	MOVOU X7, -96(BP)
	MOVOU X8, -80(BP)
	MOVOU X9, -64(BP)
	MOVOU X10, -48(BP)
	MOVOU X11, -32(BP)
	MOVOU X12, -16(BP)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx
	MOVQ  R12, R10

emit_literal_done_match_emit_encodeBlockAsmAvx:
	MOVQ R10, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsmAvx:
	NOP

match_nolit_loop_encodeBlockAsmAvx:
	MOVL AX, DX
	MOVL 24(SP), DX
	SUBL AX, DX
	MOVL DX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, R9
	MOVL AX, SI
	SUBL 16(SP), SI
	XORQ R11, R11
	CMPQ SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsmAvx

matchlen_loopback_match_nolit_encodeBlockAsmAvx:
	MOVQ  (CX)(R11*1), R10
	XORQ  (CX)(R11*1), R10
	TESTQ R10, R10
	JZ    matchlen_loop_match_nolit_encodeBlockAsmAvx
	BSFQ  R10, R10
	SARQ  $0x03, R10
	LEAQ  (R11)(R10*1), R11
	JMP   match_nolit_end_encodeBlockAsmAvx

matchlen_loop_match_nolit_encodeBlockAsmAvx:
	LEAQ -8(SI), SI
	LEAQ 8(R11), R11
	CMPQ SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsmAvx

matchlen_single_match_nolit_encodeBlockAsmAvx:
	TESTQ SI, SI
	JZ    match_nolit_end_encodeBlockAsmAvx

matchlen_single_loopback_match_nolit_encodeBlockAsmAvx:
	MOVB (CX)(R11*1), R10
	CMPB (CX)(R11*1), R10
	JNE  match_nolit_end_encodeBlockAsmAvx
	LEAQ 1(R11), R11
	DECQ SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsmAvx

match_nolit_end_encodeBlockAsmAvx:
	MOVL 24(SP), DI
	ADDQ $0x04, R11
	MOVQ dst_base+0(FP), R10
	CMPL DI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsmAvx
	CMPL R11, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsmAvx
	MOVB $0xff, (R10)
	MOVD DI, 1(R10)
	LEAQ -64(R11), R11
	ADDQ $0x05, R10
	CMPL R11, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsmAvx

emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

four_bytes_remain_match_nolit_encodeBlockAsmAvx:
	TESTL R11, R11
	JZ    match_nolit_emitcopy_end_encodeBlockAsmAvx
	MOVB  $0x03, R8
	LEAQ  -4(R8)(R11*4), R11
	MOVB  R11, (R10)
	MOVD  DI, 1(R10)
	ADDQ  $0x05, R10
	JMP   match_nolit_emitcopy_end_encodeBlockAsmAvx

two_byte_offset_match_nolit_encodeBlockAsmAvx:
	CMPL R11, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsmAvx
	MOVB $0xee, (R10)
	MOVW DI, 1(R10)
	LEAQ -60(R11), R11
	ADDQ $0x03, R10

emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy_short
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

two_byte_offset_short_match_nolit_encodeBlockAsmAvx:
	CMPL R11, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsmAvx
	CMPL DI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsmAvx
	MOVB $0x01, R8
	LEAQ -16(R8)(R11*4), R11
	MOVB DI, 1(R10)
	SHRL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

emit_copy_three_match_nolit_encodeBlockAsmAvx:
	MOVB $0x02, R8
	LEAQ -4(R8)(R11*4), R11
	MOVB R11, (R10)
	MOVW DI, 1(R10)
	ADDQ $0x03, R10

match_nolit_emitcopy_end_encodeBlockAsmAvx:
	MOVQ R10, dst_base+0(FP)
	ADDL R11, AX
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsmAvx
	CMPQ R10, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsmAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsmAvx:
	MOVQ  -2(CX)(AX*1), R10
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	SHRQ  $0x10, R10
	MOVQ  R10, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x30, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x30, R13
	MOVL  32(SP)(R12*1), DX
	MOVL  32(SP)(R13*1), DX
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	MOVL  AX, 32(SP)(R13*1)
	CMPL  (CX), R10
	JEQ   match_nolit_loop_encodeBlockAsmAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsmAvx

emit_remainder_encodeBlockAsmAvx:
	MOVL 20(SP), DX
	SUBQ src_len+32(FP), DX
	MOVQ dst_base+0(FP), AX
	LEAQ (AX)(DX*1), AX
	CMPQ AX, (SP)
	JL   emit_remainder_ok_encodeBlockAsmAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsmAvx:
	MOVQ src_len+32(FP), AX
	CMPL 20(SP), AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsmAvx
	MOVL 20(SP), R8
	MOVQ AX, DX
	LEAQ (CX)(R8*1), CX
	SUBQ DX, R8
	MOVQ dst_base+0(FP), DX
	MOVL AX, 20(SP)
	MOVQ R8, AX
	SUBL $0x01, AX
	JC   emit_literal_done_emit_remainder_encodeBlockAsmAvx
	CMPL AX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsmAvx
	CMPL AX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsmAvx
	CMPL AX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsmAvx
	CMPL AX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsmAvx
	MOVB $0xfc, (DX)
	MOVL AX, 1(DX)
	ADDQ $0x05, DX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

four_bytes_emit_remainder_encodeBlockAsmAvx:
	MOVQ AX, BX
	SHRL $0x10, BX
	MOVB $0xf8, (DX)
	MOVW AX, 1(DX)
	MOVB BL, 3(DX)
	ADDQ $0x04, DX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

three_bytes_emit_remainder_encodeBlockAsmAvx:
	MOVB $0xf4, (DX)
	MOVW AX, 1(DX)
	ADDQ $0x03, DX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

two_bytes_emit_remainder_encodeBlockAsmAvx:
	MOVB $0xf0, (DX)
	MOVB AL, 1(DX)
	ADDQ $0x02, DX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

one_byte_emit_remainder_encodeBlockAsmAvx:
	SHLB $0x02, AL
	MOVB AL, (DX)
	ADDQ $0x01, DX

memmove_emit_remainder_encodeBlockAsmAvx:
	LEAQ (DX)(R8*1), AX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_tail:
	TESTQ R8, R8
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsmAvx
	CMPQ  R8, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_1or2
	CMPQ  R8, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_4
	CMPQ  R8, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_8
	CMPQ  R8, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_9through16
	CMPQ  R8, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_17through32
	CMPQ  R8, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_33through64
	CMPQ  R8, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_65through128
	CMPQ  R8, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_1or2:
	MOVB (CX), AL
	MOVB -1(CX)(R8*1), BL
	MOVB AL, (DX)
	MOVB BL, -1(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_4:
	MOVL (CX), AX
	MOVL AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_3:
	MOVW (CX), AX
	MOVB 2(CX), BL
	MOVW AX, (DX)
	MOVB BL, 2(DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_5through7:
	MOVL (CX), AX
	MOVL -4(CX)(R8*1), BX
	MOVL AX, (DX)
	MOVL BX, -4(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_8:
	MOVQ (CX), AX
	MOVQ AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_9through16:
	MOVQ (CX), AX
	MOVQ -8(CX)(R8*1), BX
	MOVQ AX, (DX)
	MOVQ BX, -8(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(R8*1), X1
	MOVOU X0, (DX)
	MOVOU X1, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(R8*1), X2
	MOVOU -16(CX)(R8*1), X3
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, -32(DX)(R8*1)
	MOVOU X3, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(R8*1), X8
	MOVOU -112(CX)(R8*1), X9
	MOVOU -96(CX)(R8*1), X10
	MOVOU -80(CX)(R8*1), X11
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, -128(DX)(R8*1)
	MOVOU X9, -112(DX)(R8*1)
	MOVOU X10, -96(DX)(R8*1)
	MOVOU X11, -80(DX)(R8*1)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_256through2048:
	LEAQ  -256(R8), R8
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, 128(DX)
	MOVOU X9, 144(DX)
	MOVOU X10, 160(DX)
	MOVOU X11, 176(DX)
	MOVOU X12, 192(DX)
	MOVOU X13, 208(DX)
	MOVOU X14, 224(DX)
	MOVOU X15, 240(DX)
	CMPQ  R8, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(DX), DX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_avxUnaligned:
	LEAQ    (CX)(R8*1), BX
	MOVQ    DX, SI
	MOVOU   -128(BX), X5
	MOVOU   -112(BX), X6
	MOVQ    $0x00000080, AX
	ANDQ    $0xffffffe0, DX
	ADDQ    $0x20, DX
	MOVOU   -96(BX), X7
	MOVOU   -80(BX), X8
	MOVQ    DX, BP
	SUBQ    SI, BP
	MOVOU   -64(BX), X9
	MOVOU   -48(BX), X10
	SUBQ    BP, R8
	MOVOU   -32(BX), X11
	MOVOU   -16(BX), X12
	VMOVDQU (CX), Y4
	ADDQ    BP, CX
	SUBQ    AX, R8

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_gobble_128_loop:
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	ADDQ    AX, CX
	VMOVDQA Y0, (DX)
	VMOVDQA Y1, 32(DX)
	VMOVDQA Y2, 64(DX)
	VMOVDQA Y3, 96(DX)
	ADDQ    AX, DX
	SUBQ    AX, R8
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_gobble_128_loop
	ADDQ    AX, R8
	ADDQ    DX, R8
	VMOVDQU Y4, (SI)
	VZEROUPPER
	MOVOU X5, -128(R8)
	MOVOU X6, -112(R8)
	MOVOU X7, -96(R8)
	MOVOU X8, -80(R8)
	MOVOU X9, -64(R8)
	MOVOU X10, -48(R8)
	MOVOU X11, -32(R8)
	MOVOU X12, -16(R8)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx
	MOVQ  AX, DX

emit_literal_done_emit_remainder_encodeBlockAsmAvx:
	MOVQ DX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsmAvx:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm14BAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsm14BAvx(SB), $16416-56
	MOVQ $0x00000080, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm14BAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm14BAvx
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R9
	SHRQ  $0x05, AX
	SUBL  CX, AX
	MOVL  R9, 16(SP)
	MOVQ  dst_base+0(FP), CX
	MOVQ  CX, 8(SP)
	LEAQ  (CX)(AX*1), AX
	MOVQ  AX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm14BAvx:
	MOVQ  (CX)(AX*1), R10
	MOVL  20(SP), DX
	SUBL  AX, DX
	SHRL  $0x05, DX
	LEAQ  4(AX)(DX*1), R9
	MOVL  16(SP), DX
	CMPL  R9, DX
	JGT   emit_remainder_encodeBlockAsm14BAvx
	MOVL  R9, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	MOVQ  R10, R13
	SHRQ  $0x08, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x32, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x32, R13
	MOVL  32(SP)(R12*1), R9
	MOVL  32(SP)(R13*1), DX
	MOVL  AX, 32(SP)(R12*1)
	MOVL  AX, BX
	DECL  BX
	MOVL  BX, 32(SP)(R13*1)
	MOVQ  R10, R12
	SHRQ  $0x10, R12
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x32, R12
	CMPL  (CX)(R9*1), R10
	JEQ   candidate_match_encodeBlockAsm14BAvx
	SHRQ  $0x08, R10
	MOVL  32(SP)(R12*1), R9
	CMPL  (CX)(DX*1), R10
	JEQ   candidate2_match_encodeBlockAsm14BAvx
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	SHRQ  $0x08, R10
	CMPL  (CX)(R9*1), R10
	JEQ   candidate3_match_encodeBlockAsm14BAvx
	MOVL  28(SP), AX
	JMP   search_loop_encodeBlockAsm14BAvx

candidate3_match_encodeBlockAsm14BAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm14BAvx

candidate2_match_encodeBlockAsm14BAvx:
	LEAQ -2(AX), R9
	MOVL R9, 32(SP)(R12*1)
	INCL AX
	MOVL DX, R9

candidate_match_encodeBlockAsm14BAvx:
	MOVL  20(SP), DX
	TESTL R9, R9
	JZ    match_extend_back_end_encodeBlockAsm14BAvx

match_extend_back_loop_encodeBlockAsm14BAvx:
	CMPL AX, DX
	JG   match_extend_back_end_encodeBlockAsm14BAvx
	MOVB -1(CX)(R9*1), BL
	MOVB -1(CX)(AX*1), BP
	CMPB BL, BP
	JNE  match_extend_back_end_encodeBlockAsm14BAvx
	LEAL -1(AX), AX
	DECL R9
	JZ   match_extend_back_end_encodeBlockAsm14BAvx
	JMP  match_extend_back_loop_encodeBlockAsm14BAvx

match_extend_back_end_encodeBlockAsm14BAvx:
	MOVL 20(SP), BX
	SUBL AX, BX
	LEAQ dst_base+0(FP)(BX*1), BX
	CMPQ BX, (SP)
	JL   match_dst_size_check_encodeBlockAsm14BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm14BAvx:
	MOVL R9, DX
	CMPL 20(SP), DX
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm14BAvx
	MOVL 20(SP), BP
	MOVQ DX, R10
	LEAQ (CX)(BP*1), R11
	SUBQ R10, BP
	MOVQ dst_base+0(FP), R10
	MOVL DX, 20(SP)
	MOVQ BP, R12
	SUBL $0x01, R12
	JC   emit_literal_done_match_emit_encodeBlockAsm14BAvx
	CMPL R12, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm14BAvx
	CMPL R12, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm14BAvx
	CMPL R12, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm14BAvx
	CMPL R12, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm14BAvx
	MOVB $0xfc, (R10)
	MOVL R12, 1(R10)
	ADDQ $0x05, R10
	JMP  memmove_match_emit_encodeBlockAsm14BAvx

four_bytes_match_emit_encodeBlockAsm14BAvx:
	MOVQ R12, R13
	SHRL $0x10, R13
	MOVB $0xf8, (R10)
	MOVW R12, 1(R10)
	MOVB R13, 3(R10)
	ADDQ $0x04, R10
	JMP  memmove_match_emit_encodeBlockAsm14BAvx

three_bytes_match_emit_encodeBlockAsm14BAvx:
	MOVB $0xf4, (R10)
	MOVW R12, 1(R10)
	ADDQ $0x03, R10
	JMP  memmove_match_emit_encodeBlockAsm14BAvx

two_bytes_match_emit_encodeBlockAsm14BAvx:
	MOVB $0xf0, (R10)
	MOVB R12, 1(R10)
	ADDQ $0x02, R10
	JMP  memmove_match_emit_encodeBlockAsm14BAvx

one_byte_match_emit_encodeBlockAsm14BAvx:
	SHLB $0x02, R12
	MOVB R12, (R10)
	ADDQ $0x01, R10

memmove_match_emit_encodeBlockAsm14BAvx:
	LEAQ (R10)(BP*1), R12
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_tail:
	TESTQ BP, BP
	JEQ   emit_literal_done_match_emit_encodeBlockAsm14BAvx
	CMPQ  BP, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_1or2
	CMPQ  BP, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_4
	CMPQ  BP, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_8
	CMPQ  BP, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_9through16
	CMPQ  BP, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_17through32
	CMPQ  BP, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_33through64
	CMPQ  BP, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_65through128
	CMPQ  BP, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_1or2:
	MOVB (R11), R12
	MOVB -1(R11)(BP*1), R13
	MOVB R12, (R10)
	MOVB R13, -1(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_4:
	MOVL (R11), R12
	MOVL R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_3:
	MOVW (R11), R12
	MOVB 2(R11), R13
	MOVW R12, (R10)
	MOVB R13, 2(R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_5through7:
	MOVL (R11), R12
	MOVL -4(R11)(BP*1), R13
	MOVL R12, (R10)
	MOVL R13, -4(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_8:
	MOVQ (R11), R12
	MOVQ R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_9through16:
	MOVQ (R11), R12
	MOVQ -8(R11)(BP*1), R13
	MOVQ R12, (R10)
	MOVQ R13, -8(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_17through32:
	MOVOU (R11), X0
	MOVOU -16(R11)(BP*1), X1
	MOVOU X0, (R10)
	MOVOU X1, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_33through64:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU -32(R11)(BP*1), X2
	MOVOU -16(R11)(BP*1), X3
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, -32(R10)(BP*1)
	MOVOU X3, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_65through128:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_129through256:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU -128(R11)(BP*1), X8
	MOVOU -112(R11)(BP*1), X9
	MOVOU -96(R11)(BP*1), X10
	MOVOU -80(R11)(BP*1), X11
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, -128(R10)(BP*1)
	MOVOU X9, -112(R10)(BP*1)
	MOVOU X10, -96(R10)(BP*1)
	MOVOU X11, -80(R10)(BP*1)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_256through2048:
	LEAQ  -256(BP), BP
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU 128(R11), X8
	MOVOU 144(R11), X9
	MOVOU 160(R11), X10
	MOVOU 176(R11), X11
	MOVOU 192(R11), X12
	MOVOU 208(R11), X13
	MOVOU 224(R11), X14
	MOVOU 240(R11), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, 128(R10)
	MOVOU X9, 144(R10)
	MOVOU X10, 160(R10)
	MOVOU X11, 176(R10)
	MOVOU X12, 192(R10)
	MOVOU X13, 208(R10)
	MOVOU X14, 224(R10)
	MOVOU X15, 240(R10)
	CMPQ  BP, $0x00000100
	LEAQ  256(R11), R11
	LEAQ  256(R10), R10
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_avxUnaligned:
	LEAQ    (R11)(BP*1), R13
	MOVQ    R10, R15
	MOVOU   -128(R13), X5
	MOVOU   -112(R13), X6
	MOVQ    $0x00000080, R12
	ANDQ    $0xffffffe0, R10
	ADDQ    $0x20, R10
	MOVOU   -96(R13), X7
	MOVOU   -80(R13), X8
	MOVQ    R10, R14
	SUBQ    R15, R14
	MOVOU   -64(R13), X9
	MOVOU   -48(R13), X10
	SUBQ    R14, BP
	MOVOU   -32(R13), X11
	MOVOU   -16(R13), X12
	VMOVDQU (R11), Y4
	ADDQ    R14, R11
	SUBQ    R12, BP

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_gobble_128_loop:
	VMOVDQU (R11), Y0
	VMOVDQU 32(R11), Y1
	VMOVDQU 64(R11), Y2
	VMOVDQU 96(R11), Y3
	ADDQ    R12, R11
	VMOVDQA Y0, (R10)
	VMOVDQA Y1, 32(R10)
	VMOVDQA Y2, 64(R10)
	VMOVDQA Y3, 96(R10)
	ADDQ    R12, R10
	SUBQ    R12, BP
	JA      emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_gobble_128_loop
	ADDQ    R12, BP
	ADDQ    R10, BP
	VMOVDQU Y4, (R15)
	VZEROUPPER
	MOVOU X5, -128(BP)
	MOVOU X6, -112(BP)
	MOVOU X7, -96(BP)
	MOVOU X8, -80(BP)
	MOVOU X9, -64(BP)
	MOVOU X10, -48(BP)
	MOVOU X11, -32(BP)
	MOVOU X12, -16(BP)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx
	MOVQ  R12, R10

emit_literal_done_match_emit_encodeBlockAsm14BAvx:
	MOVQ R10, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm14BAvx:
	NOP

match_nolit_loop_encodeBlockAsm14BAvx:
	MOVL AX, DX
	MOVL 24(SP), DX
	SUBL AX, DX
	MOVL DX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, R9
	MOVL AX, SI
	SUBL 16(SP), SI
	XORQ R11, R11
	CMPQ SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm14BAvx

matchlen_loopback_match_nolit_encodeBlockAsm14BAvx:
	MOVQ  (CX)(R11*1), R10
	XORQ  (CX)(R11*1), R10
	TESTQ R10, R10
	JZ    matchlen_loop_match_nolit_encodeBlockAsm14BAvx
	BSFQ  R10, R10
	SARQ  $0x03, R10
	LEAQ  (R11)(R10*1), R11
	JMP   match_nolit_end_encodeBlockAsm14BAvx

matchlen_loop_match_nolit_encodeBlockAsm14BAvx:
	LEAQ -8(SI), SI
	LEAQ 8(R11), R11
	CMPQ SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm14BAvx

matchlen_single_match_nolit_encodeBlockAsm14BAvx:
	TESTQ SI, SI
	JZ    match_nolit_end_encodeBlockAsm14BAvx

matchlen_single_loopback_match_nolit_encodeBlockAsm14BAvx:
	MOVB (CX)(R11*1), R10
	CMPB (CX)(R11*1), R10
	JNE  match_nolit_end_encodeBlockAsm14BAvx
	LEAQ 1(R11), R11
	DECQ SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm14BAvx

match_nolit_end_encodeBlockAsm14BAvx:
	MOVL 24(SP), DI
	ADDQ $0x04, R11
	MOVQ dst_base+0(FP), R10
	CMPL DI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm14BAvx
	CMPL R11, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm14BAvx
	MOVB $0xff, (R10)
	MOVD DI, 1(R10)
	LEAQ -64(R11), R11
	ADDQ $0x05, R10
	CMPL R11, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm14BAvx

emit_repeat_again_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm14BAvx_emit_copy
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm14BAvx_emit_copy
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm14BAvx_emit_copy
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm14BAvx_emit_copy
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm14BAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_four_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_three_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_two_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

four_bytes_remain_match_nolit_encodeBlockAsm14BAvx:
	TESTL R11, R11
	JZ    match_nolit_emitcopy_end_encodeBlockAsm14BAvx
	MOVB  $0x03, R8
	LEAQ  -4(R8)(R11*4), R11
	MOVB  R11, (R10)
	MOVD  DI, 1(R10)
	ADDQ  $0x05, R10
	JMP   match_nolit_emitcopy_end_encodeBlockAsm14BAvx

two_byte_offset_match_nolit_encodeBlockAsm14BAvx:
	CMPL R11, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm14BAvx
	MOVB $0xee, (R10)
	MOVW DI, 1(R10)
	LEAQ -60(R11), R11
	ADDQ $0x03, R10

emit_repeat_again_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm14BAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_four_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_three_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_two_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

two_byte_offset_short_match_nolit_encodeBlockAsm14BAvx:
	CMPL R11, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm14BAvx
	CMPL DI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm14BAvx
	MOVB $0x01, R8
	LEAQ -16(R8)(R11*4), R11
	MOVB DI, 1(R10)
	SHRL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

emit_copy_three_match_nolit_encodeBlockAsm14BAvx:
	MOVB $0x02, R8
	LEAQ -4(R8)(R11*4), R11
	MOVB R11, (R10)
	MOVW DI, 1(R10)
	ADDQ $0x03, R10

match_nolit_emitcopy_end_encodeBlockAsm14BAvx:
	MOVQ R10, dst_base+0(FP)
	ADDL R11, AX
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm14BAvx
	CMPQ R10, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm14BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm14BAvx:
	MOVQ  -2(CX)(AX*1), R10
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	SHRQ  $0x10, R10
	MOVQ  R10, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x32, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x32, R13
	MOVL  32(SP)(R12*1), DX
	MOVL  32(SP)(R13*1), DX
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	MOVL  AX, 32(SP)(R13*1)
	CMPL  (CX), R10
	JEQ   match_nolit_loop_encodeBlockAsm14BAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsm14BAvx

emit_remainder_encodeBlockAsm14BAvx:
	MOVL 20(SP), DX
	SUBQ src_len+32(FP), DX
	MOVQ dst_base+0(FP), AX
	LEAQ (AX)(DX*1), AX
	CMPQ AX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm14BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm14BAvx:
	MOVQ src_len+32(FP), AX
	CMPL 20(SP), AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm14BAvx
	MOVL 20(SP), R8
	MOVQ AX, DX
	LEAQ (CX)(R8*1), CX
	SUBQ DX, R8
	MOVQ dst_base+0(FP), DX
	MOVL AX, 20(SP)
	MOVQ R8, AX
	SUBL $0x01, AX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx
	CMPL AX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm14BAvx
	CMPL AX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm14BAvx
	CMPL AX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm14BAvx
	CMPL AX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm14BAvx
	MOVB $0xfc, (DX)
	MOVL AX, 1(DX)
	ADDQ $0x05, DX
	JMP  memmove_emit_remainder_encodeBlockAsm14BAvx

four_bytes_emit_remainder_encodeBlockAsm14BAvx:
	MOVQ AX, BX
	SHRL $0x10, BX
	MOVB $0xf8, (DX)
	MOVW AX, 1(DX)
	MOVB BL, 3(DX)
	ADDQ $0x04, DX
	JMP  memmove_emit_remainder_encodeBlockAsm14BAvx

three_bytes_emit_remainder_encodeBlockAsm14BAvx:
	MOVB $0xf4, (DX)
	MOVW AX, 1(DX)
	ADDQ $0x03, DX
	JMP  memmove_emit_remainder_encodeBlockAsm14BAvx

two_bytes_emit_remainder_encodeBlockAsm14BAvx:
	MOVB $0xf0, (DX)
	MOVB AL, 1(DX)
	ADDQ $0x02, DX
	JMP  memmove_emit_remainder_encodeBlockAsm14BAvx

one_byte_emit_remainder_encodeBlockAsm14BAvx:
	SHLB $0x02, AL
	MOVB AL, (DX)
	ADDQ $0x01, DX

memmove_emit_remainder_encodeBlockAsm14BAvx:
	LEAQ (DX)(R8*1), AX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_tail:
	TESTQ R8, R8
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx
	CMPQ  R8, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_1or2
	CMPQ  R8, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_4
	CMPQ  R8, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_8
	CMPQ  R8, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_9through16
	CMPQ  R8, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_17through32
	CMPQ  R8, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_33through64
	CMPQ  R8, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_65through128
	CMPQ  R8, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_1or2:
	MOVB (CX), AL
	MOVB -1(CX)(R8*1), BL
	MOVB AL, (DX)
	MOVB BL, -1(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_4:
	MOVL (CX), AX
	MOVL AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_3:
	MOVW (CX), AX
	MOVB 2(CX), BL
	MOVW AX, (DX)
	MOVB BL, 2(DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_5through7:
	MOVL (CX), AX
	MOVL -4(CX)(R8*1), BX
	MOVL AX, (DX)
	MOVL BX, -4(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_8:
	MOVQ (CX), AX
	MOVQ AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_9through16:
	MOVQ (CX), AX
	MOVQ -8(CX)(R8*1), BX
	MOVQ AX, (DX)
	MOVQ BX, -8(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(R8*1), X1
	MOVOU X0, (DX)
	MOVOU X1, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(R8*1), X2
	MOVOU -16(CX)(R8*1), X3
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, -32(DX)(R8*1)
	MOVOU X3, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(R8*1), X8
	MOVOU -112(CX)(R8*1), X9
	MOVOU -96(CX)(R8*1), X10
	MOVOU -80(CX)(R8*1), X11
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, -128(DX)(R8*1)
	MOVOU X9, -112(DX)(R8*1)
	MOVOU X10, -96(DX)(R8*1)
	MOVOU X11, -80(DX)(R8*1)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_256through2048:
	LEAQ  -256(R8), R8
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, 128(DX)
	MOVOU X9, 144(DX)
	MOVOU X10, 160(DX)
	MOVOU X11, 176(DX)
	MOVOU X12, 192(DX)
	MOVOU X13, 208(DX)
	MOVOU X14, 224(DX)
	MOVOU X15, 240(DX)
	CMPQ  R8, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(DX), DX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_avxUnaligned:
	LEAQ    (CX)(R8*1), BX
	MOVQ    DX, SI
	MOVOU   -128(BX), X5
	MOVOU   -112(BX), X6
	MOVQ    $0x00000080, AX
	ANDQ    $0xffffffe0, DX
	ADDQ    $0x20, DX
	MOVOU   -96(BX), X7
	MOVOU   -80(BX), X8
	MOVQ    DX, BP
	SUBQ    SI, BP
	MOVOU   -64(BX), X9
	MOVOU   -48(BX), X10
	SUBQ    BP, R8
	MOVOU   -32(BX), X11
	MOVOU   -16(BX), X12
	VMOVDQU (CX), Y4
	ADDQ    BP, CX
	SUBQ    AX, R8

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_gobble_128_loop:
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	ADDQ    AX, CX
	VMOVDQA Y0, (DX)
	VMOVDQA Y1, 32(DX)
	VMOVDQA Y2, 64(DX)
	VMOVDQA Y3, 96(DX)
	ADDQ    AX, DX
	SUBQ    AX, R8
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_gobble_128_loop
	ADDQ    AX, R8
	ADDQ    DX, R8
	VMOVDQU Y4, (SI)
	VZEROUPPER
	MOVOU X5, -128(R8)
	MOVOU X6, -112(R8)
	MOVOU X7, -96(R8)
	MOVOU X8, -80(R8)
	MOVOU X9, -64(R8)
	MOVOU X10, -48(R8)
	MOVOU X11, -32(R8)
	MOVOU X12, -16(R8)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx
	MOVQ  AX, DX

emit_literal_done_emit_remainder_encodeBlockAsm14BAvx:
	MOVQ DX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm14BAvx:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm12BAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsm12BAvx(SB), $4128-56
	MOVQ $0x00000020, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm12BAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm12BAvx
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R9
	SHRQ  $0x05, AX
	SUBL  CX, AX
	MOVL  R9, 16(SP)
	MOVQ  dst_base+0(FP), CX
	MOVQ  CX, 8(SP)
	LEAQ  (CX)(AX*1), AX
	MOVQ  AX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm12BAvx:
	MOVQ  (CX)(AX*1), R10
	MOVL  20(SP), DX
	SUBL  AX, DX
	SHRL  $0x04, DX
	LEAQ  4(AX)(DX*1), R9
	MOVL  16(SP), DX
	CMPL  R9, DX
	JGT   emit_remainder_encodeBlockAsm12BAvx
	MOVL  R9, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	MOVQ  R10, R13
	SHRQ  $0x08, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x34, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x34, R13
	MOVL  32(SP)(R12*1), R9
	MOVL  32(SP)(R13*1), DX
	MOVL  AX, 32(SP)(R12*1)
	MOVL  AX, BX
	DECL  BX
	MOVL  BX, 32(SP)(R13*1)
	MOVQ  R10, R12
	SHRQ  $0x10, R12
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x34, R12
	CMPL  (CX)(R9*1), R10
	JEQ   candidate_match_encodeBlockAsm12BAvx
	SHRQ  $0x08, R10
	MOVL  32(SP)(R12*1), R9
	CMPL  (CX)(DX*1), R10
	JEQ   candidate2_match_encodeBlockAsm12BAvx
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	SHRQ  $0x08, R10
	CMPL  (CX)(R9*1), R10
	JEQ   candidate3_match_encodeBlockAsm12BAvx
	MOVL  28(SP), AX
	JMP   search_loop_encodeBlockAsm12BAvx

candidate3_match_encodeBlockAsm12BAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm12BAvx

candidate2_match_encodeBlockAsm12BAvx:
	LEAQ -2(AX), R9
	MOVL R9, 32(SP)(R12*1)
	INCL AX
	MOVL DX, R9

candidate_match_encodeBlockAsm12BAvx:
	MOVL  20(SP), DX
	TESTL R9, R9
	JZ    match_extend_back_end_encodeBlockAsm12BAvx

match_extend_back_loop_encodeBlockAsm12BAvx:
	CMPL AX, DX
	JG   match_extend_back_end_encodeBlockAsm12BAvx
	MOVB -1(CX)(R9*1), BL
	MOVB -1(CX)(AX*1), BP
	CMPB BL, BP
	JNE  match_extend_back_end_encodeBlockAsm12BAvx
	LEAL -1(AX), AX
	DECL R9
	JZ   match_extend_back_end_encodeBlockAsm12BAvx
	JMP  match_extend_back_loop_encodeBlockAsm12BAvx

match_extend_back_end_encodeBlockAsm12BAvx:
	MOVL 20(SP), BX
	SUBL AX, BX
	LEAQ dst_base+0(FP)(BX*1), BX
	CMPQ BX, (SP)
	JL   match_dst_size_check_encodeBlockAsm12BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm12BAvx:
	MOVL R9, DX
	CMPL 20(SP), DX
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm12BAvx
	MOVL 20(SP), BP
	MOVQ DX, R10
	LEAQ (CX)(BP*1), R11
	SUBQ R10, BP
	MOVQ dst_base+0(FP), R10
	MOVL DX, 20(SP)
	MOVQ BP, R12
	SUBL $0x01, R12
	JC   emit_literal_done_match_emit_encodeBlockAsm12BAvx
	CMPL R12, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm12BAvx
	CMPL R12, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm12BAvx
	CMPL R12, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm12BAvx
	CMPL R12, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm12BAvx
	MOVB $0xfc, (R10)
	MOVL R12, 1(R10)
	ADDQ $0x05, R10
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

four_bytes_match_emit_encodeBlockAsm12BAvx:
	MOVQ R12, R13
	SHRL $0x10, R13
	MOVB $0xf8, (R10)
	MOVW R12, 1(R10)
	MOVB R13, 3(R10)
	ADDQ $0x04, R10
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

three_bytes_match_emit_encodeBlockAsm12BAvx:
	MOVB $0xf4, (R10)
	MOVW R12, 1(R10)
	ADDQ $0x03, R10
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

two_bytes_match_emit_encodeBlockAsm12BAvx:
	MOVB $0xf0, (R10)
	MOVB R12, 1(R10)
	ADDQ $0x02, R10
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

one_byte_match_emit_encodeBlockAsm12BAvx:
	SHLB $0x02, R12
	MOVB R12, (R10)
	ADDQ $0x01, R10

memmove_match_emit_encodeBlockAsm12BAvx:
	LEAQ (R10)(BP*1), R12
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_tail:
	TESTQ BP, BP
	JEQ   emit_literal_done_match_emit_encodeBlockAsm12BAvx
	CMPQ  BP, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_1or2
	CMPQ  BP, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_4
	CMPQ  BP, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_8
	CMPQ  BP, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_9through16
	CMPQ  BP, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_17through32
	CMPQ  BP, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_33through64
	CMPQ  BP, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_65through128
	CMPQ  BP, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_1or2:
	MOVB (R11), R12
	MOVB -1(R11)(BP*1), R13
	MOVB R12, (R10)
	MOVB R13, -1(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_4:
	MOVL (R11), R12
	MOVL R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_3:
	MOVW (R11), R12
	MOVB 2(R11), R13
	MOVW R12, (R10)
	MOVB R13, 2(R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_5through7:
	MOVL (R11), R12
	MOVL -4(R11)(BP*1), R13
	MOVL R12, (R10)
	MOVL R13, -4(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_8:
	MOVQ (R11), R12
	MOVQ R12, (R10)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_9through16:
	MOVQ (R11), R12
	MOVQ -8(R11)(BP*1), R13
	MOVQ R12, (R10)
	MOVQ R13, -8(R10)(BP*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_17through32:
	MOVOU (R11), X0
	MOVOU -16(R11)(BP*1), X1
	MOVOU X0, (R10)
	MOVOU X1, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_33through64:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU -32(R11)(BP*1), X2
	MOVOU -16(R11)(BP*1), X3
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, -32(R10)(BP*1)
	MOVOU X3, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_65through128:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_129through256:
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU -128(R11)(BP*1), X8
	MOVOU -112(R11)(BP*1), X9
	MOVOU -96(R11)(BP*1), X10
	MOVOU -80(R11)(BP*1), X11
	MOVOU -64(R11)(BP*1), X12
	MOVOU -48(R11)(BP*1), X13
	MOVOU -32(R11)(BP*1), X14
	MOVOU -16(R11)(BP*1), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, -128(R10)(BP*1)
	MOVOU X9, -112(R10)(BP*1)
	MOVOU X10, -96(R10)(BP*1)
	MOVOU X11, -80(R10)(BP*1)
	MOVOU X12, -64(R10)(BP*1)
	MOVOU X13, -48(R10)(BP*1)
	MOVOU X14, -32(R10)(BP*1)
	MOVOU X15, -16(R10)(BP*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_256through2048:
	LEAQ  -256(BP), BP
	MOVOU (R11), X0
	MOVOU 16(R11), X1
	MOVOU 32(R11), X2
	MOVOU 48(R11), X3
	MOVOU 64(R11), X4
	MOVOU 80(R11), X5
	MOVOU 96(R11), X6
	MOVOU 112(R11), X7
	MOVOU 128(R11), X8
	MOVOU 144(R11), X9
	MOVOU 160(R11), X10
	MOVOU 176(R11), X11
	MOVOU 192(R11), X12
	MOVOU 208(R11), X13
	MOVOU 224(R11), X14
	MOVOU 240(R11), X15
	MOVOU X0, (R10)
	MOVOU X1, 16(R10)
	MOVOU X2, 32(R10)
	MOVOU X3, 48(R10)
	MOVOU X4, 64(R10)
	MOVOU X5, 80(R10)
	MOVOU X6, 96(R10)
	MOVOU X7, 112(R10)
	MOVOU X8, 128(R10)
	MOVOU X9, 144(R10)
	MOVOU X10, 160(R10)
	MOVOU X11, 176(R10)
	MOVOU X12, 192(R10)
	MOVOU X13, 208(R10)
	MOVOU X14, 224(R10)
	MOVOU X15, 240(R10)
	CMPQ  BP, $0x00000100
	LEAQ  256(R11), R11
	LEAQ  256(R10), R10
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned:
	LEAQ    (R11)(BP*1), R13
	MOVQ    R10, R15
	MOVOU   -128(R13), X5
	MOVOU   -112(R13), X6
	MOVQ    $0x00000080, R12
	ANDQ    $0xffffffe0, R10
	ADDQ    $0x20, R10
	MOVOU   -96(R13), X7
	MOVOU   -80(R13), X8
	MOVQ    R10, R14
	SUBQ    R15, R14
	MOVOU   -64(R13), X9
	MOVOU   -48(R13), X10
	SUBQ    R14, BP
	MOVOU   -32(R13), X11
	MOVOU   -16(R13), X12
	VMOVDQU (R11), Y4
	ADDQ    R14, R11
	SUBQ    R12, BP

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop:
	VMOVDQU (R11), Y0
	VMOVDQU 32(R11), Y1
	VMOVDQU 64(R11), Y2
	VMOVDQU 96(R11), Y3
	ADDQ    R12, R11
	VMOVDQA Y0, (R10)
	VMOVDQA Y1, 32(R10)
	VMOVDQA Y2, 64(R10)
	VMOVDQA Y3, 96(R10)
	ADDQ    R12, R10
	SUBQ    R12, BP
	JA      emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop
	ADDQ    R12, BP
	ADDQ    R10, BP
	VMOVDQU Y4, (R15)
	VZEROUPPER
	MOVOU X5, -128(BP)
	MOVOU X6, -112(BP)
	MOVOU X7, -96(BP)
	MOVOU X8, -80(BP)
	MOVOU X9, -64(BP)
	MOVOU X10, -48(BP)
	MOVOU X11, -32(BP)
	MOVOU X12, -16(BP)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx
	MOVQ  R12, R10

emit_literal_done_match_emit_encodeBlockAsm12BAvx:
	MOVQ R10, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm12BAvx:
	NOP

match_nolit_loop_encodeBlockAsm12BAvx:
	MOVL AX, DX
	MOVL 24(SP), DX
	SUBL AX, DX
	MOVL DX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, R9
	MOVL AX, SI
	SUBL 16(SP), SI
	XORQ R11, R11
	CMPQ SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm12BAvx

matchlen_loopback_match_nolit_encodeBlockAsm12BAvx:
	MOVQ  (CX)(R11*1), R10
	XORQ  (CX)(R11*1), R10
	TESTQ R10, R10
	JZ    matchlen_loop_match_nolit_encodeBlockAsm12BAvx
	BSFQ  R10, R10
	SARQ  $0x03, R10
	LEAQ  (R11)(R10*1), R11
	JMP   match_nolit_end_encodeBlockAsm12BAvx

matchlen_loop_match_nolit_encodeBlockAsm12BAvx:
	LEAQ -8(SI), SI
	LEAQ 8(R11), R11
	CMPQ SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm12BAvx

matchlen_single_match_nolit_encodeBlockAsm12BAvx:
	TESTQ SI, SI
	JZ    match_nolit_end_encodeBlockAsm12BAvx

matchlen_single_loopback_match_nolit_encodeBlockAsm12BAvx:
	MOVB (CX)(R11*1), R10
	CMPB (CX)(R11*1), R10
	JNE  match_nolit_end_encodeBlockAsm12BAvx
	LEAQ 1(R11), R11
	DECQ SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm12BAvx

match_nolit_end_encodeBlockAsm12BAvx:
	MOVL 24(SP), DI
	ADDQ $0x04, R11
	MOVQ dst_base+0(FP), R10
	CMPL DI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm12BAvx
	CMPL R11, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm12BAvx
	MOVB $0xff, (R10)
	MOVD DI, 1(R10)
	LEAQ -64(R11), R11
	ADDQ $0x05, R10
	CMPL R11, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm12BAvx

emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

four_bytes_remain_match_nolit_encodeBlockAsm12BAvx:
	TESTL R11, R11
	JZ    match_nolit_emitcopy_end_encodeBlockAsm12BAvx
	MOVB  $0x03, R8
	LEAQ  -4(R8)(R11*4), R11
	MOVB  R11, (R10)
	MOVD  DI, 1(R10)
	ADDQ  $0x05, R10
	JMP   match_nolit_emitcopy_end_encodeBlockAsm12BAvx

two_byte_offset_match_nolit_encodeBlockAsm12BAvx:
	CMPL R11, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm12BAvx
	MOVB $0xee, (R10)
	MOVW DI, 1(R10)
	LEAQ -60(R11), R11
	ADDQ $0x03, R10

emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	MOVQ R11, R12
	LEAQ -4(R11), R11
	CMPL R12, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL R12, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL DI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	CMPL R11, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL R11, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL R11, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	LEAQ -16842747(R11), R11
	MOVW $0x001d, (R10)
	MOVW $0xfffb, 2(R10)
	MOVB $0xff, 4(R10)
	ADDQ $0x05, R10
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	LEAQ -65536(R11), R11
	MOVQ R11, DI
	MOVW $0x001d, (R10)
	MOVW R11, 2(R10)
	SARQ $0x10, DI
	MOVB DI, 4(R10)
	ADDQ $0x05, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	LEAQ -256(R11), R11
	MOVW $0x0019, (R10)
	MOVW R11, 2(R10)
	ADDQ $0x04, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	LEAQ -4(R11), R11
	MOVW $0x0015, (R10)
	MOVB R11, 2(R10)
	ADDQ $0x03, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	SHLL $0x02, R11
	ORL  $0x01, R11
	MOVW R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	XORQ R12, R12
	LEAQ 1(R12)(R11*4), R11
	MOVB DI, 1(R10)
	SARL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

two_byte_offset_short_match_nolit_encodeBlockAsm12BAvx:
	CMPL R11, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12BAvx
	CMPL DI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12BAvx
	MOVB $0x01, R8
	LEAQ -16(R8)(R11*4), R11
	MOVB DI, 1(R10)
	SHRL $0x08, DI
	SHLL $0x05, DI
	ORL  DI, R11
	MOVB R11, (R10)
	ADDQ $0x02, R10
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

emit_copy_three_match_nolit_encodeBlockAsm12BAvx:
	MOVB $0x02, R8
	LEAQ -4(R8)(R11*4), R11
	MOVB R11, (R10)
	MOVW DI, 1(R10)
	ADDQ $0x03, R10

match_nolit_emitcopy_end_encodeBlockAsm12BAvx:
	MOVQ R10, dst_base+0(FP)
	ADDL R11, AX
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm12BAvx
	CMPQ R10, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm12BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm12BAvx:
	MOVQ  -2(CX)(AX*1), R10
	MOVQ  $0x0000cf1bbcdcbf9b, R11
	MOVQ  R10, R12
	SHRQ  $0x10, R10
	MOVQ  R10, R13
	SHLQ  $0x10, R12
	IMULQ R11, R12
	SHRQ  $0x34, R12
	SHLQ  $0x10, R13
	IMULQ R11, R13
	SHRQ  $0x34, R13
	MOVL  32(SP)(R12*1), DX
	MOVL  32(SP)(R13*1), DX
	LEAQ  -2(AX), R11
	MOVL  R11, 32(SP)(R12*1)
	MOVL  AX, 32(SP)(R13*1)
	CMPL  (CX), R10
	JEQ   match_nolit_loop_encodeBlockAsm12BAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsm12BAvx

emit_remainder_encodeBlockAsm12BAvx:
	MOVL 20(SP), DX
	SUBQ src_len+32(FP), DX
	MOVQ dst_base+0(FP), AX
	LEAQ (AX)(DX*1), AX
	CMPQ AX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm12BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm12BAvx:
	MOVQ src_len+32(FP), AX
	CMPL 20(SP), AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm12BAvx
	MOVL 20(SP), R8
	MOVQ AX, DX
	LEAQ (CX)(R8*1), CX
	SUBQ DX, R8
	MOVQ dst_base+0(FP), DX
	MOVL AX, 20(SP)
	MOVQ R8, AX
	SUBL $0x01, AX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx
	CMPL AX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm12BAvx
	CMPL AX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm12BAvx
	CMPL AX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm12BAvx
	CMPL AX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm12BAvx
	MOVB $0xfc, (DX)
	MOVL AX, 1(DX)
	ADDQ $0x05, DX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

four_bytes_emit_remainder_encodeBlockAsm12BAvx:
	MOVQ AX, BX
	SHRL $0x10, BX
	MOVB $0xf8, (DX)
	MOVW AX, 1(DX)
	MOVB BL, 3(DX)
	ADDQ $0x04, DX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

three_bytes_emit_remainder_encodeBlockAsm12BAvx:
	MOVB $0xf4, (DX)
	MOVW AX, 1(DX)
	ADDQ $0x03, DX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

two_bytes_emit_remainder_encodeBlockAsm12BAvx:
	MOVB $0xf0, (DX)
	MOVB AL, 1(DX)
	ADDQ $0x02, DX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

one_byte_emit_remainder_encodeBlockAsm12BAvx:
	SHLB $0x02, AL
	MOVB AL, (DX)
	ADDQ $0x01, DX

memmove_emit_remainder_encodeBlockAsm12BAvx:
	LEAQ (DX)(R8*1), AX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_tail:
	TESTQ R8, R8
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx
	CMPQ  R8, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_1or2
	CMPQ  R8, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_4
	CMPQ  R8, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_8
	CMPQ  R8, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_9through16
	CMPQ  R8, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_17through32
	CMPQ  R8, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_33through64
	CMPQ  R8, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_65through128
	CMPQ  R8, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_1or2:
	MOVB (CX), AL
	MOVB -1(CX)(R8*1), BL
	MOVB AL, (DX)
	MOVB BL, -1(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_4:
	MOVL (CX), AX
	MOVL AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_3:
	MOVW (CX), AX
	MOVB 2(CX), BL
	MOVW AX, (DX)
	MOVB BL, 2(DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_5through7:
	MOVL (CX), AX
	MOVL -4(CX)(R8*1), BX
	MOVL AX, (DX)
	MOVL BX, -4(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_8:
	MOVQ (CX), AX
	MOVQ AX, (DX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_9through16:
	MOVQ (CX), AX
	MOVQ -8(CX)(R8*1), BX
	MOVQ AX, (DX)
	MOVQ BX, -8(DX)(R8*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(R8*1), X1
	MOVOU X0, (DX)
	MOVOU X1, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(R8*1), X2
	MOVOU -16(CX)(R8*1), X3
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, -32(DX)(R8*1)
	MOVOU X3, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(R8*1), X8
	MOVOU -112(CX)(R8*1), X9
	MOVOU -96(CX)(R8*1), X10
	MOVOU -80(CX)(R8*1), X11
	MOVOU -64(CX)(R8*1), X12
	MOVOU -48(CX)(R8*1), X13
	MOVOU -32(CX)(R8*1), X14
	MOVOU -16(CX)(R8*1), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, -128(DX)(R8*1)
	MOVOU X9, -112(DX)(R8*1)
	MOVOU X10, -96(DX)(R8*1)
	MOVOU X11, -80(DX)(R8*1)
	MOVOU X12, -64(DX)(R8*1)
	MOVOU X13, -48(DX)(R8*1)
	MOVOU X14, -32(DX)(R8*1)
	MOVOU X15, -16(DX)(R8*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_256through2048:
	LEAQ  -256(R8), R8
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (DX)
	MOVOU X1, 16(DX)
	MOVOU X2, 32(DX)
	MOVOU X3, 48(DX)
	MOVOU X4, 64(DX)
	MOVOU X5, 80(DX)
	MOVOU X6, 96(DX)
	MOVOU X7, 112(DX)
	MOVOU X8, 128(DX)
	MOVOU X9, 144(DX)
	MOVOU X10, 160(DX)
	MOVOU X11, 176(DX)
	MOVOU X12, 192(DX)
	MOVOU X13, 208(DX)
	MOVOU X14, 224(DX)
	MOVOU X15, 240(DX)
	CMPQ  R8, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(DX), DX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_avxUnaligned:
	LEAQ    (CX)(R8*1), BX
	MOVQ    DX, SI
	MOVOU   -128(BX), X5
	MOVOU   -112(BX), X6
	MOVQ    $0x00000080, AX
	ANDQ    $0xffffffe0, DX
	ADDQ    $0x20, DX
	MOVOU   -96(BX), X7
	MOVOU   -80(BX), X8
	MOVQ    DX, BP
	SUBQ    SI, BP
	MOVOU   -64(BX), X9
	MOVOU   -48(BX), X10
	SUBQ    BP, R8
	MOVOU   -32(BX), X11
	MOVOU   -16(BX), X12
	VMOVDQU (CX), Y4
	ADDQ    BP, CX
	SUBQ    AX, R8

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_gobble_128_loop:
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	ADDQ    AX, CX
	VMOVDQA Y0, (DX)
	VMOVDQA Y1, 32(DX)
	VMOVDQA Y2, 64(DX)
	VMOVDQA Y3, 96(DX)
	ADDQ    AX, DX
	SUBQ    AX, R8
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_gobble_128_loop
	ADDQ    AX, R8
	ADDQ    DX, R8
	VMOVDQU Y4, (SI)
	VZEROUPPER
	MOVOU X5, -128(R8)
	MOVOU X6, -112(R8)
	MOVOU X7, -96(R8)
	MOVOU X8, -80(R8)
	MOVOU X9, -64(R8)
	MOVOU X10, -48(R8)
	MOVOU X11, -32(R8)
	MOVOU X12, -16(R8)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx
	MOVQ  AX, DX

emit_literal_done_emit_remainder_encodeBlockAsm12BAvx:
	MOVQ DX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm12BAvx:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func emitLiteral(dst []byte, lit []byte) int
// Requires: SSE2
TEXT Â·emitLiteral(SB), NOSPLIT, $0-56
	MOVQ dst_base+0(FP), AX
	MOVQ lit_base+24(FP), CX
	MOVQ lit_len+32(FP), DX
	MOVQ DX, BX
	MOVQ DX, BP
	SUBL $0x01, BP
	JC   emit_literal_end_standalone
	CMPL BP, $0x3c
	JLT  one_byte_standalone
	CMPL BP, $0x00000100
	JLT  two_bytes_standalone
	CMPL BP, $0x00010000
	JLT  three_bytes_standalone
	CMPL BP, $0x01000000
	JLT  four_bytes_standalone
	MOVB $0xfc, (AX)
	MOVL BP, 1(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  memmove_standalone

four_bytes_standalone:
	MOVQ BP, SI
	SHRL $0x10, SI
	MOVB $0xf8, (AX)
	MOVW BP, 1(AX)
	MOVB SI, 3(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  memmove_standalone

three_bytes_standalone:
	MOVB $0xf4, (AX)
	MOVW BP, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  memmove_standalone

two_bytes_standalone:
	MOVB $0xf0, (AX)
	MOVB BP, 1(AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  memmove_standalone

one_byte_standalone:
	SHLB $0x02, BP
	MOVB BP, (AX)
	ADDQ $0x01, BX
	ADDQ $0x01, AX

memmove_standalone:
	NOP

emit_lit_memmove_standalone_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_end_standalone
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_standalone_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_standalone_memmove_move_3
	JBE   emit_lit_memmove_standalone_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_standalone_memmove_move_5through7
	JE    emit_lit_memmove_standalone_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_standalone_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_standalone_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_standalone_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_standalone_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_standalone_memmove_move_129through256
	JMP   emit_lit_memmove_standalone_memmove_move_256through2048

emit_lit_memmove_standalone_memmove_move_1or2:
	MOVB (CX), BP
	MOVB -1(CX)(DX*1), CL
	MOVB BP, (AX)
	MOVB CL, -1(AX)(DX*1)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_4:
	MOVL (CX), BP
	MOVL BP, (AX)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_3:
	MOVW (CX), BP
	MOVB 2(CX), CL
	MOVW BP, (AX)
	MOVB CL, 2(AX)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_5through7:
	MOVL (CX), BP
	MOVL -4(CX)(DX*1), CX
	MOVL BP, (AX)
	MOVL CX, -4(AX)(DX*1)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_8:
	MOVQ (CX), BP
	MOVQ BP, (AX)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_9through16:
	MOVQ (CX), BP
	MOVQ -8(CX)(DX*1), CX
	MOVQ BP, (AX)
	MOVQ CX, -8(AX)(DX*1)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_standalone_memmove_move_256through2048
	JMP   emit_lit_memmove_standalone_memmove_tail

emit_literal_end_standalone:
	MOVQ BX, ret+48(FP)
	RET

// func emitLiteralAvx(dst []byte, lit []byte) int
// Requires: AVX, SSE2
TEXT Â·emitLiteralAvx(SB), NOSPLIT, $0-56
	MOVQ dst_base+0(FP), AX
	MOVQ lit_base+24(FP), CX
	MOVQ lit_len+32(FP), DX
	MOVQ DX, BX
	MOVQ DX, BP
	SUBL $0x01, BP
	JC   emit_literal_end_avx_standalone
	CMPL BP, $0x3c
	JLT  one_byte_standalone
	CMPL BP, $0x00000100
	JLT  two_bytes_standalone
	CMPL BP, $0x00010000
	JLT  three_bytes_standalone
	CMPL BP, $0x01000000
	JLT  four_bytes_standalone
	MOVB $0xfc, (AX)
	MOVL BP, 1(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  memmove_standalone

four_bytes_standalone:
	MOVQ BP, SI
	SHRL $0x10, SI
	MOVB $0xf8, (AX)
	MOVW BP, 1(AX)
	MOVB SI, 3(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  memmove_standalone

three_bytes_standalone:
	MOVB $0xf4, (AX)
	MOVW BP, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  memmove_standalone

two_bytes_standalone:
	MOVB $0xf0, (AX)
	MOVB BP, 1(AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  memmove_standalone

one_byte_standalone:
	SHLB $0x02, BP
	MOVB BP, (AX)
	ADDQ $0x01, BX
	ADDQ $0x01, AX

memmove_standalone:
	NOP

emit_lit_memmove_standalone_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_end_avx_standalone
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_standalone_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_standalone_memmove_move_3
	JBE   emit_lit_memmove_standalone_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_standalone_memmove_move_5through7
	JE    emit_lit_memmove_standalone_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_standalone_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_standalone_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_standalone_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_standalone_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_standalone_memmove_move_129through256
	JMP   emit_lit_memmove_standalone_memmove_avxUnaligned

emit_lit_memmove_standalone_memmove_move_1or2:
	MOVB (CX), BP
	MOVB -1(CX)(DX*1), SI
	MOVB BP, (AX)
	MOVB SI, -1(AX)(DX*1)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_4:
	MOVL (CX), BP
	MOVL BP, (AX)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_3:
	MOVW (CX), BP
	MOVB 2(CX), SI
	MOVW BP, (AX)
	MOVB SI, 2(AX)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_5through7:
	MOVL (CX), BP
	MOVL -4(CX)(DX*1), SI
	MOVL BP, (AX)
	MOVL SI, -4(AX)(DX*1)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_8:
	MOVQ (CX), BP
	MOVQ BP, (AX)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_9through16:
	MOVQ (CX), BP
	MOVQ -8(CX)(DX*1), SI
	MOVQ BP, (AX)
	MOVQ SI, -8(AX)(DX*1)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_standalone_memmove_move_256through2048
	JMP   emit_lit_memmove_standalone_memmove_tail

emit_lit_memmove_standalone_memmove_avxUnaligned:
	LEAQ    (CX)(DX*1), SI
	MOVQ    AX, R8
	MOVOU   -128(SI), X5
	MOVOU   -112(SI), X6
	MOVQ    $0x00000080, BP
	ANDQ    $0xffffffe0, AX
	ADDQ    $0x20, AX
	MOVOU   -96(SI), X7
	MOVOU   -80(SI), X8
	MOVQ    AX, DI
	SUBQ    R8, DI
	MOVOU   -64(SI), X9
	MOVOU   -48(SI), X10
	SUBQ    DI, DX
	MOVOU   -32(SI), X11
	MOVOU   -16(SI), X12
	VMOVDQU (CX), Y4
	ADDQ    DI, CX
	SUBQ    BP, DX

emit_lit_memmove_standalone_memmove_gobble_128_loop:
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	ADDQ    BP, CX
	VMOVDQA Y0, (AX)
	VMOVDQA Y1, 32(AX)
	VMOVDQA Y2, 64(AX)
	VMOVDQA Y3, 96(AX)
	ADDQ    BP, AX
	SUBQ    BP, DX
	JA      emit_lit_memmove_standalone_memmove_gobble_128_loop
	ADDQ    BP, DX
	ADDQ    AX, DX
	VMOVDQU Y4, (R8)
	VZEROUPPER
	MOVOU X5, -128(DX)
	MOVOU X6, -112(DX)
	MOVOU X7, -96(DX)
	MOVOU X8, -80(DX)
	MOVOU X9, -64(DX)
	MOVOU X10, -48(DX)
	MOVOU X11, -32(DX)
	MOVOU X12, -16(DX)

emit_literal_end_avx_standalone:
	MOVQ BX, ret+48(FP)
	RET

// func emitRepeat(dst []byte, offset int, length int) int
TEXT Â·emitRepeat(SB), NOSPLIT, $0-48
	XORQ BX, BX
	MOVQ dst_base+0(FP), AX
	MOVQ offset+24(FP), CX
	MOVQ length+32(FP), DX

emit_repeat_again_standalone:
	MOVQ DX, BP
	LEAQ -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_two_standalone
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offset_standalone
	CMPL CX, $0x00000800
	JLT  repeat_two_offset_standalone

cant_repeat_two_offset_standalone:
	CMPL DX, $0x00000104
	JLT  repeat_three_standalone
	CMPL DX, $0x00010100
	JLT  repeat_four_standalone
	CMPL DX, $0x0100ffff
	JLT  repeat_five_standalone
	LEAQ -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_again_standalone

repeat_five_standalone:
	LEAQ -65536(DX), DX
	MOVQ DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARQ $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  gen_emit_repeat_end

repeat_four_standalone:
	LEAQ -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  gen_emit_repeat_end

repeat_three_standalone:
	LEAQ -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  gen_emit_repeat_end

repeat_two_standalone:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_repeat_end

repeat_two_offset_standalone:
	XORQ BP, BP
	LEAQ 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX

gen_emit_repeat_end:
	MOVQ BX, ret+40(FP)
	RET

// func emitCopy(dst []byte, offset int, length int) int
TEXT Â·emitCopy(SB), NOSPLIT, $0-48
	XORQ BX, BX
	MOVQ dst_base+0(FP), AX
	MOVQ offset+24(FP), CX
	MOVQ length+32(FP), DX
	CMPL CX, $0x00010000
	JL   two_byte_offset_standalone
	CMPL DX, $0x40
	JLE  four_bytes_remain_standalone
	MOVB $0xff, (AX)
	MOVD CX, 1(AX)
	LEAQ -64(DX), DX
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	CMPL DX, $0x04
	JL   four_bytes_remain_standalone

emit_repeat_again_standalone_emit_copy:
	MOVQ DX, BP
	LEAQ -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_two_standalone_emit_copy
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offset_standalone_emit_copy
	CMPL CX, $0x00000800
	JLT  repeat_two_offset_standalone_emit_copy

cant_repeat_two_offset_standalone_emit_copy:
	CMPL DX, $0x00000104
	JLT  repeat_three_standalone_emit_copy
	CMPL DX, $0x00010100
	JLT  repeat_four_standalone_emit_copy
	CMPL DX, $0x0100ffff
	JLT  repeat_five_standalone_emit_copy
	LEAQ -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_again_standalone_emit_copy

repeat_five_standalone_emit_copy:
	LEAQ -65536(DX), DX
	MOVQ DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARQ $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  gen_emit_copy_end

repeat_four_standalone_emit_copy:
	LEAQ -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  gen_emit_copy_end

repeat_three_standalone_emit_copy:
	LEAQ -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  gen_emit_copy_end

repeat_two_standalone_emit_copy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

repeat_two_offset_standalone_emit_copy:
	XORQ BP, BP
	LEAQ 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

four_bytes_remain_standalone:
	TESTL DX, DX
	JZ    gen_emit_copy_end
	MOVB  $0x03, BP
	LEAQ  -4(BP)(DX*4), DX
	MOVB  DL, (AX)
	MOVD  CX, 1(AX)
	ADDQ  $0x05, BX
	ADDQ  $0x05, AX
	JMP   gen_emit_copy_end

two_byte_offset_standalone:
	CMPL DX, $0x40
	JLE  two_byte_offset_short_standalone
	MOVB $0xee, (AX)
	MOVW CX, 1(AX)
	LEAQ -60(DX), DX
	ADDQ $0x03, AX
	ADDQ $0x03, BX

emit_repeat_again_standalone_emit_copy_short:
	MOVQ DX, BP
	LEAQ -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_two_standalone_emit_copy_short
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offset_standalone_emit_copy_short
	CMPL CX, $0x00000800
	JLT  repeat_two_offset_standalone_emit_copy_short

cant_repeat_two_offset_standalone_emit_copy_short:
	CMPL DX, $0x00000104
	JLT  repeat_three_standalone_emit_copy_short
	CMPL DX, $0x00010100
	JLT  repeat_four_standalone_emit_copy_short
	CMPL DX, $0x0100ffff
	JLT  repeat_five_standalone_emit_copy_short
	LEAQ -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_again_standalone_emit_copy_short

repeat_five_standalone_emit_copy_short:
	LEAQ -65536(DX), DX
	MOVQ DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARQ $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  gen_emit_copy_end

repeat_four_standalone_emit_copy_short:
	LEAQ -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  gen_emit_copy_end

repeat_three_standalone_emit_copy_short:
	LEAQ -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  gen_emit_copy_end

repeat_two_standalone_emit_copy_short:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

repeat_two_offset_standalone_emit_copy_short:
	XORQ BP, BP
	LEAQ 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

two_byte_offset_short_standalone:
	CMPL DX, $0x0c
	JGE  emit_copy_three_standalone
	CMPL CX, $0x00000800
	JGE  emit_copy_three_standalone
	MOVB $0x01, BP
	LEAQ -16(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SHRL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

emit_copy_three_standalone:
	MOVB $0x02, BP
	LEAQ -4(BP)(DX*4), DX
	MOVB DL, (AX)
	MOVW CX, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX

gen_emit_copy_end:
	MOVQ BX, ret+40(FP)
	RET

// func matchLen(a []byte, b []byte) int
TEXT Â·matchLen(SB), NOSPLIT, $0-56
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ a_len+8(FP), DX
	XORQ BP, BP
	CMPQ DX, $0x08
	JL   matchlen_single_standalone

matchlen_loopback_standalone:
	MOVQ  (AX)(BP*1), BX
	XORQ  (CX)(BP*1), BX
	TESTQ BX, BX
	JZ    matchlen_loop_standalone
	BSFQ  BX, BX
	SARQ  $0x03, BX
	LEAQ  (BP)(BX*1), BP
	JMP   gen_match_len_end

matchlen_loop_standalone:
	LEAQ -8(DX), DX
	LEAQ 8(BP), BP
	CMPQ DX, $0x08
	JGE  matchlen_loopback_standalone

matchlen_single_standalone:
	TESTQ DX, DX
	JZ    gen_match_len_end

matchlen_single_loopback_standalone:
	MOVB (AX)(BP*1), BL
	CMPB (CX)(BP*1), BL
	JNE  gen_match_len_end
	LEAQ 1(BP), BP
	DECQ DX
	JNZ  matchlen_single_loopback_standalone

gen_match_len_end:
	MOVQ BP, ret+48(FP)
	RET
