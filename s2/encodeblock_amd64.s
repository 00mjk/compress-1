// Code generated by command: go run gen.go -out encodeblock_amd64.s -stubs encodeblock_amd64.go. DO NOT EDIT.

// +build !appengine
// +build !noasm
// +build gc

#include "textflag.h"

// func encodeBlockAsm(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm(SB), $65568-56
	MOVQ $0x00000200, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R8
	SHRQ  $0x05, AX
	SUBL  AX, CX
	MOVL  R8, 16(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  AX, 8(SP)
	LEAQ  (AX)(CX*1), CX
	MOVQ  CX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm:
	MOVQ  (CX)(AX*1), R8
	MOVL  AX, DX
	SUBL  20(SP), DX
	SHRL  $0x06, DX
	LEAL  4(AX)(DX*1), DX
	MOVL  16(SP), BX
	CMPL  DX, BX
	JGT   emit_remainder_encodeBlockAsm
	MOVL  DX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	MOVQ  R8, R11
	SHRQ  $0x08, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x30, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x30, R11
	MOVL  32(SP)(R10*1), DX
	MOVL  32(SP)(R11*1), BX
	MOVL  AX, 32(SP)(R10*1)
	LEAL  1(AX), SI
	MOVL  SI, 32(SP)(R11*1)
	MOVQ  R8, R10
	SHRQ  $0x10, R10
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x30, R10
	MOVL  AX, SI
	SUBL  24(SP), SI
	MOVL  1(CX), DI
	MOVQ  R8, R9
	SHLQ  $0x08, R9
	CMPL  R9, DI
	JNE   no_repeat_found_encodeBlockAsm
	LEAL  1(AX), DI
	MOVL  20(SP), DX
	TESTL SI, SI
	JZ    repeat_extend_back_end_encodeBlockAsm

repeat_extend_back_loop_encodeBlockAsm:
	CMPL DI, DX
	JG   repeat_extend_back_end_encodeBlockAsm
	MOVB -1(CX)(SI*1), BL
	MOVB -1(CX)(DI*1), BP
	CMPB BL, BP
	JNE  repeat_extend_back_end_encodeBlockAsm
	LEAL -1(DI), DI
	DECL SI
	JZ   repeat_extend_back_end_encodeBlockAsm
	JMP  repeat_extend_back_loop_encodeBlockAsm

repeat_extend_back_end_encodeBlockAsm:
	MOVL 20(SP), BX
	CMPL BX, DI
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm
	MOVL DI, DX
	MOVL DI, 20(SP)
	LEAQ (CX)(BX*1), R9
	SUBL BX, DX
	MOVQ dst_base+0(FP), R8
	MOVL DX, BX
	SUBL $0x01, BX
	JC   emit_literal_done_repeat_emit_encodeBlockAsm
	CMPL BX, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm
	CMPL BX, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm
	CMPL BX, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm
	CMPL BX, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm
	MOVB $0xfc, (R8)
	MOVL BX, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_repeat_emit_encodeBlockAsm

four_bytes_repeat_emit_encodeBlockAsm:
	MOVL BX, SI
	SHRL $0x10, SI
	MOVB $0xf8, (R8)
	MOVW BX, 1(R8)
	MOVB SI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_repeat_emit_encodeBlockAsm

three_bytes_repeat_emit_encodeBlockAsm:
	MOVB $0xf4, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_repeat_emit_encodeBlockAsm

two_bytes_repeat_emit_encodeBlockAsm:
	MOVB $0xf0, (R8)
	MOVB BL, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_repeat_emit_encodeBlockAsm

one_byte_repeat_emit_encodeBlockAsm:
	SHLB $0x02, BL
	MOVB BL, (R8)
	ADDQ $0x01, R8

memmove_repeat_emit_encodeBlockAsm:
	LEAQ (R8)(DX*1), R10
	MOVL DX, BX
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_tail:
	TESTQ BX, BX
	JEQ   emit_literal_done_repeat_emit_encodeBlockAsm
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_256through2048

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(BX*1), R9
	MOVB R10, (R8)
	MOVB R9, -1(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R9
	MOVW R10, (R8)
	MOVB R9, 2(R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(BX*1), R9
	MOVL R10, (R8)
	MOVL R9, -4(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(BX*1), R9
	MOVQ R10, (R8)
	MOVQ R9, -8(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(BX*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(BX*1), X2
	MOVOU -16(R9)(BX*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(BX*1)
	MOVOU X3, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(BX*1), X8
	MOVOU -112(R9)(BX*1), X9
	MOVOU -96(R9)(BX*1), X10
	MOVOU -80(R9)(BX*1), X11
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(BX*1)
	MOVOU X9, -112(R8)(BX*1)
	MOVOU X10, -96(R8)(BX*1)
	MOVOU X11, -80(R8)(BX*1)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm

emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  BX, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm_memmove_tail
	MOVQ  R10, R8

emit_literal_done_repeat_emit_encodeBlockAsm:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm:
	ADDL $0x05, AX
	MOVL AX, DX
	SUBL 24(SP), DX
	MOVL 16(SP), DX
	SUBL AX, DX
	XORL BX, BX
	CMPL DX, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_repeat_extend
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   repeat_extend_forward_end_encodeBlockAsm

matchlen_loop_repeat_extend:
	LEAL -8(DX), DX
	LEAL 8(BX), BX
	CMPL DX, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DX, DX
	JZ    repeat_extend_forward_end_encodeBlockAsm

matchlen_single_loopback_repeat_extend:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  repeat_extend_forward_end_encodeBlockAsm
	LEAL 1(BX), BX
	DECL DX
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm:
	ADDL  BX, AX
	MOVL  AX, DX
	SUBL  DI, DX
	MOVL  24(SP), BX
	MOVQ  dst_base+0(FP), R8
	MOVL  20(SP), SI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm

emit_repeat_again_match_repeat_:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_repeat_

cant_repeat_two_offset_match_repeat_:
	CMPL DX, $0x00000104
	JLT  repeat_three_match_repeat_
	CMPL DX, $0x00010100
	JLT  repeat_four_match_repeat_
	CMPL DX, $0x0100ffff
	JLT  repeat_five_match_repeat_
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_repeat_

repeat_five_match_repeat_:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_four_match_repeat_:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_three_match_repeat_:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_match_repeat_:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_offset_match_repeat_:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_as_copy_encodeBlockAsm:
	CMPL BX, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm
	CMPL DX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm
	MOVB $0xff, (R8)
	MOVL BX, 1(R8)
	LEAL -64(DX), DX
	ADDQ $0x05, R8
	CMPL DX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm

emit_repeat_again_repeat_as_copy_encodeBlockAsm_emit_copy:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm_emit_copy
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm_emit_copy
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm_emit_copy
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm_emit_copy:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_four_repeat_as_copy_encodeBlockAsm_emit_copy:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_three_repeat_as_copy_encodeBlockAsm_emit_copy:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_repeat_as_copy_encodeBlockAsm_emit_copy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm

four_bytes_remain_repeat_as_copy_encodeBlockAsm:
	TESTL DX, DX
	JZ    repeat_end_emit_encodeBlockAsm
	MOVB  $0x03, BP
	LEAL  -4(BP)(DX*4), DX
	MOVB  DL, (R8)
	MOVL  BX, 1(R8)
	ADDQ  $0x05, R8
	JMP   repeat_end_emit_encodeBlockAsm

two_byte_offset_repeat_as_copy_encodeBlockAsm:
	CMPL DX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm
	MOVB $0xee, (R8)
	MOVW BX, 1(R8)
	LEAL -60(DX), DX
	ADDQ $0x03, R8

emit_repeat_again_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm_emit_copy_short
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm_emit_copy_short
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm_emit_copy_short
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_four_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_three_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm

repeat_two_offset_repeat_as_copy_encodeBlockAsm_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm

two_byte_offset_short_repeat_as_copy_encodeBlockAsm:
	CMPL DX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm
	CMPL BX, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm
	MOVB $0x01, BP
	LEAL -16(BP)(DX*4), DX
	MOVB BL, 1(R8)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm

emit_copy_three_repeat_as_copy_encodeBlockAsm:
	MOVB $0x02, BP
	LEAL -4(BP)(DX*4), DX
	MOVB DL, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8

repeat_end_emit_encodeBlockAsm:
	MOVQ R8, dst_base+0(FP)
	MOVL 16(SP), DX
	CMPL AX, DX
	JGT  emit_remainder_encodeBlockAsm
	JMP  search_loop_encodeBlockAsm

no_repeat_found_encodeBlockAsm:
	CMPL (CX)(DX*1), R8
	SHRQ $0x08, R8
	JEQ  candidate_match_encodeBlockAsm
	MOVL 32(SP)(R10*1), DX
	CMPL (CX)(BX*1), R8
	JEQ  candidate2_match_encodeBlockAsm
	LEAL 2(AX), BX
	MOVL BX, 32(SP)(R10*1)
	SHRQ $0x08, R8
	CMPL (CX)(DX*1), R8
	JEQ  candidate3_match_encodeBlockAsm
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm

candidate3_match_encodeBlockAsm:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm

candidate2_match_encodeBlockAsm:
	LEAL -2(AX), DX
	MOVL DX, 32(SP)(R10*1)
	INCL AX
	MOVL BX, DX

candidate_match_encodeBlockAsm:
	MOVL  20(SP), BX
	TESTL DX, DX
	JZ    match_extend_back_end_encodeBlockAsm

match_extend_back_loop_encodeBlockAsm:
	CMPL AX, BX
	JG   match_extend_back_end_encodeBlockAsm
	MOVB -1(CX)(DX*1), BP
	MOVB -1(CX)(AX*1), SI
	CMPB BP, SI
	JNE  match_extend_back_end_encodeBlockAsm
	LEAL -1(AX), AX
	DECL DX
	JZ   match_extend_back_end_encodeBlockAsm
	JMP  match_extend_back_loop_encodeBlockAsm

match_extend_back_end_encodeBlockAsm:
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ dst_base+0(FP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm:
	MOVL DX, DI
	MOVL 20(SP), SI
	CMPL SI, DI
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm
	MOVL DI, BX
	MOVL DI, 20(SP)
	LEAQ (CX)(SI*1), R9
	SUBL SI, BX
	MOVQ dst_base+0(FP), R8
	MOVL BX, SI
	SUBL $0x01, SI
	JC   emit_literal_done_match_emit_encodeBlockAsm
	CMPL SI, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm
	CMPL SI, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm
	CMPL SI, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm
	CMPL SI, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm
	MOVB $0xfc, (R8)
	MOVL SI, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_match_emit_encodeBlockAsm

four_bytes_match_emit_encodeBlockAsm:
	MOVL SI, DI
	SHRL $0x10, DI
	MOVB $0xf8, (R8)
	MOVW SI, 1(R8)
	MOVB DI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_match_emit_encodeBlockAsm

three_bytes_match_emit_encodeBlockAsm:
	MOVB $0xf4, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_match_emit_encodeBlockAsm

two_bytes_match_emit_encodeBlockAsm:
	MOVB $0xf0, (R8)
	MOVB SI, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_match_emit_encodeBlockAsm

one_byte_match_emit_encodeBlockAsm:
	SHLB $0x02, SI
	MOVB SI, (R8)
	ADDQ $0x01, R8

memmove_match_emit_encodeBlockAsm:
	LEAQ (R8)(BX*1), R10
	MOVL BX, DI
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_tail:
	TESTQ DI, DI
	JEQ   emit_literal_done_match_emit_encodeBlockAsm
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(DI*1), R9
	MOVB R10, (R8)
	MOVB R9, -1(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R9
	MOVW R10, (R8)
	MOVB R9, 2(R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(DI*1), R9
	MOVL R10, (R8)
	MOVL R9, -4(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(DI*1), R9
	MOVQ R10, (R8)
	MOVQ R9, -8(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(DI*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(DI*1), X2
	MOVOU -16(R9)(DI*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(DI*1)
	MOVOU X3, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(DI*1), X8
	MOVOU -112(R9)(DI*1), X9
	MOVOU -96(R9)(DI*1), X10
	MOVOU -80(R9)(DI*1), X11
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(DI*1)
	MOVOU X9, -112(R8)(DI*1)
	MOVOU X10, -96(R8)(DI*1)
	MOVOU X11, -80(R8)(DI*1)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm

emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  DI, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm_memmove_tail
	MOVQ  R10, R8

emit_literal_done_match_emit_encodeBlockAsm:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm:
	NOP

match_nolit_loop_encodeBlockAsm:
	MOVL AX, BX
	MOVL AX, BX
	SUBL DX, BX
	MOVL BX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, DX
	MOVL 16(SP), SI
	SUBL AX, SI
	XORL BX, BX
	CMPL SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm

matchlen_loopback_match_nolit_encodeBlockAsm:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_match_nolit_encodeBlockAsm
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   match_nolit_end_encodeBlockAsm

matchlen_loop_match_nolit_encodeBlockAsm:
	LEAL -8(SI), SI
	LEAL 8(BX), BX
	CMPL SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm

matchlen_single_match_nolit_encodeBlockAsm:
	TESTL SI, SI
	JZ    match_nolit_end_encodeBlockAsm

matchlen_single_loopback_match_nolit_encodeBlockAsm:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  match_nolit_end_encodeBlockAsm
	LEAL 1(BX), BX
	DECL SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm

match_nolit_end_encodeBlockAsm:
	MOVL 24(SP), SI
	ADDL $0x04, BX
	MOVQ dst_base+0(FP), R8
	ADDL BX, AX
	CMPL SI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm
	CMPL BX, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm
	MOVB $0xff, (R8)
	MOVL SI, 1(R8)
	LEAL -64(BX), BX
	ADDQ $0x05, R8
	CMPL BX, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm

emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm_emit_copy
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy

repeat_five_match_nolit_encodeBlockAsm_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_four_match_nolit_encodeBlockAsm_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_three_match_nolit_encodeBlockAsm_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_match_nolit_encodeBlockAsm_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

four_bytes_remain_match_nolit_encodeBlockAsm:
	TESTL BX, BX
	JZ    match_nolit_emitcopy_end_encodeBlockAsm
	MOVB  $0x03, BP
	LEAL  -4(BP)(BX*4), BX
	MOVB  BL, (R8)
	MOVL  SI, 1(R8)
	ADDQ  $0x05, R8
	JMP   match_nolit_emitcopy_end_encodeBlockAsm

two_byte_offset_match_nolit_encodeBlockAsm:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm
	MOVB $0xee, (R8)
	MOVW SI, 1(R8)
	LEAL -60(BX), BX
	ADDQ $0x03, R8

emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy_short:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_four_match_nolit_encodeBlockAsm_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_three_match_nolit_encodeBlockAsm_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_match_nolit_encodeBlockAsm_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

repeat_two_offset_match_nolit_encodeBlockAsm_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

two_byte_offset_short_match_nolit_encodeBlockAsm:
	CMPL BX, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm
	CMPL SI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm
	MOVB $0x01, BP
	LEAL -16(BP)(BX*4), BX
	MOVB SI, 1(R8)
	SHRL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm

emit_copy_three_match_nolit_encodeBlockAsm:
	MOVB $0x02, BP
	LEAL -4(BP)(BX*4), BX
	MOVB BL, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8

match_nolit_emitcopy_end_encodeBlockAsm:
	MOVQ R8, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm
	CMPQ R8, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm:
	MOVQ  -2(CX)(AX*1), R8
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	SHRQ  $0x10, R8
	MOVQ  R8, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x30, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x30, R11
	MOVL  32(SP)(R10*1), BX
	MOVL  32(SP)(R11*1), BX
	LEAQ  -2(AX), R9
	MOVL  R9, 32(SP)(R10*1)
	MOVL  AX, 32(SP)(R11*1)
	CMPL  (CX), R8
	JEQ   match_nolit_loop_encodeBlockAsm
	INCL  AX
	JMP   search_loop_encodeBlockAsm

emit_remainder_encodeBlockAsm:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), BX
	LEAQ (BX)(AX*1), BX
	CMPQ BX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), CX
	SUBL DX, BX
	MOVQ dst_base+0(FP), AX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm
	MOVB $0xfc, (AX)
	MOVL DX, 1(AX)
	ADDQ $0x05, AX
	JMP  memmove_emit_remainder_encodeBlockAsm

four_bytes_emit_remainder_encodeBlockAsm:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (AX)
	MOVW DX, 1(AX)
	MOVB BP, 3(AX)
	ADDQ $0x04, AX
	JMP  memmove_emit_remainder_encodeBlockAsm

three_bytes_emit_remainder_encodeBlockAsm:
	MOVB $0xf4, (AX)
	MOVW DX, 1(AX)
	ADDQ $0x03, AX
	JMP  memmove_emit_remainder_encodeBlockAsm

two_bytes_emit_remainder_encodeBlockAsm:
	MOVB $0xf0, (AX)
	MOVB DL, 1(AX)
	ADDQ $0x02, AX
	JMP  memmove_emit_remainder_encodeBlockAsm

one_byte_emit_remainder_encodeBlockAsm:
	SHLB $0x02, DL
	MOVB DL, (AX)
	ADDQ $0x01, AX

memmove_emit_remainder_encodeBlockAsm:
	LEAQ (AX)(BX*1), BP
	MOVL BX, DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_1or2:
	MOVB (CX), BL
	MOVB -1(CX)(DX*1), CL
	MOVB BL, (AX)
	MOVB CL, -1(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_4:
	MOVL (CX), BX
	MOVL BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_3:
	MOVW (CX), BX
	MOVB 2(CX), CL
	MOVW BX, (AX)
	MOVB CL, 2(AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_5through7:
	MOVL (CX), BX
	MOVL -4(CX)(DX*1), CX
	MOVL BX, (AX)
	MOVL CX, -4(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_8:
	MOVQ (CX), BX
	MOVQ BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_9through16:
	MOVQ (CX), BX
	MOVQ -8(CX)(DX*1), CX
	MOVQ BX, (AX)
	MOVQ CX, -8(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm

emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm_memmove_tail
	MOVQ  BP, AX

emit_literal_done_emit_remainder_encodeBlockAsm:
	MOVQ AX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm14B(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm14B(SB), $16416-56
	MOVQ $0x00000080, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm14B:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm14B
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R8
	SHRQ  $0x05, AX
	SUBL  AX, CX
	MOVL  R8, 16(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  AX, 8(SP)
	LEAQ  (AX)(CX*1), CX
	MOVQ  CX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm14B:
	MOVQ  (CX)(AX*1), R8
	MOVL  AX, DX
	SUBL  20(SP), DX
	SHRL  $0x05, DX
	LEAL  4(AX)(DX*1), DX
	MOVL  16(SP), BX
	CMPL  DX, BX
	JGT   emit_remainder_encodeBlockAsm14B
	MOVL  DX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	MOVQ  R8, R11
	SHRQ  $0x08, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x32, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x32, R11
	MOVL  32(SP)(R10*1), DX
	MOVL  32(SP)(R11*1), BX
	MOVL  AX, 32(SP)(R10*1)
	LEAL  1(AX), SI
	MOVL  SI, 32(SP)(R11*1)
	MOVQ  R8, R10
	SHRQ  $0x10, R10
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x32, R10
	MOVL  AX, SI
	SUBL  24(SP), SI
	MOVL  1(CX), DI
	MOVQ  R8, R9
	SHLQ  $0x08, R9
	CMPL  R9, DI
	JNE   no_repeat_found_encodeBlockAsm14B
	LEAL  1(AX), DI
	MOVL  20(SP), DX
	TESTL SI, SI
	JZ    repeat_extend_back_end_encodeBlockAsm14B

repeat_extend_back_loop_encodeBlockAsm14B:
	CMPL DI, DX
	JG   repeat_extend_back_end_encodeBlockAsm14B
	MOVB -1(CX)(SI*1), BL
	MOVB -1(CX)(DI*1), BP
	CMPB BL, BP
	JNE  repeat_extend_back_end_encodeBlockAsm14B
	LEAL -1(DI), DI
	DECL SI
	JZ   repeat_extend_back_end_encodeBlockAsm14B
	JMP  repeat_extend_back_loop_encodeBlockAsm14B

repeat_extend_back_end_encodeBlockAsm14B:
	MOVL 20(SP), BX
	CMPL BX, DI
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm14B
	MOVL DI, DX
	MOVL DI, 20(SP)
	LEAQ (CX)(BX*1), R9
	SUBL BX, DX
	MOVQ dst_base+0(FP), R8
	MOVL DX, BX
	SUBL $0x01, BX
	JC   emit_literal_done_repeat_emit_encodeBlockAsm14B
	CMPL BX, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm14B
	CMPL BX, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm14B
	CMPL BX, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm14B
	CMPL BX, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm14B
	MOVB $0xfc, (R8)
	MOVL BX, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_repeat_emit_encodeBlockAsm14B

four_bytes_repeat_emit_encodeBlockAsm14B:
	MOVL BX, SI
	SHRL $0x10, SI
	MOVB $0xf8, (R8)
	MOVW BX, 1(R8)
	MOVB SI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_repeat_emit_encodeBlockAsm14B

three_bytes_repeat_emit_encodeBlockAsm14B:
	MOVB $0xf4, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_repeat_emit_encodeBlockAsm14B

two_bytes_repeat_emit_encodeBlockAsm14B:
	MOVB $0xf0, (R8)
	MOVB BL, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_repeat_emit_encodeBlockAsm14B

one_byte_repeat_emit_encodeBlockAsm14B:
	SHLB $0x02, BL
	MOVB BL, (R8)
	ADDQ $0x01, R8

memmove_repeat_emit_encodeBlockAsm14B:
	LEAQ (R8)(DX*1), R10
	MOVL DX, BX
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_tail:
	TESTQ BX, BX
	JEQ   emit_literal_done_repeat_emit_encodeBlockAsm14B
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_256through2048

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(BX*1), R9
	MOVB R10, (R8)
	MOVB R9, -1(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R9
	MOVW R10, (R8)
	MOVB R9, 2(R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(BX*1), R9
	MOVL R10, (R8)
	MOVL R9, -4(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(BX*1), R9
	MOVQ R10, (R8)
	MOVQ R9, -8(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(BX*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(BX*1), X2
	MOVOU -16(R9)(BX*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(BX*1)
	MOVOU X3, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(BX*1), X8
	MOVOU -112(R9)(BX*1), X9
	MOVOU -96(R9)(BX*1), X10
	MOVOU -80(R9)(BX*1), X11
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(BX*1)
	MOVOU X9, -112(R8)(BX*1)
	MOVOU X10, -96(R8)(BX*1)
	MOVOU X11, -80(R8)(BX*1)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm14B

emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  BX, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm14B_memmove_tail
	MOVQ  R10, R8

emit_literal_done_repeat_emit_encodeBlockAsm14B:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm14B:
	ADDL $0x05, AX
	MOVL AX, DX
	SUBL 24(SP), DX
	MOVL 16(SP), DX
	SUBL AX, DX
	XORL BX, BX
	CMPL DX, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_repeat_extend
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   repeat_extend_forward_end_encodeBlockAsm14B

matchlen_loop_repeat_extend:
	LEAL -8(DX), DX
	LEAL 8(BX), BX
	CMPL DX, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DX, DX
	JZ    repeat_extend_forward_end_encodeBlockAsm14B

matchlen_single_loopback_repeat_extend:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  repeat_extend_forward_end_encodeBlockAsm14B
	LEAL 1(BX), BX
	DECL DX
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm14B:
	ADDL  BX, AX
	MOVL  AX, DX
	SUBL  DI, DX
	MOVL  24(SP), BX
	MOVQ  dst_base+0(FP), R8
	MOVL  20(SP), SI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm14B

emit_repeat_again_match_repeat_:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_repeat_

cant_repeat_two_offset_match_repeat_:
	CMPL DX, $0x00000104
	JLT  repeat_three_match_repeat_
	CMPL DX, $0x00010100
	JLT  repeat_four_match_repeat_
	CMPL DX, $0x0100ffff
	JLT  repeat_five_match_repeat_
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_repeat_

repeat_five_match_repeat_:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_four_match_repeat_:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_three_match_repeat_:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_two_match_repeat_:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_two_offset_match_repeat_:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_as_copy_encodeBlockAsm14B:
	CMPL BX, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm14B
	CMPL DX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm14B
	MOVB $0xff, (R8)
	MOVL BX, 1(R8)
	LEAL -64(DX), DX
	ADDQ $0x05, R8
	CMPL DX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm14B

emit_repeat_again_repeat_as_copy_encodeBlockAsm14B_emit_copy:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm14B_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm14B_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm14B_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm14B_emit_copy:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm14B_emit_copy
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm14B_emit_copy
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm14B_emit_copy
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm14B_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm14B_emit_copy:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_four_repeat_as_copy_encodeBlockAsm14B_emit_copy:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_three_repeat_as_copy_encodeBlockAsm14B_emit_copy:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_two_repeat_as_copy_encodeBlockAsm14B_emit_copy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_two_offset_repeat_as_copy_encodeBlockAsm14B_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

four_bytes_remain_repeat_as_copy_encodeBlockAsm14B:
	TESTL DX, DX
	JZ    repeat_end_emit_encodeBlockAsm14B
	MOVB  $0x03, BP
	LEAL  -4(BP)(DX*4), DX
	MOVB  DL, (R8)
	MOVL  BX, 1(R8)
	ADDQ  $0x05, R8
	JMP   repeat_end_emit_encodeBlockAsm14B

two_byte_offset_repeat_as_copy_encodeBlockAsm14B:
	CMPL DX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm14B
	MOVB $0xee, (R8)
	MOVW BX, 1(R8)
	LEAL -60(DX), DX
	ADDQ $0x03, R8

emit_repeat_again_repeat_as_copy_encodeBlockAsm14B_emit_copy_short:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm14B_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm14B_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm14B_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm14B_emit_copy_short:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm14B_emit_copy_short
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm14B_emit_copy_short
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm14B_emit_copy_short
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm14B_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm14B_emit_copy_short:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_four_repeat_as_copy_encodeBlockAsm14B_emit_copy_short:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_three_repeat_as_copy_encodeBlockAsm14B_emit_copy_short:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_two_repeat_as_copy_encodeBlockAsm14B_emit_copy_short:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

repeat_two_offset_repeat_as_copy_encodeBlockAsm14B_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

two_byte_offset_short_repeat_as_copy_encodeBlockAsm14B:
	CMPL DX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm14B
	CMPL BX, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm14B
	MOVB $0x01, BP
	LEAL -16(BP)(DX*4), DX
	MOVB BL, 1(R8)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14B

emit_copy_three_repeat_as_copy_encodeBlockAsm14B:
	MOVB $0x02, BP
	LEAL -4(BP)(DX*4), DX
	MOVB DL, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8

repeat_end_emit_encodeBlockAsm14B:
	MOVQ R8, dst_base+0(FP)
	MOVL 16(SP), DX
	CMPL AX, DX
	JGT  emit_remainder_encodeBlockAsm14B
	JMP  search_loop_encodeBlockAsm14B

no_repeat_found_encodeBlockAsm14B:
	CMPL (CX)(DX*1), R8
	SHRQ $0x08, R8
	JEQ  candidate_match_encodeBlockAsm14B
	MOVL 32(SP)(R10*1), DX
	CMPL (CX)(BX*1), R8
	JEQ  candidate2_match_encodeBlockAsm14B
	LEAL 2(AX), BX
	MOVL BX, 32(SP)(R10*1)
	SHRQ $0x08, R8
	CMPL (CX)(DX*1), R8
	JEQ  candidate3_match_encodeBlockAsm14B
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm14B

candidate3_match_encodeBlockAsm14B:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm14B

candidate2_match_encodeBlockAsm14B:
	LEAL -2(AX), DX
	MOVL DX, 32(SP)(R10*1)
	INCL AX
	MOVL BX, DX

candidate_match_encodeBlockAsm14B:
	MOVL  20(SP), BX
	TESTL DX, DX
	JZ    match_extend_back_end_encodeBlockAsm14B

match_extend_back_loop_encodeBlockAsm14B:
	CMPL AX, BX
	JG   match_extend_back_end_encodeBlockAsm14B
	MOVB -1(CX)(DX*1), BP
	MOVB -1(CX)(AX*1), SI
	CMPB BP, SI
	JNE  match_extend_back_end_encodeBlockAsm14B
	LEAL -1(AX), AX
	DECL DX
	JZ   match_extend_back_end_encodeBlockAsm14B
	JMP  match_extend_back_loop_encodeBlockAsm14B

match_extend_back_end_encodeBlockAsm14B:
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ dst_base+0(FP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm14B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm14B:
	MOVL DX, DI
	MOVL 20(SP), SI
	CMPL SI, DI
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm14B
	MOVL DI, BX
	MOVL DI, 20(SP)
	LEAQ (CX)(SI*1), R9
	SUBL SI, BX
	MOVQ dst_base+0(FP), R8
	MOVL BX, SI
	SUBL $0x01, SI
	JC   emit_literal_done_match_emit_encodeBlockAsm14B
	CMPL SI, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm14B
	CMPL SI, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm14B
	CMPL SI, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm14B
	CMPL SI, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm14B
	MOVB $0xfc, (R8)
	MOVL SI, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_match_emit_encodeBlockAsm14B

four_bytes_match_emit_encodeBlockAsm14B:
	MOVL SI, DI
	SHRL $0x10, DI
	MOVB $0xf8, (R8)
	MOVW SI, 1(R8)
	MOVB DI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_match_emit_encodeBlockAsm14B

three_bytes_match_emit_encodeBlockAsm14B:
	MOVB $0xf4, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_match_emit_encodeBlockAsm14B

two_bytes_match_emit_encodeBlockAsm14B:
	MOVB $0xf0, (R8)
	MOVB SI, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_match_emit_encodeBlockAsm14B

one_byte_match_emit_encodeBlockAsm14B:
	SHLB $0x02, SI
	MOVB SI, (R8)
	ADDQ $0x01, R8

memmove_match_emit_encodeBlockAsm14B:
	LEAQ (R8)(BX*1), R10
	MOVL BX, DI
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_tail:
	TESTQ DI, DI
	JEQ   emit_literal_done_match_emit_encodeBlockAsm14B
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(DI*1), R9
	MOVB R10, (R8)
	MOVB R9, -1(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R9
	MOVW R10, (R8)
	MOVB R9, 2(R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(DI*1), R9
	MOVL R10, (R8)
	MOVL R9, -4(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(DI*1), R9
	MOVQ R10, (R8)
	MOVQ R9, -8(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(DI*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(DI*1), X2
	MOVOU -16(R9)(DI*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(DI*1)
	MOVOU X3, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(DI*1), X8
	MOVOU -112(R9)(DI*1), X9
	MOVOU -96(R9)(DI*1), X10
	MOVOU -80(R9)(DI*1), X11
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(DI*1)
	MOVOU X9, -112(R8)(DI*1)
	MOVOU X10, -96(R8)(DI*1)
	MOVOU X11, -80(R8)(DI*1)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14B

emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  DI, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm14B_memmove_tail
	MOVQ  R10, R8

emit_literal_done_match_emit_encodeBlockAsm14B:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm14B:
	NOP

match_nolit_loop_encodeBlockAsm14B:
	MOVL AX, BX
	MOVL AX, BX
	SUBL DX, BX
	MOVL BX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, DX
	MOVL 16(SP), SI
	SUBL AX, SI
	XORL BX, BX
	CMPL SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm14B

matchlen_loopback_match_nolit_encodeBlockAsm14B:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_match_nolit_encodeBlockAsm14B
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   match_nolit_end_encodeBlockAsm14B

matchlen_loop_match_nolit_encodeBlockAsm14B:
	LEAL -8(SI), SI
	LEAL 8(BX), BX
	CMPL SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm14B

matchlen_single_match_nolit_encodeBlockAsm14B:
	TESTL SI, SI
	JZ    match_nolit_end_encodeBlockAsm14B

matchlen_single_loopback_match_nolit_encodeBlockAsm14B:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  match_nolit_end_encodeBlockAsm14B
	LEAL 1(BX), BX
	DECL SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm14B

match_nolit_end_encodeBlockAsm14B:
	MOVL 24(SP), SI
	ADDL $0x04, BX
	MOVQ dst_base+0(FP), R8
	ADDL BX, AX
	CMPL SI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm14B
	CMPL BX, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm14B
	MOVB $0xff, (R8)
	MOVL SI, 1(R8)
	LEAL -64(BX), BX
	ADDQ $0x05, R8
	CMPL BX, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm14B

emit_repeat_again_match_nolit_encodeBlockAsm14B_emit_copy:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm14B_emit_copy
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm14B_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm14B_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm14B_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm14B_emit_copy

repeat_five_match_nolit_encodeBlockAsm14B_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_four_match_nolit_encodeBlockAsm14B_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_three_match_nolit_encodeBlockAsm14B_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_two_match_nolit_encodeBlockAsm14B_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

four_bytes_remain_match_nolit_encodeBlockAsm14B:
	TESTL BX, BX
	JZ    match_nolit_emitcopy_end_encodeBlockAsm14B
	MOVB  $0x03, BP
	LEAL  -4(BP)(BX*4), BX
	MOVB  BL, (R8)
	MOVL  SI, 1(R8)
	ADDQ  $0x05, R8
	JMP   match_nolit_emitcopy_end_encodeBlockAsm14B

two_byte_offset_match_nolit_encodeBlockAsm14B:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm14B
	MOVB $0xee, (R8)
	MOVW SI, 1(R8)
	LEAL -60(BX), BX
	ADDQ $0x03, R8

emit_repeat_again_match_nolit_encodeBlockAsm14B_emit_copy_short:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm14B_emit_copy_short
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy_short
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm14B_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm14B_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm14B_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm14B_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm14B_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_four_match_nolit_encodeBlockAsm14B_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_three_match_nolit_encodeBlockAsm14B_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_two_match_nolit_encodeBlockAsm14B_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

repeat_two_offset_match_nolit_encodeBlockAsm14B_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

two_byte_offset_short_match_nolit_encodeBlockAsm14B:
	CMPL BX, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm14B
	CMPL SI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm14B
	MOVB $0x01, BP
	LEAL -16(BP)(BX*4), BX
	MOVB SI, 1(R8)
	SHRL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14B

emit_copy_three_match_nolit_encodeBlockAsm14B:
	MOVB $0x02, BP
	LEAL -4(BP)(BX*4), BX
	MOVB BL, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8

match_nolit_emitcopy_end_encodeBlockAsm14B:
	MOVQ R8, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm14B
	CMPQ R8, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm14B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm14B:
	MOVQ  -2(CX)(AX*1), R8
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	SHRQ  $0x10, R8
	MOVQ  R8, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x32, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x32, R11
	MOVL  32(SP)(R10*1), BX
	MOVL  32(SP)(R11*1), BX
	LEAQ  -2(AX), R9
	MOVL  R9, 32(SP)(R10*1)
	MOVL  AX, 32(SP)(R11*1)
	CMPL  (CX), R8
	JEQ   match_nolit_loop_encodeBlockAsm14B
	INCL  AX
	JMP   search_loop_encodeBlockAsm14B

emit_remainder_encodeBlockAsm14B:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), BX
	LEAQ (BX)(AX*1), BX
	CMPQ BX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm14B
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm14B:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm14B
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), CX
	SUBL DX, BX
	MOVQ dst_base+0(FP), AX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm14B
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm14B
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm14B
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm14B
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm14B
	MOVB $0xfc, (AX)
	MOVL DX, 1(AX)
	ADDQ $0x05, AX
	JMP  memmove_emit_remainder_encodeBlockAsm14B

four_bytes_emit_remainder_encodeBlockAsm14B:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (AX)
	MOVW DX, 1(AX)
	MOVB BP, 3(AX)
	ADDQ $0x04, AX
	JMP  memmove_emit_remainder_encodeBlockAsm14B

three_bytes_emit_remainder_encodeBlockAsm14B:
	MOVB $0xf4, (AX)
	MOVW DX, 1(AX)
	ADDQ $0x03, AX
	JMP  memmove_emit_remainder_encodeBlockAsm14B

two_bytes_emit_remainder_encodeBlockAsm14B:
	MOVB $0xf0, (AX)
	MOVB DL, 1(AX)
	ADDQ $0x02, AX
	JMP  memmove_emit_remainder_encodeBlockAsm14B

one_byte_emit_remainder_encodeBlockAsm14B:
	SHLB $0x02, DL
	MOVB DL, (AX)
	ADDQ $0x01, AX

memmove_emit_remainder_encodeBlockAsm14B:
	LEAQ (AX)(BX*1), BP
	MOVL BX, DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm14B
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_1or2:
	MOVB (CX), BL
	MOVB -1(CX)(DX*1), CL
	MOVB BL, (AX)
	MOVB CL, -1(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_4:
	MOVL (CX), BX
	MOVL BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_3:
	MOVW (CX), BX
	MOVB 2(CX), CL
	MOVW BX, (AX)
	MOVB CL, 2(AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_5through7:
	MOVL (CX), BX
	MOVL -4(CX)(DX*1), CX
	MOVL BX, (AX)
	MOVL CX, -4(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_8:
	MOVQ (CX), BX
	MOVQ BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_9through16:
	MOVQ (CX), BX
	MOVQ -8(CX)(DX*1), CX
	MOVQ BX, (AX)
	MOVQ CX, -8(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14B

emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm14B_memmove_tail
	MOVQ  BP, AX

emit_literal_done_emit_remainder_encodeBlockAsm14B:
	MOVQ AX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm14B:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm12B(dst []byte, src []byte) int
// Requires: SSE2
TEXT Â·encodeBlockAsm12B(SB), $4128-56
	MOVQ $0x00000020, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm12B:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm12B
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R8
	SHRQ  $0x05, AX
	SUBL  AX, CX
	MOVL  R8, 16(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  AX, 8(SP)
	LEAQ  (AX)(CX*1), CX
	MOVQ  CX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm12B:
	MOVQ  (CX)(AX*1), R8
	MOVL  AX, DX
	SUBL  20(SP), DX
	SHRL  $0x04, DX
	LEAL  4(AX)(DX*1), DX
	MOVL  16(SP), BX
	CMPL  DX, BX
	JGT   emit_remainder_encodeBlockAsm12B
	MOVL  DX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	MOVQ  R8, R11
	SHRQ  $0x08, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x34, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x34, R11
	MOVL  32(SP)(R10*1), DX
	MOVL  32(SP)(R11*1), BX
	MOVL  AX, 32(SP)(R10*1)
	LEAL  1(AX), SI
	MOVL  SI, 32(SP)(R11*1)
	MOVQ  R8, R10
	SHRQ  $0x10, R10
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x34, R10
	MOVL  AX, SI
	SUBL  24(SP), SI
	MOVL  1(CX), DI
	MOVQ  R8, R9
	SHLQ  $0x08, R9
	CMPL  R9, DI
	JNE   no_repeat_found_encodeBlockAsm12B
	LEAL  1(AX), DI
	MOVL  20(SP), DX
	TESTL SI, SI
	JZ    repeat_extend_back_end_encodeBlockAsm12B

repeat_extend_back_loop_encodeBlockAsm12B:
	CMPL DI, DX
	JG   repeat_extend_back_end_encodeBlockAsm12B
	MOVB -1(CX)(SI*1), BL
	MOVB -1(CX)(DI*1), BP
	CMPB BL, BP
	JNE  repeat_extend_back_end_encodeBlockAsm12B
	LEAL -1(DI), DI
	DECL SI
	JZ   repeat_extend_back_end_encodeBlockAsm12B
	JMP  repeat_extend_back_loop_encodeBlockAsm12B

repeat_extend_back_end_encodeBlockAsm12B:
	MOVL 20(SP), BX
	CMPL BX, DI
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm12B
	MOVL DI, DX
	MOVL DI, 20(SP)
	LEAQ (CX)(BX*1), R9
	SUBL BX, DX
	MOVQ dst_base+0(FP), R8
	MOVL DX, BX
	SUBL $0x01, BX
	JC   emit_literal_done_repeat_emit_encodeBlockAsm12B
	CMPL BX, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm12B
	CMPL BX, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm12B
	CMPL BX, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm12B
	CMPL BX, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm12B
	MOVB $0xfc, (R8)
	MOVL BX, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_repeat_emit_encodeBlockAsm12B

four_bytes_repeat_emit_encodeBlockAsm12B:
	MOVL BX, SI
	SHRL $0x10, SI
	MOVB $0xf8, (R8)
	MOVW BX, 1(R8)
	MOVB SI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_repeat_emit_encodeBlockAsm12B

three_bytes_repeat_emit_encodeBlockAsm12B:
	MOVB $0xf4, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_repeat_emit_encodeBlockAsm12B

two_bytes_repeat_emit_encodeBlockAsm12B:
	MOVB $0xf0, (R8)
	MOVB BL, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_repeat_emit_encodeBlockAsm12B

one_byte_repeat_emit_encodeBlockAsm12B:
	SHLB $0x02, BL
	MOVB BL, (R8)
	ADDQ $0x01, R8

memmove_repeat_emit_encodeBlockAsm12B:
	LEAQ (R8)(DX*1), R10
	MOVL DX, BX
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_tail:
	TESTQ BX, BX
	JEQ   emit_literal_done_repeat_emit_encodeBlockAsm12B
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_256through2048

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(BX*1), R9
	MOVB R10, (R8)
	MOVB R9, -1(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R9
	MOVW R10, (R8)
	MOVB R9, 2(R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(BX*1), R9
	MOVL R10, (R8)
	MOVL R9, -4(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(BX*1), R9
	MOVQ R10, (R8)
	MOVQ R9, -8(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(BX*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(BX*1), X2
	MOVOU -16(R9)(BX*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(BX*1)
	MOVOU X3, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(BX*1), X8
	MOVOU -112(R9)(BX*1), X9
	MOVOU -96(R9)(BX*1), X10
	MOVOU -80(R9)(BX*1), X11
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(BX*1)
	MOVOU X9, -112(R8)(BX*1)
	MOVOU X10, -96(R8)(BX*1)
	MOVOU X11, -80(R8)(BX*1)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm12B

emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  BX, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm12B_memmove_tail
	MOVQ  R10, R8

emit_literal_done_repeat_emit_encodeBlockAsm12B:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm12B:
	ADDL $0x05, AX
	MOVL AX, DX
	SUBL 24(SP), DX
	MOVL 16(SP), DX
	SUBL AX, DX
	XORL BX, BX
	CMPL DX, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_repeat_extend
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   repeat_extend_forward_end_encodeBlockAsm12B

matchlen_loop_repeat_extend:
	LEAL -8(DX), DX
	LEAL 8(BX), BX
	CMPL DX, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DX, DX
	JZ    repeat_extend_forward_end_encodeBlockAsm12B

matchlen_single_loopback_repeat_extend:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  repeat_extend_forward_end_encodeBlockAsm12B
	LEAL 1(BX), BX
	DECL DX
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm12B:
	ADDL  BX, AX
	MOVL  AX, DX
	SUBL  DI, DX
	MOVL  24(SP), BX
	MOVQ  dst_base+0(FP), R8
	MOVL  20(SP), SI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm12B

emit_repeat_again_match_repeat_:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_repeat_

cant_repeat_two_offset_match_repeat_:
	CMPL DX, $0x00000104
	JLT  repeat_three_match_repeat_
	CMPL DX, $0x00010100
	JLT  repeat_four_match_repeat_
	CMPL DX, $0x0100ffff
	JLT  repeat_five_match_repeat_
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_repeat_

repeat_five_match_repeat_:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_four_match_repeat_:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_three_match_repeat_:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_match_repeat_:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_offset_match_repeat_:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_as_copy_encodeBlockAsm12B:
	CMPL BX, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm12B
	CMPL DX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm12B
	MOVB $0xff, (R8)
	MOVL BX, 1(R8)
	LEAL -64(DX), DX
	ADDQ $0x05, R8
	CMPL DX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm12B

emit_repeat_again_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm12B_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm12B_emit_copy
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm12B_emit_copy
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm12B_emit_copy
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm12B_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_four_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_three_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

four_bytes_remain_repeat_as_copy_encodeBlockAsm12B:
	TESTL DX, DX
	JZ    repeat_end_emit_encodeBlockAsm12B
	MOVB  $0x03, BP
	LEAL  -4(BP)(DX*4), DX
	MOVB  DL, (R8)
	MOVL  BX, 1(R8)
	ADDQ  $0x05, R8
	JMP   repeat_end_emit_encodeBlockAsm12B

two_byte_offset_repeat_as_copy_encodeBlockAsm12B:
	CMPL DX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm12B
	MOVB $0xee, (R8)
	MOVW BX, 1(R8)
	LEAL -60(DX), DX
	ADDQ $0x03, R8

emit_repeat_again_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm12B_emit_copy_short
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm12B_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_four_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_three_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

repeat_two_offset_repeat_as_copy_encodeBlockAsm12B_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

two_byte_offset_short_repeat_as_copy_encodeBlockAsm12B:
	CMPL DX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm12B
	CMPL BX, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm12B
	MOVB $0x01, BP
	LEAL -16(BP)(DX*4), DX
	MOVB BL, 1(R8)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12B

emit_copy_three_repeat_as_copy_encodeBlockAsm12B:
	MOVB $0x02, BP
	LEAL -4(BP)(DX*4), DX
	MOVB DL, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8

repeat_end_emit_encodeBlockAsm12B:
	MOVQ R8, dst_base+0(FP)
	MOVL 16(SP), DX
	CMPL AX, DX
	JGT  emit_remainder_encodeBlockAsm12B
	JMP  search_loop_encodeBlockAsm12B

no_repeat_found_encodeBlockAsm12B:
	CMPL (CX)(DX*1), R8
	SHRQ $0x08, R8
	JEQ  candidate_match_encodeBlockAsm12B
	MOVL 32(SP)(R10*1), DX
	CMPL (CX)(BX*1), R8
	JEQ  candidate2_match_encodeBlockAsm12B
	LEAL 2(AX), BX
	MOVL BX, 32(SP)(R10*1)
	SHRQ $0x08, R8
	CMPL (CX)(DX*1), R8
	JEQ  candidate3_match_encodeBlockAsm12B
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm12B

candidate3_match_encodeBlockAsm12B:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm12B

candidate2_match_encodeBlockAsm12B:
	LEAL -2(AX), DX
	MOVL DX, 32(SP)(R10*1)
	INCL AX
	MOVL BX, DX

candidate_match_encodeBlockAsm12B:
	MOVL  20(SP), BX
	TESTL DX, DX
	JZ    match_extend_back_end_encodeBlockAsm12B

match_extend_back_loop_encodeBlockAsm12B:
	CMPL AX, BX
	JG   match_extend_back_end_encodeBlockAsm12B
	MOVB -1(CX)(DX*1), BP
	MOVB -1(CX)(AX*1), SI
	CMPB BP, SI
	JNE  match_extend_back_end_encodeBlockAsm12B
	LEAL -1(AX), AX
	DECL DX
	JZ   match_extend_back_end_encodeBlockAsm12B
	JMP  match_extend_back_loop_encodeBlockAsm12B

match_extend_back_end_encodeBlockAsm12B:
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ dst_base+0(FP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm12B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm12B:
	MOVL DX, DI
	MOVL 20(SP), SI
	CMPL SI, DI
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm12B
	MOVL DI, BX
	MOVL DI, 20(SP)
	LEAQ (CX)(SI*1), R9
	SUBL SI, BX
	MOVQ dst_base+0(FP), R8
	MOVL BX, SI
	SUBL $0x01, SI
	JC   emit_literal_done_match_emit_encodeBlockAsm12B
	CMPL SI, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm12B
	CMPL SI, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm12B
	CMPL SI, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm12B
	CMPL SI, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm12B
	MOVB $0xfc, (R8)
	MOVL SI, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_match_emit_encodeBlockAsm12B

four_bytes_match_emit_encodeBlockAsm12B:
	MOVL SI, DI
	SHRL $0x10, DI
	MOVB $0xf8, (R8)
	MOVW SI, 1(R8)
	MOVB DI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_match_emit_encodeBlockAsm12B

three_bytes_match_emit_encodeBlockAsm12B:
	MOVB $0xf4, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_match_emit_encodeBlockAsm12B

two_bytes_match_emit_encodeBlockAsm12B:
	MOVB $0xf0, (R8)
	MOVB SI, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_match_emit_encodeBlockAsm12B

one_byte_match_emit_encodeBlockAsm12B:
	SHLB $0x02, SI
	MOVB SI, (R8)
	ADDQ $0x01, R8

memmove_match_emit_encodeBlockAsm12B:
	LEAQ (R8)(BX*1), R10
	MOVL BX, DI
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_tail:
	TESTQ DI, DI
	JEQ   emit_literal_done_match_emit_encodeBlockAsm12B
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_256through2048

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(DI*1), R9
	MOVB R10, (R8)
	MOVB R9, -1(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R9
	MOVW R10, (R8)
	MOVB R9, 2(R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(DI*1), R9
	MOVL R10, (R8)
	MOVL R9, -4(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(DI*1), R9
	MOVQ R10, (R8)
	MOVQ R9, -8(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(DI*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(DI*1), X2
	MOVOU -16(R9)(DI*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(DI*1)
	MOVOU X3, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(DI*1), X8
	MOVOU -112(R9)(DI*1), X9
	MOVOU -96(R9)(DI*1), X10
	MOVOU -80(R9)(DI*1), X11
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(DI*1)
	MOVOU X9, -112(R8)(DI*1)
	MOVOU X10, -96(R8)(DI*1)
	MOVOU X11, -80(R8)(DI*1)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12B

emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  DI, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12B_memmove_tail
	MOVQ  R10, R8

emit_literal_done_match_emit_encodeBlockAsm12B:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm12B:
	NOP

match_nolit_loop_encodeBlockAsm12B:
	MOVL AX, BX
	MOVL AX, BX
	SUBL DX, BX
	MOVL BX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, DX
	MOVL 16(SP), SI
	SUBL AX, SI
	XORL BX, BX
	CMPL SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm12B

matchlen_loopback_match_nolit_encodeBlockAsm12B:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_match_nolit_encodeBlockAsm12B
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   match_nolit_end_encodeBlockAsm12B

matchlen_loop_match_nolit_encodeBlockAsm12B:
	LEAL -8(SI), SI
	LEAL 8(BX), BX
	CMPL SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm12B

matchlen_single_match_nolit_encodeBlockAsm12B:
	TESTL SI, SI
	JZ    match_nolit_end_encodeBlockAsm12B

matchlen_single_loopback_match_nolit_encodeBlockAsm12B:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  match_nolit_end_encodeBlockAsm12B
	LEAL 1(BX), BX
	DECL SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm12B

match_nolit_end_encodeBlockAsm12B:
	MOVL 24(SP), SI
	ADDL $0x04, BX
	MOVQ dst_base+0(FP), R8
	ADDL BX, AX
	CMPL SI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm12B
	CMPL BX, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm12B
	MOVB $0xff, (R8)
	MOVL SI, 1(R8)
	LEAL -64(BX), BX
	ADDQ $0x05, R8
	CMPL BX, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm12B

emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12B_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12B_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy

repeat_five_match_nolit_encodeBlockAsm12B_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_four_match_nolit_encodeBlockAsm12B_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_three_match_nolit_encodeBlockAsm12B_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_match_nolit_encodeBlockAsm12B_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

four_bytes_remain_match_nolit_encodeBlockAsm12B:
	TESTL BX, BX
	JZ    match_nolit_emitcopy_end_encodeBlockAsm12B
	MOVB  $0x03, BP
	LEAL  -4(BP)(BX*4), BX
	MOVB  BL, (R8)
	MOVL  SI, 1(R8)
	ADDQ  $0x05, R8
	JMP   match_nolit_emitcopy_end_encodeBlockAsm12B

two_byte_offset_match_nolit_encodeBlockAsm12B:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm12B
	MOVB $0xee, (R8)
	MOVW SI, 1(R8)
	LEAL -60(BX), BX
	ADDQ $0x03, R8

emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy_short:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12B_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12B_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12B_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm12B_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_four_match_nolit_encodeBlockAsm12B_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_three_match_nolit_encodeBlockAsm12B_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_match_nolit_encodeBlockAsm12B_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

repeat_two_offset_match_nolit_encodeBlockAsm12B_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

two_byte_offset_short_match_nolit_encodeBlockAsm12B:
	CMPL BX, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12B
	CMPL SI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12B
	MOVB $0x01, BP
	LEAL -16(BP)(BX*4), BX
	MOVB SI, 1(R8)
	SHRL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12B

emit_copy_three_match_nolit_encodeBlockAsm12B:
	MOVB $0x02, BP
	LEAL -4(BP)(BX*4), BX
	MOVB BL, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8

match_nolit_emitcopy_end_encodeBlockAsm12B:
	MOVQ R8, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm12B
	CMPQ R8, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm12B
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm12B:
	MOVQ  -2(CX)(AX*1), R8
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	SHRQ  $0x10, R8
	MOVQ  R8, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x34, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x34, R11
	MOVL  32(SP)(R10*1), BX
	MOVL  32(SP)(R11*1), BX
	LEAQ  -2(AX), R9
	MOVL  R9, 32(SP)(R10*1)
	MOVL  AX, 32(SP)(R11*1)
	CMPL  (CX), R8
	JEQ   match_nolit_loop_encodeBlockAsm12B
	INCL  AX
	JMP   search_loop_encodeBlockAsm12B

emit_remainder_encodeBlockAsm12B:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), BX
	LEAQ (BX)(AX*1), BX
	CMPQ BX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm12B
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm12B:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm12B
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), CX
	SUBL DX, BX
	MOVQ dst_base+0(FP), AX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm12B
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm12B
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm12B
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm12B
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm12B
	MOVB $0xfc, (AX)
	MOVL DX, 1(AX)
	ADDQ $0x05, AX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

four_bytes_emit_remainder_encodeBlockAsm12B:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (AX)
	MOVW DX, 1(AX)
	MOVB BP, 3(AX)
	ADDQ $0x04, AX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

three_bytes_emit_remainder_encodeBlockAsm12B:
	MOVB $0xf4, (AX)
	MOVW DX, 1(AX)
	ADDQ $0x03, AX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

two_bytes_emit_remainder_encodeBlockAsm12B:
	MOVB $0xf0, (AX)
	MOVB DL, 1(AX)
	ADDQ $0x02, AX
	JMP  memmove_emit_remainder_encodeBlockAsm12B

one_byte_emit_remainder_encodeBlockAsm12B:
	SHLB $0x02, DL
	MOVB DL, (AX)
	ADDQ $0x01, AX

memmove_emit_remainder_encodeBlockAsm12B:
	LEAQ (AX)(BX*1), BP
	MOVL BX, DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm12B
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_256through2048

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_1or2:
	MOVB (CX), BL
	MOVB -1(CX)(DX*1), CL
	MOVB BL, (AX)
	MOVB CL, -1(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_4:
	MOVL (CX), BX
	MOVL BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_3:
	MOVW (CX), BX
	MOVB 2(CX), CL
	MOVW BX, (AX)
	MOVB CL, 2(AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_5through7:
	MOVL (CX), BX
	MOVL -4(CX)(DX*1), CX
	MOVL BX, (AX)
	MOVL CX, -4(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_8:
	MOVQ (CX), BX
	MOVQ BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_9through16:
	MOVQ (CX), BX
	MOVQ -8(CX)(DX*1), CX
	MOVQ BX, (AX)
	MOVQ CX, -8(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12B

emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12B_memmove_tail
	MOVQ  BP, AX

emit_literal_done_emit_remainder_encodeBlockAsm12B:
	MOVQ AX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm12B:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsmAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsmAvx(SB), $65568-56
	MOVQ $0x00000200, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsmAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsmAvx
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R8
	SHRQ  $0x05, AX
	SUBL  AX, CX
	MOVL  R8, 16(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  AX, 8(SP)
	LEAQ  (AX)(CX*1), CX
	MOVQ  CX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsmAvx:
	MOVQ  (CX)(AX*1), R8
	MOVL  AX, DX
	SUBL  20(SP), DX
	SHRL  $0x06, DX
	LEAL  4(AX)(DX*1), DX
	MOVL  16(SP), BX
	CMPL  DX, BX
	JGT   emit_remainder_encodeBlockAsmAvx
	MOVL  DX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	MOVQ  R8, R11
	SHRQ  $0x08, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x30, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x30, R11
	MOVL  32(SP)(R10*1), DX
	MOVL  32(SP)(R11*1), BX
	MOVL  AX, 32(SP)(R10*1)
	LEAL  1(AX), SI
	MOVL  SI, 32(SP)(R11*1)
	MOVQ  R8, R10
	SHRQ  $0x10, R10
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x30, R10
	MOVL  AX, SI
	SUBL  24(SP), SI
	MOVL  1(CX), DI
	MOVQ  R8, R9
	SHLQ  $0x08, R9
	CMPL  R9, DI
	JNE   no_repeat_found_encodeBlockAsmAvx
	LEAL  1(AX), DI
	MOVL  20(SP), DX
	TESTL SI, SI
	JZ    repeat_extend_back_end_encodeBlockAsmAvx

repeat_extend_back_loop_encodeBlockAsmAvx:
	CMPL DI, DX
	JG   repeat_extend_back_end_encodeBlockAsmAvx
	MOVB -1(CX)(SI*1), BL
	MOVB -1(CX)(DI*1), BP
	CMPB BL, BP
	JNE  repeat_extend_back_end_encodeBlockAsmAvx
	LEAL -1(DI), DI
	DECL SI
	JZ   repeat_extend_back_end_encodeBlockAsmAvx
	JMP  repeat_extend_back_loop_encodeBlockAsmAvx

repeat_extend_back_end_encodeBlockAsmAvx:
	MOVL 20(SP), BX
	CMPL BX, DI
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsmAvx
	MOVL DI, DX
	MOVL DI, 20(SP)
	LEAQ (CX)(BX*1), R9
	SUBL BX, DX
	MOVQ dst_base+0(FP), R8
	MOVL DX, BX
	SUBL $0x01, BX
	JC   emit_literal_done_repeat_emit_encodeBlockAsmAvx
	CMPL BX, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsmAvx
	CMPL BX, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsmAvx
	CMPL BX, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsmAvx
	CMPL BX, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsmAvx
	MOVB $0xfc, (R8)
	MOVL BX, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_repeat_emit_encodeBlockAsmAvx

four_bytes_repeat_emit_encodeBlockAsmAvx:
	MOVL BX, SI
	SHRL $0x10, SI
	MOVB $0xf8, (R8)
	MOVW BX, 1(R8)
	MOVB SI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_repeat_emit_encodeBlockAsmAvx

three_bytes_repeat_emit_encodeBlockAsmAvx:
	MOVB $0xf4, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_repeat_emit_encodeBlockAsmAvx

two_bytes_repeat_emit_encodeBlockAsmAvx:
	MOVB $0xf0, (R8)
	MOVB BL, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_repeat_emit_encodeBlockAsmAvx

one_byte_repeat_emit_encodeBlockAsmAvx:
	SHLB $0x02, BL
	MOVB BL, (R8)
	ADDQ $0x01, R8

memmove_repeat_emit_encodeBlockAsmAvx:
	LEAQ (R8)(DX*1), R10
	MOVL DX, BX
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_tail:
	TESTQ BX, BX
	JEQ   emit_literal_done_repeat_emit_encodeBlockAsmAvx
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_avxUnaligned

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(BX*1), R11
	MOVB R10, (R8)
	MOVB R11, -1(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R11
	MOVW R10, (R8)
	MOVB R11, 2(R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(BX*1), R11
	MOVL R10, (R8)
	MOVL R11, -4(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(BX*1), R11
	MOVQ R10, (R8)
	MOVQ R11, -8(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(BX*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(BX*1), X2
	MOVOU -16(R9)(BX*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(BX*1)
	MOVOU X3, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(BX*1), X8
	MOVOU -112(R9)(BX*1), X9
	MOVOU -96(R9)(BX*1), X10
	MOVOU -80(R9)(BX*1), X11
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(BX*1)
	MOVOU X9, -112(R8)(BX*1)
	MOVOU X10, -96(R8)(BX*1)
	MOVOU X11, -80(R8)(BX*1)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsmAvx

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  BX, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_tail

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_avxUnaligned:
	LEAQ    (R9)(BX*1), R11
	MOVQ    R8, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, R8
	ADDQ    $0x20, R8
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    R8, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, BX
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R9), Y4
	ADDQ    R12, R9
	SUBQ    R10, BX

emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_gobble_128_loop:
	VMOVDQU (R9), Y0
	VMOVDQU 32(R9), Y1
	VMOVDQU 64(R9), Y2
	VMOVDQU 96(R9), Y3
	ADDQ    R10, R9
	VMOVDQA Y0, (R8)
	VMOVDQA Y1, 32(R8)
	VMOVDQA Y2, 64(R8)
	VMOVDQA Y3, 96(R8)
	ADDQ    R10, R8
	SUBQ    R10, BX
	JA      emit_lit_memmove_repeat_emit_encodeBlockAsmAvx_memmove_gobble_128_loop
	ADDQ    R10, BX
	ADDQ    R8, BX
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(BX)
	MOVOU X6, -112(BX)
	MOVOU X7, -96(BX)
	MOVOU X8, -80(BX)
	MOVOU X9, -64(BX)
	MOVOU X10, -48(BX)
	MOVOU X11, -32(BX)
	MOVOU X12, -16(BX)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsmAvx
	MOVQ  R10, R8

emit_literal_done_repeat_emit_encodeBlockAsmAvx:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsmAvx:
	ADDL $0x05, AX
	MOVL AX, DX
	SUBL 24(SP), DX
	MOVL 16(SP), DX
	SUBL AX, DX
	XORL BX, BX
	CMPL DX, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_repeat_extend
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   repeat_extend_forward_end_encodeBlockAsmAvx

matchlen_loop_repeat_extend:
	LEAL -8(DX), DX
	LEAL 8(BX), BX
	CMPL DX, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DX, DX
	JZ    repeat_extend_forward_end_encodeBlockAsmAvx

matchlen_single_loopback_repeat_extend:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  repeat_extend_forward_end_encodeBlockAsmAvx
	LEAL 1(BX), BX
	DECL DX
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsmAvx:
	ADDL  BX, AX
	MOVL  AX, DX
	SUBL  DI, DX
	MOVL  24(SP), BX
	MOVQ  dst_base+0(FP), R8
	MOVL  20(SP), SI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsmAvx

emit_repeat_again_match_repeat_:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_repeat_

cant_repeat_two_offset_match_repeat_:
	CMPL DX, $0x00000104
	JLT  repeat_three_match_repeat_
	CMPL DX, $0x00010100
	JLT  repeat_four_match_repeat_
	CMPL DX, $0x0100ffff
	JLT  repeat_five_match_repeat_
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_repeat_

repeat_five_match_repeat_:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_four_match_repeat_:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_three_match_repeat_:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_match_repeat_:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_offset_match_repeat_:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_as_copy_encodeBlockAsmAvx:
	CMPL BX, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsmAvx
	CMPL DX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsmAvx
	MOVB $0xff, (R8)
	MOVL BX, 1(R8)
	LEAL -64(DX), DX
	ADDQ $0x05, R8
	CMPL DX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsmAvx

emit_repeat_again_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsmAvx_emit_copy
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsmAvx_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_four_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_three_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

four_bytes_remain_repeat_as_copy_encodeBlockAsmAvx:
	TESTL DX, DX
	JZ    repeat_end_emit_encodeBlockAsmAvx
	MOVB  $0x03, BP
	LEAL  -4(BP)(DX*4), DX
	MOVB  DL, (R8)
	MOVL  BX, 1(R8)
	ADDQ  $0x05, R8
	JMP   repeat_end_emit_encodeBlockAsmAvx

two_byte_offset_repeat_as_copy_encodeBlockAsmAvx:
	CMPL DX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsmAvx
	MOVB $0xee, (R8)
	MOVW BX, 1(R8)
	LEAL -60(DX), DX
	ADDQ $0x03, R8

emit_repeat_again_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_four_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_three_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsmAvx_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

two_byte_offset_short_repeat_as_copy_encodeBlockAsmAvx:
	CMPL DX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsmAvx
	CMPL BX, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsmAvx
	MOVB $0x01, BP
	LEAL -16(BP)(DX*4), DX
	MOVB BL, 1(R8)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsmAvx

emit_copy_three_repeat_as_copy_encodeBlockAsmAvx:
	MOVB $0x02, BP
	LEAL -4(BP)(DX*4), DX
	MOVB DL, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8

repeat_end_emit_encodeBlockAsmAvx:
	MOVQ R8, dst_base+0(FP)
	MOVL 16(SP), DX
	CMPL AX, DX
	JGT  emit_remainder_encodeBlockAsmAvx
	JMP  search_loop_encodeBlockAsmAvx

no_repeat_found_encodeBlockAsmAvx:
	CMPL (CX)(DX*1), R8
	SHRQ $0x08, R8
	JEQ  candidate_match_encodeBlockAsmAvx
	MOVL 32(SP)(R10*1), DX
	CMPL (CX)(BX*1), R8
	JEQ  candidate2_match_encodeBlockAsmAvx
	LEAL 2(AX), BX
	MOVL BX, 32(SP)(R10*1)
	SHRQ $0x08, R8
	CMPL (CX)(DX*1), R8
	JEQ  candidate3_match_encodeBlockAsmAvx
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsmAvx

candidate3_match_encodeBlockAsmAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsmAvx

candidate2_match_encodeBlockAsmAvx:
	LEAL -2(AX), DX
	MOVL DX, 32(SP)(R10*1)
	INCL AX
	MOVL BX, DX

candidate_match_encodeBlockAsmAvx:
	MOVL  20(SP), BX
	TESTL DX, DX
	JZ    match_extend_back_end_encodeBlockAsmAvx

match_extend_back_loop_encodeBlockAsmAvx:
	CMPL AX, BX
	JG   match_extend_back_end_encodeBlockAsmAvx
	MOVB -1(CX)(DX*1), BP
	MOVB -1(CX)(AX*1), SI
	CMPB BP, SI
	JNE  match_extend_back_end_encodeBlockAsmAvx
	LEAL -1(AX), AX
	DECL DX
	JZ   match_extend_back_end_encodeBlockAsmAvx
	JMP  match_extend_back_loop_encodeBlockAsmAvx

match_extend_back_end_encodeBlockAsmAvx:
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ dst_base+0(FP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsmAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsmAvx:
	MOVL DX, DI
	MOVL 20(SP), SI
	CMPL SI, DI
	JEQ  emit_literal_skip_match_emit_encodeBlockAsmAvx
	MOVL DI, BX
	MOVL DI, 20(SP)
	LEAQ (CX)(SI*1), R9
	SUBL SI, BX
	MOVQ dst_base+0(FP), R8
	MOVL BX, SI
	SUBL $0x01, SI
	JC   emit_literal_done_match_emit_encodeBlockAsmAvx
	CMPL SI, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsmAvx
	CMPL SI, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsmAvx
	CMPL SI, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsmAvx
	CMPL SI, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsmAvx
	MOVB $0xfc, (R8)
	MOVL SI, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_match_emit_encodeBlockAsmAvx

four_bytes_match_emit_encodeBlockAsmAvx:
	MOVL SI, DI
	SHRL $0x10, DI
	MOVB $0xf8, (R8)
	MOVW SI, 1(R8)
	MOVB DI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_match_emit_encodeBlockAsmAvx

three_bytes_match_emit_encodeBlockAsmAvx:
	MOVB $0xf4, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_match_emit_encodeBlockAsmAvx

two_bytes_match_emit_encodeBlockAsmAvx:
	MOVB $0xf0, (R8)
	MOVB SI, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_match_emit_encodeBlockAsmAvx

one_byte_match_emit_encodeBlockAsmAvx:
	SHLB $0x02, SI
	MOVB SI, (R8)
	ADDQ $0x01, R8

memmove_match_emit_encodeBlockAsmAvx:
	LEAQ (R8)(BX*1), R10
	MOVL BX, DI
	NOP

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   emit_literal_done_match_emit_encodeBlockAsmAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(DI*1), R11
	MOVB R10, (R8)
	MOVB R11, -1(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R11
	MOVW R10, (R8)
	MOVB R11, 2(R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(DI*1), R11
	MOVL R10, (R8)
	MOVL R11, -4(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(DI*1), R11
	MOVQ R10, (R8)
	MOVQ R11, -8(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(DI*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(DI*1), X2
	MOVOU -16(R9)(DI*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(DI*1)
	MOVOU X3, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(DI*1), X8
	MOVOU -112(R9)(DI*1), X9
	MOVOU -96(R9)(DI*1), X10
	MOVOU -80(R9)(DI*1), X11
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(DI*1)
	MOVOU X9, -112(R8)(DI*1)
	MOVOU X10, -96(R8)(DI*1)
	MOVOU X11, -80(R8)(DI*1)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  DI, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_avxUnaligned:
	LEAQ    (R9)(DI*1), R11
	MOVQ    R8, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, R8
	ADDQ    $0x20, R8
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    R8, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, DI
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R9), Y4
	ADDQ    R12, R9
	SUBQ    R10, DI

emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_gobble_128_loop:
	VMOVDQU (R9), Y0
	VMOVDQU 32(R9), Y1
	VMOVDQU 64(R9), Y2
	VMOVDQU 96(R9), Y3
	ADDQ    R10, R9
	VMOVDQA Y0, (R8)
	VMOVDQA Y1, 32(R8)
	VMOVDQA Y2, 64(R8)
	VMOVDQA Y3, 96(R8)
	ADDQ    R10, R8
	SUBQ    R10, DI
	JA      emit_lit_memmove_match_emit_encodeBlockAsmAvx_memmove_gobble_128_loop
	ADDQ    R10, DI
	ADDQ    R8, DI
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)
	JMP   emit_literal_done_match_emit_encodeBlockAsmAvx
	MOVQ  R10, R8

emit_literal_done_match_emit_encodeBlockAsmAvx:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsmAvx:
	NOP

match_nolit_loop_encodeBlockAsmAvx:
	MOVL AX, BX
	MOVL AX, BX
	SUBL DX, BX
	MOVL BX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, DX
	MOVL 16(SP), SI
	SUBL AX, SI
	XORL BX, BX
	CMPL SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsmAvx

matchlen_loopback_match_nolit_encodeBlockAsmAvx:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_match_nolit_encodeBlockAsmAvx
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   match_nolit_end_encodeBlockAsmAvx

matchlen_loop_match_nolit_encodeBlockAsmAvx:
	LEAL -8(SI), SI
	LEAL 8(BX), BX
	CMPL SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsmAvx

matchlen_single_match_nolit_encodeBlockAsmAvx:
	TESTL SI, SI
	JZ    match_nolit_end_encodeBlockAsmAvx

matchlen_single_loopback_match_nolit_encodeBlockAsmAvx:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  match_nolit_end_encodeBlockAsmAvx
	LEAL 1(BX), BX
	DECL SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsmAvx

match_nolit_end_encodeBlockAsmAvx:
	MOVL 24(SP), SI
	ADDL $0x04, BX
	MOVQ dst_base+0(FP), R8
	ADDL BX, AX
	CMPL SI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsmAvx
	CMPL BX, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsmAvx
	MOVB $0xff, (R8)
	MOVL SI, 1(R8)
	LEAL -64(BX), BX
	ADDQ $0x05, R8
	CMPL BX, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsmAvx

emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

four_bytes_remain_match_nolit_encodeBlockAsmAvx:
	TESTL BX, BX
	JZ    match_nolit_emitcopy_end_encodeBlockAsmAvx
	MOVB  $0x03, BP
	LEAL  -4(BP)(BX*4), BX
	MOVB  BL, (R8)
	MOVL  SI, 1(R8)
	ADDQ  $0x05, R8
	JMP   match_nolit_emitcopy_end_encodeBlockAsmAvx

two_byte_offset_match_nolit_encodeBlockAsmAvx:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsmAvx
	MOVB $0xee, (R8)
	MOVW SI, 1(R8)
	LEAL -60(BX), BX
	ADDQ $0x03, R8

emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsmAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_four_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_three_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

repeat_two_offset_match_nolit_encodeBlockAsmAvx_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

two_byte_offset_short_match_nolit_encodeBlockAsmAvx:
	CMPL BX, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsmAvx
	CMPL SI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsmAvx
	MOVB $0x01, BP
	LEAL -16(BP)(BX*4), BX
	MOVB SI, 1(R8)
	SHRL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsmAvx

emit_copy_three_match_nolit_encodeBlockAsmAvx:
	MOVB $0x02, BP
	LEAL -4(BP)(BX*4), BX
	MOVB BL, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8

match_nolit_emitcopy_end_encodeBlockAsmAvx:
	MOVQ R8, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsmAvx
	CMPQ R8, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsmAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsmAvx:
	MOVQ  -2(CX)(AX*1), R8
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	SHRQ  $0x10, R8
	MOVQ  R8, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x30, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x30, R11
	MOVL  32(SP)(R10*1), BX
	MOVL  32(SP)(R11*1), BX
	LEAQ  -2(AX), R9
	MOVL  R9, 32(SP)(R10*1)
	MOVL  AX, 32(SP)(R11*1)
	CMPL  (CX), R8
	JEQ   match_nolit_loop_encodeBlockAsmAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsmAvx

emit_remainder_encodeBlockAsmAvx:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), BX
	LEAQ (BX)(AX*1), BX
	CMPQ BX, (SP)
	JL   emit_remainder_ok_encodeBlockAsmAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsmAvx:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsmAvx
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), CX
	SUBL DX, BX
	MOVQ dst_base+0(FP), AX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsmAvx
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsmAvx
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsmAvx
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsmAvx
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsmAvx
	MOVB $0xfc, (AX)
	MOVL DX, 1(AX)
	ADDQ $0x05, AX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

four_bytes_emit_remainder_encodeBlockAsmAvx:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (AX)
	MOVW DX, 1(AX)
	MOVB BP, 3(AX)
	ADDQ $0x04, AX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

three_bytes_emit_remainder_encodeBlockAsmAvx:
	MOVB $0xf4, (AX)
	MOVW DX, 1(AX)
	ADDQ $0x03, AX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

two_bytes_emit_remainder_encodeBlockAsmAvx:
	MOVB $0xf0, (AX)
	MOVB DL, 1(AX)
	ADDQ $0x02, AX
	JMP  memmove_emit_remainder_encodeBlockAsmAvx

one_byte_emit_remainder_encodeBlockAsmAvx:
	SHLB $0x02, DL
	MOVB DL, (AX)
	ADDQ $0x01, AX

memmove_emit_remainder_encodeBlockAsmAvx:
	LEAQ (AX)(BX*1), BP
	MOVL BX, DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsmAvx
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_1or2:
	MOVB (CX), BL
	MOVB -1(CX)(DX*1), BP
	MOVB BL, (AX)
	MOVB BP, -1(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_4:
	MOVL (CX), BX
	MOVL BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_3:
	MOVW (CX), BX
	MOVB 2(CX), BP
	MOVW BX, (AX)
	MOVB BP, 2(AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_5through7:
	MOVL (CX), BX
	MOVL -4(CX)(DX*1), BP
	MOVL BX, (AX)
	MOVL BP, -4(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_8:
	MOVQ (CX), BX
	MOVQ BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_9through16:
	MOVQ (CX), BX
	MOVQ -8(CX)(DX*1), BP
	MOVQ BX, (AX)
	MOVQ BP, -8(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_avxUnaligned:
	LEAQ    (CX)(DX*1), BP
	MOVQ    AX, DI
	MOVOU   -128(BP), X5
	MOVOU   -112(BP), X6
	MOVQ    $0x00000080, BX
	ANDQ    $0xffffffe0, AX
	ADDQ    $0x20, AX
	MOVOU   -96(BP), X7
	MOVOU   -80(BP), X8
	MOVQ    AX, SI
	SUBQ    DI, SI
	MOVOU   -64(BP), X9
	MOVOU   -48(BP), X10
	SUBQ    SI, DX
	MOVOU   -32(BP), X11
	MOVOU   -16(BP), X12
	VMOVDQU (CX), Y4
	ADDQ    SI, CX
	SUBQ    BX, DX

emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_gobble_128_loop:
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	ADDQ    BX, CX
	VMOVDQA Y0, (AX)
	VMOVDQA Y1, 32(AX)
	VMOVDQA Y2, 64(AX)
	VMOVDQA Y3, 96(AX)
	ADDQ    BX, AX
	SUBQ    BX, DX
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsmAvx_memmove_gobble_128_loop
	ADDQ    BX, DX
	ADDQ    AX, DX
	VMOVDQU Y4, (DI)
	VZEROUPPER
	MOVOU X5, -128(DX)
	MOVOU X6, -112(DX)
	MOVOU X7, -96(DX)
	MOVOU X8, -80(DX)
	MOVOU X9, -64(DX)
	MOVOU X10, -48(DX)
	MOVOU X11, -32(DX)
	MOVOU X12, -16(DX)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsmAvx
	MOVQ  BP, AX

emit_literal_done_emit_remainder_encodeBlockAsmAvx:
	MOVQ AX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsmAvx:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm14BAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsm14BAvx(SB), $16416-56
	MOVQ $0x00000080, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm14BAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm14BAvx
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R8
	SHRQ  $0x05, AX
	SUBL  AX, CX
	MOVL  R8, 16(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  AX, 8(SP)
	LEAQ  (AX)(CX*1), CX
	MOVQ  CX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm14BAvx:
	MOVQ  (CX)(AX*1), R8
	MOVL  AX, DX
	SUBL  20(SP), DX
	SHRL  $0x05, DX
	LEAL  4(AX)(DX*1), DX
	MOVL  16(SP), BX
	CMPL  DX, BX
	JGT   emit_remainder_encodeBlockAsm14BAvx
	MOVL  DX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	MOVQ  R8, R11
	SHRQ  $0x08, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x32, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x32, R11
	MOVL  32(SP)(R10*1), DX
	MOVL  32(SP)(R11*1), BX
	MOVL  AX, 32(SP)(R10*1)
	LEAL  1(AX), SI
	MOVL  SI, 32(SP)(R11*1)
	MOVQ  R8, R10
	SHRQ  $0x10, R10
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x32, R10
	MOVL  AX, SI
	SUBL  24(SP), SI
	MOVL  1(CX), DI
	MOVQ  R8, R9
	SHLQ  $0x08, R9
	CMPL  R9, DI
	JNE   no_repeat_found_encodeBlockAsm14BAvx
	LEAL  1(AX), DI
	MOVL  20(SP), DX
	TESTL SI, SI
	JZ    repeat_extend_back_end_encodeBlockAsm14BAvx

repeat_extend_back_loop_encodeBlockAsm14BAvx:
	CMPL DI, DX
	JG   repeat_extend_back_end_encodeBlockAsm14BAvx
	MOVB -1(CX)(SI*1), BL
	MOVB -1(CX)(DI*1), BP
	CMPB BL, BP
	JNE  repeat_extend_back_end_encodeBlockAsm14BAvx
	LEAL -1(DI), DI
	DECL SI
	JZ   repeat_extend_back_end_encodeBlockAsm14BAvx
	JMP  repeat_extend_back_loop_encodeBlockAsm14BAvx

repeat_extend_back_end_encodeBlockAsm14BAvx:
	MOVL 20(SP), BX
	CMPL BX, DI
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm14BAvx
	MOVL DI, DX
	MOVL DI, 20(SP)
	LEAQ (CX)(BX*1), R9
	SUBL BX, DX
	MOVQ dst_base+0(FP), R8
	MOVL DX, BX
	SUBL $0x01, BX
	JC   emit_literal_done_repeat_emit_encodeBlockAsm14BAvx
	CMPL BX, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm14BAvx
	CMPL BX, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm14BAvx
	CMPL BX, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm14BAvx
	CMPL BX, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm14BAvx
	MOVB $0xfc, (R8)
	MOVL BX, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_repeat_emit_encodeBlockAsm14BAvx

four_bytes_repeat_emit_encodeBlockAsm14BAvx:
	MOVL BX, SI
	SHRL $0x10, SI
	MOVB $0xf8, (R8)
	MOVW BX, 1(R8)
	MOVB SI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_repeat_emit_encodeBlockAsm14BAvx

three_bytes_repeat_emit_encodeBlockAsm14BAvx:
	MOVB $0xf4, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_repeat_emit_encodeBlockAsm14BAvx

two_bytes_repeat_emit_encodeBlockAsm14BAvx:
	MOVB $0xf0, (R8)
	MOVB BL, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_repeat_emit_encodeBlockAsm14BAvx

one_byte_repeat_emit_encodeBlockAsm14BAvx:
	SHLB $0x02, BL
	MOVB BL, (R8)
	ADDQ $0x01, R8

memmove_repeat_emit_encodeBlockAsm14BAvx:
	LEAQ (R8)(DX*1), R10
	MOVL DX, BX
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_tail:
	TESTQ BX, BX
	JEQ   emit_literal_done_repeat_emit_encodeBlockAsm14BAvx
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_avxUnaligned

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(BX*1), R11
	MOVB R10, (R8)
	MOVB R11, -1(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R11
	MOVW R10, (R8)
	MOVB R11, 2(R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(BX*1), R11
	MOVL R10, (R8)
	MOVL R11, -4(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(BX*1), R11
	MOVQ R10, (R8)
	MOVQ R11, -8(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(BX*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(BX*1), X2
	MOVOU -16(R9)(BX*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(BX*1)
	MOVOU X3, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(BX*1), X8
	MOVOU -112(R9)(BX*1), X9
	MOVOU -96(R9)(BX*1), X10
	MOVOU -80(R9)(BX*1), X11
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(BX*1)
	MOVOU X9, -112(R8)(BX*1)
	MOVOU X10, -96(R8)(BX*1)
	MOVOU X11, -80(R8)(BX*1)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm14BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  BX, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_tail

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_avxUnaligned:
	LEAQ    (R9)(BX*1), R11
	MOVQ    R8, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, R8
	ADDQ    $0x20, R8
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    R8, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, BX
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R9), Y4
	ADDQ    R12, R9
	SUBQ    R10, BX

emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_gobble_128_loop:
	VMOVDQU (R9), Y0
	VMOVDQU 32(R9), Y1
	VMOVDQU 64(R9), Y2
	VMOVDQU 96(R9), Y3
	ADDQ    R10, R9
	VMOVDQA Y0, (R8)
	VMOVDQA Y1, 32(R8)
	VMOVDQA Y2, 64(R8)
	VMOVDQA Y3, 96(R8)
	ADDQ    R10, R8
	SUBQ    R10, BX
	JA      emit_lit_memmove_repeat_emit_encodeBlockAsm14BAvx_memmove_gobble_128_loop
	ADDQ    R10, BX
	ADDQ    R8, BX
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(BX)
	MOVOU X6, -112(BX)
	MOVOU X7, -96(BX)
	MOVOU X8, -80(BX)
	MOVOU X9, -64(BX)
	MOVOU X10, -48(BX)
	MOVOU X11, -32(BX)
	MOVOU X12, -16(BX)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm14BAvx
	MOVQ  R10, R8

emit_literal_done_repeat_emit_encodeBlockAsm14BAvx:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm14BAvx:
	ADDL $0x05, AX
	MOVL AX, DX
	SUBL 24(SP), DX
	MOVL 16(SP), DX
	SUBL AX, DX
	XORL BX, BX
	CMPL DX, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_repeat_extend
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   repeat_extend_forward_end_encodeBlockAsm14BAvx

matchlen_loop_repeat_extend:
	LEAL -8(DX), DX
	LEAL 8(BX), BX
	CMPL DX, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DX, DX
	JZ    repeat_extend_forward_end_encodeBlockAsm14BAvx

matchlen_single_loopback_repeat_extend:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  repeat_extend_forward_end_encodeBlockAsm14BAvx
	LEAL 1(BX), BX
	DECL DX
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm14BAvx:
	ADDL  BX, AX
	MOVL  AX, DX
	SUBL  DI, DX
	MOVL  24(SP), BX
	MOVQ  dst_base+0(FP), R8
	MOVL  20(SP), SI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm14BAvx

emit_repeat_again_match_repeat_:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_repeat_

cant_repeat_two_offset_match_repeat_:
	CMPL DX, $0x00000104
	JLT  repeat_three_match_repeat_
	CMPL DX, $0x00010100
	JLT  repeat_four_match_repeat_
	CMPL DX, $0x0100ffff
	JLT  repeat_five_match_repeat_
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_repeat_

repeat_five_match_repeat_:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_four_match_repeat_:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_three_match_repeat_:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_two_match_repeat_:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_two_offset_match_repeat_:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_as_copy_encodeBlockAsm14BAvx:
	CMPL BX, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm14BAvx
	CMPL DX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm14BAvx
	MOVB $0xff, (R8)
	MOVL BX, 1(R8)
	LEAL -64(DX), DX
	ADDQ $0x05, R8
	CMPL DX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm14BAvx

emit_repeat_again_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_four_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_three_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_two_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

four_bytes_remain_repeat_as_copy_encodeBlockAsm14BAvx:
	TESTL DX, DX
	JZ    repeat_end_emit_encodeBlockAsm14BAvx
	MOVB  $0x03, BP
	LEAL  -4(BP)(DX*4), DX
	MOVB  DL, (R8)
	MOVL  BX, 1(R8)
	ADDQ  $0x05, R8
	JMP   repeat_end_emit_encodeBlockAsm14BAvx

two_byte_offset_repeat_as_copy_encodeBlockAsm14BAvx:
	CMPL DX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm14BAvx
	MOVB $0xee, (R8)
	MOVW BX, 1(R8)
	LEAL -60(DX), DX
	ADDQ $0x03, R8

emit_repeat_again_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_four_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_three_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_two_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm14BAvx_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

two_byte_offset_short_repeat_as_copy_encodeBlockAsm14BAvx:
	CMPL DX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm14BAvx
	CMPL BX, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm14BAvx
	MOVB $0x01, BP
	LEAL -16(BP)(DX*4), DX
	MOVB BL, 1(R8)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm14BAvx

emit_copy_three_repeat_as_copy_encodeBlockAsm14BAvx:
	MOVB $0x02, BP
	LEAL -4(BP)(DX*4), DX
	MOVB DL, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8

repeat_end_emit_encodeBlockAsm14BAvx:
	MOVQ R8, dst_base+0(FP)
	MOVL 16(SP), DX
	CMPL AX, DX
	JGT  emit_remainder_encodeBlockAsm14BAvx
	JMP  search_loop_encodeBlockAsm14BAvx

no_repeat_found_encodeBlockAsm14BAvx:
	CMPL (CX)(DX*1), R8
	SHRQ $0x08, R8
	JEQ  candidate_match_encodeBlockAsm14BAvx
	MOVL 32(SP)(R10*1), DX
	CMPL (CX)(BX*1), R8
	JEQ  candidate2_match_encodeBlockAsm14BAvx
	LEAL 2(AX), BX
	MOVL BX, 32(SP)(R10*1)
	SHRQ $0x08, R8
	CMPL (CX)(DX*1), R8
	JEQ  candidate3_match_encodeBlockAsm14BAvx
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm14BAvx

candidate3_match_encodeBlockAsm14BAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm14BAvx

candidate2_match_encodeBlockAsm14BAvx:
	LEAL -2(AX), DX
	MOVL DX, 32(SP)(R10*1)
	INCL AX
	MOVL BX, DX

candidate_match_encodeBlockAsm14BAvx:
	MOVL  20(SP), BX
	TESTL DX, DX
	JZ    match_extend_back_end_encodeBlockAsm14BAvx

match_extend_back_loop_encodeBlockAsm14BAvx:
	CMPL AX, BX
	JG   match_extend_back_end_encodeBlockAsm14BAvx
	MOVB -1(CX)(DX*1), BP
	MOVB -1(CX)(AX*1), SI
	CMPB BP, SI
	JNE  match_extend_back_end_encodeBlockAsm14BAvx
	LEAL -1(AX), AX
	DECL DX
	JZ   match_extend_back_end_encodeBlockAsm14BAvx
	JMP  match_extend_back_loop_encodeBlockAsm14BAvx

match_extend_back_end_encodeBlockAsm14BAvx:
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ dst_base+0(FP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm14BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm14BAvx:
	MOVL DX, DI
	MOVL 20(SP), SI
	CMPL SI, DI
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm14BAvx
	MOVL DI, BX
	MOVL DI, 20(SP)
	LEAQ (CX)(SI*1), R9
	SUBL SI, BX
	MOVQ dst_base+0(FP), R8
	MOVL BX, SI
	SUBL $0x01, SI
	JC   emit_literal_done_match_emit_encodeBlockAsm14BAvx
	CMPL SI, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm14BAvx
	CMPL SI, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm14BAvx
	CMPL SI, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm14BAvx
	CMPL SI, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm14BAvx
	MOVB $0xfc, (R8)
	MOVL SI, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_match_emit_encodeBlockAsm14BAvx

four_bytes_match_emit_encodeBlockAsm14BAvx:
	MOVL SI, DI
	SHRL $0x10, DI
	MOVB $0xf8, (R8)
	MOVW SI, 1(R8)
	MOVB DI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_match_emit_encodeBlockAsm14BAvx

three_bytes_match_emit_encodeBlockAsm14BAvx:
	MOVB $0xf4, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_match_emit_encodeBlockAsm14BAvx

two_bytes_match_emit_encodeBlockAsm14BAvx:
	MOVB $0xf0, (R8)
	MOVB SI, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_match_emit_encodeBlockAsm14BAvx

one_byte_match_emit_encodeBlockAsm14BAvx:
	SHLB $0x02, SI
	MOVB SI, (R8)
	ADDQ $0x01, R8

memmove_match_emit_encodeBlockAsm14BAvx:
	LEAQ (R8)(BX*1), R10
	MOVL BX, DI
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   emit_literal_done_match_emit_encodeBlockAsm14BAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(DI*1), R11
	MOVB R10, (R8)
	MOVB R11, -1(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R11
	MOVW R10, (R8)
	MOVB R11, 2(R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(DI*1), R11
	MOVL R10, (R8)
	MOVL R11, -4(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(DI*1), R11
	MOVQ R10, (R8)
	MOVQ R11, -8(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(DI*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(DI*1), X2
	MOVOU -16(R9)(DI*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(DI*1)
	MOVOU X3, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(DI*1), X8
	MOVOU -112(R9)(DI*1), X9
	MOVOU -96(R9)(DI*1), X10
	MOVOU -80(R9)(DI*1), X11
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(DI*1)
	MOVOU X9, -112(R8)(DI*1)
	MOVOU X10, -96(R8)(DI*1)
	MOVOU X11, -80(R8)(DI*1)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  DI, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_avxUnaligned:
	LEAQ    (R9)(DI*1), R11
	MOVQ    R8, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, R8
	ADDQ    $0x20, R8
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    R8, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, DI
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R9), Y4
	ADDQ    R12, R9
	SUBQ    R10, DI

emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_gobble_128_loop:
	VMOVDQU (R9), Y0
	VMOVDQU 32(R9), Y1
	VMOVDQU 64(R9), Y2
	VMOVDQU 96(R9), Y3
	ADDQ    R10, R9
	VMOVDQA Y0, (R8)
	VMOVDQA Y1, 32(R8)
	VMOVDQA Y2, 64(R8)
	VMOVDQA Y3, 96(R8)
	ADDQ    R10, R8
	SUBQ    R10, DI
	JA      emit_lit_memmove_match_emit_encodeBlockAsm14BAvx_memmove_gobble_128_loop
	ADDQ    R10, DI
	ADDQ    R8, DI
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)
	JMP   emit_literal_done_match_emit_encodeBlockAsm14BAvx
	MOVQ  R10, R8

emit_literal_done_match_emit_encodeBlockAsm14BAvx:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm14BAvx:
	NOP

match_nolit_loop_encodeBlockAsm14BAvx:
	MOVL AX, BX
	MOVL AX, BX
	SUBL DX, BX
	MOVL BX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, DX
	MOVL 16(SP), SI
	SUBL AX, SI
	XORL BX, BX
	CMPL SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm14BAvx

matchlen_loopback_match_nolit_encodeBlockAsm14BAvx:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_match_nolit_encodeBlockAsm14BAvx
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   match_nolit_end_encodeBlockAsm14BAvx

matchlen_loop_match_nolit_encodeBlockAsm14BAvx:
	LEAL -8(SI), SI
	LEAL 8(BX), BX
	CMPL SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm14BAvx

matchlen_single_match_nolit_encodeBlockAsm14BAvx:
	TESTL SI, SI
	JZ    match_nolit_end_encodeBlockAsm14BAvx

matchlen_single_loopback_match_nolit_encodeBlockAsm14BAvx:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  match_nolit_end_encodeBlockAsm14BAvx
	LEAL 1(BX), BX
	DECL SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm14BAvx

match_nolit_end_encodeBlockAsm14BAvx:
	MOVL 24(SP), SI
	ADDL $0x04, BX
	MOVQ dst_base+0(FP), R8
	ADDL BX, AX
	CMPL SI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm14BAvx
	CMPL BX, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm14BAvx
	MOVB $0xff, (R8)
	MOVL SI, 1(R8)
	LEAL -64(BX), BX
	ADDQ $0x05, R8
	CMPL BX, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm14BAvx

emit_repeat_again_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm14BAvx_emit_copy
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm14BAvx_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm14BAvx_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm14BAvx_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm14BAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_four_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_three_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_two_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

four_bytes_remain_match_nolit_encodeBlockAsm14BAvx:
	TESTL BX, BX
	JZ    match_nolit_emitcopy_end_encodeBlockAsm14BAvx
	MOVB  $0x03, BP
	LEAL  -4(BP)(BX*4), BX
	MOVB  BL, (R8)
	MOVL  SI, 1(R8)
	ADDQ  $0x05, R8
	JMP   match_nolit_emitcopy_end_encodeBlockAsm14BAvx

two_byte_offset_match_nolit_encodeBlockAsm14BAvx:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm14BAvx
	MOVB $0xee, (R8)
	MOVW SI, 1(R8)
	LEAL -60(BX), BX
	ADDQ $0x03, R8

emit_repeat_again_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm14BAvx_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm14BAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_four_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_three_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_two_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

repeat_two_offset_match_nolit_encodeBlockAsm14BAvx_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

two_byte_offset_short_match_nolit_encodeBlockAsm14BAvx:
	CMPL BX, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm14BAvx
	CMPL SI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm14BAvx
	MOVB $0x01, BP
	LEAL -16(BP)(BX*4), BX
	MOVB SI, 1(R8)
	SHRL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm14BAvx

emit_copy_three_match_nolit_encodeBlockAsm14BAvx:
	MOVB $0x02, BP
	LEAL -4(BP)(BX*4), BX
	MOVB BL, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8

match_nolit_emitcopy_end_encodeBlockAsm14BAvx:
	MOVQ R8, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm14BAvx
	CMPQ R8, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm14BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm14BAvx:
	MOVQ  -2(CX)(AX*1), R8
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	SHRQ  $0x10, R8
	MOVQ  R8, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x32, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x32, R11
	MOVL  32(SP)(R10*1), BX
	MOVL  32(SP)(R11*1), BX
	LEAQ  -2(AX), R9
	MOVL  R9, 32(SP)(R10*1)
	MOVL  AX, 32(SP)(R11*1)
	CMPL  (CX), R8
	JEQ   match_nolit_loop_encodeBlockAsm14BAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsm14BAvx

emit_remainder_encodeBlockAsm14BAvx:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), BX
	LEAQ (BX)(AX*1), BX
	CMPQ BX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm14BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm14BAvx:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm14BAvx
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), CX
	SUBL DX, BX
	MOVQ dst_base+0(FP), AX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm14BAvx
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm14BAvx
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm14BAvx
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm14BAvx
	MOVB $0xfc, (AX)
	MOVL DX, 1(AX)
	ADDQ $0x05, AX
	JMP  memmove_emit_remainder_encodeBlockAsm14BAvx

four_bytes_emit_remainder_encodeBlockAsm14BAvx:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (AX)
	MOVW DX, 1(AX)
	MOVB BP, 3(AX)
	ADDQ $0x04, AX
	JMP  memmove_emit_remainder_encodeBlockAsm14BAvx

three_bytes_emit_remainder_encodeBlockAsm14BAvx:
	MOVB $0xf4, (AX)
	MOVW DX, 1(AX)
	ADDQ $0x03, AX
	JMP  memmove_emit_remainder_encodeBlockAsm14BAvx

two_bytes_emit_remainder_encodeBlockAsm14BAvx:
	MOVB $0xf0, (AX)
	MOVB DL, 1(AX)
	ADDQ $0x02, AX
	JMP  memmove_emit_remainder_encodeBlockAsm14BAvx

one_byte_emit_remainder_encodeBlockAsm14BAvx:
	SHLB $0x02, DL
	MOVB DL, (AX)
	ADDQ $0x01, AX

memmove_emit_remainder_encodeBlockAsm14BAvx:
	LEAQ (AX)(BX*1), BP
	MOVL BX, DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_1or2:
	MOVB (CX), BL
	MOVB -1(CX)(DX*1), BP
	MOVB BL, (AX)
	MOVB BP, -1(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_4:
	MOVL (CX), BX
	MOVL BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_3:
	MOVW (CX), BX
	MOVB 2(CX), BP
	MOVW BX, (AX)
	MOVB BP, 2(AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_5through7:
	MOVL (CX), BX
	MOVL -4(CX)(DX*1), BP
	MOVL BX, (AX)
	MOVL BP, -4(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_8:
	MOVQ (CX), BX
	MOVQ BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_9through16:
	MOVQ (CX), BX
	MOVQ -8(CX)(DX*1), BP
	MOVQ BX, (AX)
	MOVQ BP, -8(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_avxUnaligned:
	LEAQ    (CX)(DX*1), BP
	MOVQ    AX, DI
	MOVOU   -128(BP), X5
	MOVOU   -112(BP), X6
	MOVQ    $0x00000080, BX
	ANDQ    $0xffffffe0, AX
	ADDQ    $0x20, AX
	MOVOU   -96(BP), X7
	MOVOU   -80(BP), X8
	MOVQ    AX, SI
	SUBQ    DI, SI
	MOVOU   -64(BP), X9
	MOVOU   -48(BP), X10
	SUBQ    SI, DX
	MOVOU   -32(BP), X11
	MOVOU   -16(BP), X12
	VMOVDQU (CX), Y4
	ADDQ    SI, CX
	SUBQ    BX, DX

emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_gobble_128_loop:
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	ADDQ    BX, CX
	VMOVDQA Y0, (AX)
	VMOVDQA Y1, 32(AX)
	VMOVDQA Y2, 64(AX)
	VMOVDQA Y3, 96(AX)
	ADDQ    BX, AX
	SUBQ    BX, DX
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsm14BAvx_memmove_gobble_128_loop
	ADDQ    BX, DX
	ADDQ    AX, DX
	VMOVDQU Y4, (DI)
	VZEROUPPER
	MOVOU X5, -128(DX)
	MOVOU X6, -112(DX)
	MOVOU X7, -96(DX)
	MOVOU X8, -80(DX)
	MOVOU X9, -64(DX)
	MOVOU X10, -48(DX)
	MOVOU X11, -32(DX)
	MOVOU X12, -16(DX)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm14BAvx
	MOVQ  BP, AX

emit_literal_done_emit_remainder_encodeBlockAsm14BAvx:
	MOVQ AX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm14BAvx:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func encodeBlockAsm12BAvx(dst []byte, src []byte) int
// Requires: AVX, SSE2
TEXT Â·encodeBlockAsm12BAvx(SB), $4128-56
	MOVQ $0x00000020, AX
	LEAQ 32(SP), CX
	PXOR X0, X0

zero_loop_encodeBlockAsm12BAvx:
	MOVOU X0, (CX)
	MOVOU X0, 16(CX)
	MOVOU X0, 32(CX)
	MOVOU X0, 48(CX)
	MOVOU X0, 64(CX)
	MOVOU X0, 80(CX)
	MOVOU X0, 96(CX)
	MOVOU X0, 112(CX)
	ADDQ  $0x80, CX
	DECQ  AX
	JNZ   zero_loop_encodeBlockAsm12BAvx
	MOVL  AX, 20(SP)
	MOVQ  src_len+32(FP), AX
	LEAQ  -5(AX), CX
	LEAQ  -8(AX), R8
	SHRQ  $0x05, AX
	SUBL  AX, CX
	MOVL  R8, 16(SP)
	MOVQ  dst_base+0(FP), AX
	MOVQ  AX, 8(SP)
	LEAQ  (AX)(CX*1), CX
	MOVQ  CX, (SP)
	MOVL  $0x00000001, AX
	MOVL  AX, 24(SP)
	MOVQ  src_base+24(FP), CX

search_loop_encodeBlockAsm12BAvx:
	MOVQ  (CX)(AX*1), R8
	MOVL  AX, DX
	SUBL  20(SP), DX
	SHRL  $0x04, DX
	LEAL  4(AX)(DX*1), DX
	MOVL  16(SP), BX
	CMPL  DX, BX
	JGT   emit_remainder_encodeBlockAsm12BAvx
	MOVL  DX, 28(SP)
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	MOVQ  R8, R11
	SHRQ  $0x08, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x34, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x34, R11
	MOVL  32(SP)(R10*1), DX
	MOVL  32(SP)(R11*1), BX
	MOVL  AX, 32(SP)(R10*1)
	LEAL  1(AX), SI
	MOVL  SI, 32(SP)(R11*1)
	MOVQ  R8, R10
	SHRQ  $0x10, R10
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x34, R10
	MOVL  AX, SI
	SUBL  24(SP), SI
	MOVL  1(CX), DI
	MOVQ  R8, R9
	SHLQ  $0x08, R9
	CMPL  R9, DI
	JNE   no_repeat_found_encodeBlockAsm12BAvx
	LEAL  1(AX), DI
	MOVL  20(SP), DX
	TESTL SI, SI
	JZ    repeat_extend_back_end_encodeBlockAsm12BAvx

repeat_extend_back_loop_encodeBlockAsm12BAvx:
	CMPL DI, DX
	JG   repeat_extend_back_end_encodeBlockAsm12BAvx
	MOVB -1(CX)(SI*1), BL
	MOVB -1(CX)(DI*1), BP
	CMPB BL, BP
	JNE  repeat_extend_back_end_encodeBlockAsm12BAvx
	LEAL -1(DI), DI
	DECL SI
	JZ   repeat_extend_back_end_encodeBlockAsm12BAvx
	JMP  repeat_extend_back_loop_encodeBlockAsm12BAvx

repeat_extend_back_end_encodeBlockAsm12BAvx:
	MOVL 20(SP), BX
	CMPL BX, DI
	JEQ  emit_literal_skip_repeat_emit_encodeBlockAsm12BAvx
	MOVL DI, DX
	MOVL DI, 20(SP)
	LEAQ (CX)(BX*1), R9
	SUBL BX, DX
	MOVQ dst_base+0(FP), R8
	MOVL DX, BX
	SUBL $0x01, BX
	JC   emit_literal_done_repeat_emit_encodeBlockAsm12BAvx
	CMPL BX, $0x3c
	JLT  one_byte_repeat_emit_encodeBlockAsm12BAvx
	CMPL BX, $0x00000100
	JLT  two_bytes_repeat_emit_encodeBlockAsm12BAvx
	CMPL BX, $0x00010000
	JLT  three_bytes_repeat_emit_encodeBlockAsm12BAvx
	CMPL BX, $0x01000000
	JLT  four_bytes_repeat_emit_encodeBlockAsm12BAvx
	MOVB $0xfc, (R8)
	MOVL BX, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_repeat_emit_encodeBlockAsm12BAvx

four_bytes_repeat_emit_encodeBlockAsm12BAvx:
	MOVL BX, SI
	SHRL $0x10, SI
	MOVB $0xf8, (R8)
	MOVW BX, 1(R8)
	MOVB SI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_repeat_emit_encodeBlockAsm12BAvx

three_bytes_repeat_emit_encodeBlockAsm12BAvx:
	MOVB $0xf4, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_repeat_emit_encodeBlockAsm12BAvx

two_bytes_repeat_emit_encodeBlockAsm12BAvx:
	MOVB $0xf0, (R8)
	MOVB BL, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_repeat_emit_encodeBlockAsm12BAvx

one_byte_repeat_emit_encodeBlockAsm12BAvx:
	SHLB $0x02, BL
	MOVB BL, (R8)
	ADDQ $0x01, R8

memmove_repeat_emit_encodeBlockAsm12BAvx:
	LEAQ (R8)(DX*1), R10
	MOVL DX, BX
	NOP

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_tail:
	TESTQ BX, BX
	JEQ   emit_literal_done_repeat_emit_encodeBlockAsm12BAvx
	CMPQ  BX, $0x02
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_1or2
	CMPQ  BX, $0x04
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_3
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_4
	CMPQ  BX, $0x08
	JB    emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_5through7
	JE    emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_8
	CMPQ  BX, $0x10
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_9through16
	CMPQ  BX, $0x20
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_17through32
	CMPQ  BX, $0x40
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_33through64
	CMPQ  BX, $0x80
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_65through128
	CMPQ  BX, $0x00000100
	JBE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(BX*1), R11
	MOVB R10, (R8)
	MOVB R11, -1(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R11
	MOVW R10, (R8)
	MOVB R11, 2(R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(BX*1), R11
	MOVL R10, (R8)
	MOVL R11, -4(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(BX*1), R11
	MOVQ R10, (R8)
	MOVQ R11, -8(R8)(BX*1)
	JMP  emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(BX*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(BX*1), X2
	MOVOU -16(R9)(BX*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(BX*1)
	MOVOU X3, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(BX*1), X8
	MOVOU -112(R9)(BX*1), X9
	MOVOU -96(R9)(BX*1), X10
	MOVOU -80(R9)(BX*1), X11
	MOVOU -64(R9)(BX*1), X12
	MOVOU -48(R9)(BX*1), X13
	MOVOU -32(R9)(BX*1), X14
	MOVOU -16(R9)(BX*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(BX*1)
	MOVOU X9, -112(R8)(BX*1)
	MOVOU X10, -96(R8)(BX*1)
	MOVOU X11, -80(R8)(BX*1)
	MOVOU X12, -64(R8)(BX*1)
	MOVOU X13, -48(R8)(BX*1)
	MOVOU X14, -32(R8)(BX*1)
	MOVOU X15, -16(R8)(BX*1)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm12BAvx

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_256through2048:
	LEAQ  -256(BX), BX
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  BX, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_tail

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned:
	LEAQ    (R9)(BX*1), R11
	MOVQ    R8, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, R8
	ADDQ    $0x20, R8
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    R8, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, BX
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R9), Y4
	ADDQ    R12, R9
	SUBQ    R10, BX

emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop:
	VMOVDQU (R9), Y0
	VMOVDQU 32(R9), Y1
	VMOVDQU 64(R9), Y2
	VMOVDQU 96(R9), Y3
	ADDQ    R10, R9
	VMOVDQA Y0, (R8)
	VMOVDQA Y1, 32(R8)
	VMOVDQA Y2, 64(R8)
	VMOVDQA Y3, 96(R8)
	ADDQ    R10, R8
	SUBQ    R10, BX
	JA      emit_lit_memmove_repeat_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop
	ADDQ    R10, BX
	ADDQ    R8, BX
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(BX)
	MOVOU X6, -112(BX)
	MOVOU X7, -96(BX)
	MOVOU X8, -80(BX)
	MOVOU X9, -64(BX)
	MOVOU X10, -48(BX)
	MOVOU X11, -32(BX)
	MOVOU X12, -16(BX)
	JMP   emit_literal_done_repeat_emit_encodeBlockAsm12BAvx
	MOVQ  R10, R8

emit_literal_done_repeat_emit_encodeBlockAsm12BAvx:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_repeat_emit_encodeBlockAsm12BAvx:
	ADDL $0x05, AX
	MOVL AX, DX
	SUBL 24(SP), DX
	MOVL 16(SP), DX
	SUBL AX, DX
	XORL BX, BX
	CMPL DX, $0x08
	JL   matchlen_single_repeat_extend

matchlen_loopback_repeat_extend:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_repeat_extend
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   repeat_extend_forward_end_encodeBlockAsm12BAvx

matchlen_loop_repeat_extend:
	LEAL -8(DX), DX
	LEAL 8(BX), BX
	CMPL DX, $0x08
	JGE  matchlen_loopback_repeat_extend

matchlen_single_repeat_extend:
	TESTL DX, DX
	JZ    repeat_extend_forward_end_encodeBlockAsm12BAvx

matchlen_single_loopback_repeat_extend:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  repeat_extend_forward_end_encodeBlockAsm12BAvx
	LEAL 1(BX), BX
	DECL DX
	JNZ  matchlen_single_loopback_repeat_extend

repeat_extend_forward_end_encodeBlockAsm12BAvx:
	ADDL  BX, AX
	MOVL  AX, DX
	SUBL  DI, DX
	MOVL  24(SP), BX
	MOVQ  dst_base+0(FP), R8
	MOVL  20(SP), SI
	TESTL SI, SI
	JZ    repeat_as_copy_encodeBlockAsm12BAvx

emit_repeat_again_match_repeat_:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_match_repeat_
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_match_repeat_
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_match_repeat_

cant_repeat_two_offset_match_repeat_:
	CMPL DX, $0x00000104
	JLT  repeat_three_match_repeat_
	CMPL DX, $0x00010100
	JLT  repeat_four_match_repeat_
	CMPL DX, $0x0100ffff
	JLT  repeat_five_match_repeat_
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_repeat_

repeat_five_match_repeat_:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_four_match_repeat_:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_three_match_repeat_:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_match_repeat_:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_offset_match_repeat_:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_as_copy_encodeBlockAsm12BAvx:
	CMPL BX, $0x00010000
	JL   two_byte_offset_repeat_as_copy_encodeBlockAsm12BAvx
	CMPL DX, $0x40
	JLE  four_bytes_remain_repeat_as_copy_encodeBlockAsm12BAvx
	MOVB $0xff, (R8)
	MOVL BX, 1(R8)
	LEAL -64(DX), DX
	ADDQ $0x05, R8
	CMPL DX, $0x04
	JL   four_bytes_remain_repeat_as_copy_encodeBlockAsm12BAvx

emit_repeat_again_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy

repeat_five_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_four_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_three_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

four_bytes_remain_repeat_as_copy_encodeBlockAsm12BAvx:
	TESTL DX, DX
	JZ    repeat_end_emit_encodeBlockAsm12BAvx
	MOVB  $0x03, BP
	LEAL  -4(BP)(DX*4), DX
	MOVB  DL, (R8)
	MOVL  BX, 1(R8)
	ADDQ  $0x05, R8
	JMP   repeat_end_emit_encodeBlockAsm12BAvx

two_byte_offset_repeat_as_copy_encodeBlockAsm12BAvx:
	CMPL DX, $0x40
	JLE  two_byte_offset_short_repeat_as_copy_encodeBlockAsm12BAvx
	MOVB $0xee, (R8)
	MOVW BX, 1(R8)
	LEAL -60(DX), DX
	ADDQ $0x03, R8

emit_repeat_again_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	MOVL DX, SI
	LEAL -4(DX), DX
	CMPL SI, $0x08
	JLE  repeat_two_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	CMPL SI, $0x0c
	JGE  cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	CMPL BX, $0x00000800
	JLT  repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short

cant_repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	CMPL DX, $0x00000104
	JLT  repeat_three_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	CMPL DX, $0x00010100
	JLT  repeat_four_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	CMPL DX, $0x0100ffff
	JLT  repeat_five_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short
	LEAL -16842747(DX), DX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short

repeat_five_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -65536(DX), DX
	MOVL DX, BX
	MOVW $0x001d, (R8)
	MOVW DX, 2(R8)
	SARL $0x10, BX
	MOVB BL, 4(R8)
	ADDQ $0x05, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_four_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -256(DX), DX
	MOVW $0x0019, (R8)
	MOVW DX, 2(R8)
	ADDQ $0x04, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_three_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -4(DX), DX
	MOVW $0x0015, (R8)
	MOVB DL, 2(R8)
	ADDQ $0x03, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

repeat_two_offset_repeat_as_copy_encodeBlockAsm12BAvx_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(DX*4), DX
	MOVB BL, 1(R8)
	SARL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

two_byte_offset_short_repeat_as_copy_encodeBlockAsm12BAvx:
	CMPL DX, $0x0c
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm12BAvx
	CMPL BX, $0x00000800
	JGE  emit_copy_three_repeat_as_copy_encodeBlockAsm12BAvx
	MOVB $0x01, BP
	LEAL -16(BP)(DX*4), DX
	MOVB BL, 1(R8)
	SHRL $0x08, BX
	SHLL $0x05, BX
	ORL  BX, DX
	MOVB DL, (R8)
	ADDQ $0x02, R8
	JMP  repeat_end_emit_encodeBlockAsm12BAvx

emit_copy_three_repeat_as_copy_encodeBlockAsm12BAvx:
	MOVB $0x02, BP
	LEAL -4(BP)(DX*4), DX
	MOVB DL, (R8)
	MOVW BX, 1(R8)
	ADDQ $0x03, R8

repeat_end_emit_encodeBlockAsm12BAvx:
	MOVQ R8, dst_base+0(FP)
	MOVL 16(SP), DX
	CMPL AX, DX
	JGT  emit_remainder_encodeBlockAsm12BAvx
	JMP  search_loop_encodeBlockAsm12BAvx

no_repeat_found_encodeBlockAsm12BAvx:
	CMPL (CX)(DX*1), R8
	SHRQ $0x08, R8
	JEQ  candidate_match_encodeBlockAsm12BAvx
	MOVL 32(SP)(R10*1), DX
	CMPL (CX)(BX*1), R8
	JEQ  candidate2_match_encodeBlockAsm12BAvx
	LEAL 2(AX), BX
	MOVL BX, 32(SP)(R10*1)
	SHRQ $0x08, R8
	CMPL (CX)(DX*1), R8
	JEQ  candidate3_match_encodeBlockAsm12BAvx
	MOVL 28(SP), AX
	JMP  search_loop_encodeBlockAsm12BAvx

candidate3_match_encodeBlockAsm12BAvx:
	ADDL $0x02, AX
	JMP  candidate_match_encodeBlockAsm12BAvx

candidate2_match_encodeBlockAsm12BAvx:
	LEAL -2(AX), DX
	MOVL DX, 32(SP)(R10*1)
	INCL AX
	MOVL BX, DX

candidate_match_encodeBlockAsm12BAvx:
	MOVL  20(SP), BX
	TESTL DX, DX
	JZ    match_extend_back_end_encodeBlockAsm12BAvx

match_extend_back_loop_encodeBlockAsm12BAvx:
	CMPL AX, BX
	JG   match_extend_back_end_encodeBlockAsm12BAvx
	MOVB -1(CX)(DX*1), BP
	MOVB -1(CX)(AX*1), SI
	CMPB BP, SI
	JNE  match_extend_back_end_encodeBlockAsm12BAvx
	LEAL -1(AX), AX
	DECL DX
	JZ   match_extend_back_end_encodeBlockAsm12BAvx
	JMP  match_extend_back_loop_encodeBlockAsm12BAvx

match_extend_back_end_encodeBlockAsm12BAvx:
	MOVL AX, SI
	SUBL 20(SP), SI
	LEAQ dst_base+0(FP)(SI*1), SI
	CMPQ SI, (SP)
	JL   match_dst_size_check_encodeBlockAsm12BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_dst_size_check_encodeBlockAsm12BAvx:
	MOVL DX, DI
	MOVL 20(SP), SI
	CMPL SI, DI
	JEQ  emit_literal_skip_match_emit_encodeBlockAsm12BAvx
	MOVL DI, BX
	MOVL DI, 20(SP)
	LEAQ (CX)(SI*1), R9
	SUBL SI, BX
	MOVQ dst_base+0(FP), R8
	MOVL BX, SI
	SUBL $0x01, SI
	JC   emit_literal_done_match_emit_encodeBlockAsm12BAvx
	CMPL SI, $0x3c
	JLT  one_byte_match_emit_encodeBlockAsm12BAvx
	CMPL SI, $0x00000100
	JLT  two_bytes_match_emit_encodeBlockAsm12BAvx
	CMPL SI, $0x00010000
	JLT  three_bytes_match_emit_encodeBlockAsm12BAvx
	CMPL SI, $0x01000000
	JLT  four_bytes_match_emit_encodeBlockAsm12BAvx
	MOVB $0xfc, (R8)
	MOVL SI, 1(R8)
	ADDQ $0x05, R8
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

four_bytes_match_emit_encodeBlockAsm12BAvx:
	MOVL SI, DI
	SHRL $0x10, DI
	MOVB $0xf8, (R8)
	MOVW SI, 1(R8)
	MOVB DI, 3(R8)
	ADDQ $0x04, R8
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

three_bytes_match_emit_encodeBlockAsm12BAvx:
	MOVB $0xf4, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

two_bytes_match_emit_encodeBlockAsm12BAvx:
	MOVB $0xf0, (R8)
	MOVB SI, 1(R8)
	ADDQ $0x02, R8
	JMP  memmove_match_emit_encodeBlockAsm12BAvx

one_byte_match_emit_encodeBlockAsm12BAvx:
	SHLB $0x02, SI
	MOVB SI, (R8)
	ADDQ $0x01, R8

memmove_match_emit_encodeBlockAsm12BAvx:
	LEAQ (R8)(BX*1), R10
	MOVL BX, DI
	NOP

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_tail:
	TESTQ DI, DI
	JEQ   emit_literal_done_match_emit_encodeBlockAsm12BAvx
	CMPQ  DI, $0x02
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_1or2
	CMPQ  DI, $0x04
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_3
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_4
	CMPQ  DI, $0x08
	JB    emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_5through7
	JE    emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_8
	CMPQ  DI, $0x10
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_9through16
	CMPQ  DI, $0x20
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_17through32
	CMPQ  DI, $0x40
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_33through64
	CMPQ  DI, $0x80
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_65through128
	CMPQ  DI, $0x00000100
	JBE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_1or2:
	MOVB (R9), R10
	MOVB -1(R9)(DI*1), R11
	MOVB R10, (R8)
	MOVB R11, -1(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_4:
	MOVL (R9), R10
	MOVL R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_3:
	MOVW (R9), R10
	MOVB 2(R9), R11
	MOVW R10, (R8)
	MOVB R11, 2(R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_5through7:
	MOVL (R9), R10
	MOVL -4(R9)(DI*1), R11
	MOVL R10, (R8)
	MOVL R11, -4(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_8:
	MOVQ (R9), R10
	MOVQ R10, (R8)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_9through16:
	MOVQ (R9), R10
	MOVQ -8(R9)(DI*1), R11
	MOVQ R10, (R8)
	MOVQ R11, -8(R8)(DI*1)
	JMP  emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_17through32:
	MOVOU (R9), X0
	MOVOU -16(R9)(DI*1), X1
	MOVOU X0, (R8)
	MOVOU X1, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_33through64:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU -32(R9)(DI*1), X2
	MOVOU -16(R9)(DI*1), X3
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, -32(R8)(DI*1)
	MOVOU X3, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_65through128:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_129through256:
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU -128(R9)(DI*1), X8
	MOVOU -112(R9)(DI*1), X9
	MOVOU -96(R9)(DI*1), X10
	MOVOU -80(R9)(DI*1), X11
	MOVOU -64(R9)(DI*1), X12
	MOVOU -48(R9)(DI*1), X13
	MOVOU -32(R9)(DI*1), X14
	MOVOU -16(R9)(DI*1), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, -128(R8)(DI*1)
	MOVOU X9, -112(R8)(DI*1)
	MOVOU X10, -96(R8)(DI*1)
	MOVOU X11, -80(R8)(DI*1)
	MOVOU X12, -64(R8)(DI*1)
	MOVOU X13, -48(R8)(DI*1)
	MOVOU X14, -32(R8)(DI*1)
	MOVOU X15, -16(R8)(DI*1)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_256through2048:
	LEAQ  -256(DI), DI
	MOVOU (R9), X0
	MOVOU 16(R9), X1
	MOVOU 32(R9), X2
	MOVOU 48(R9), X3
	MOVOU 64(R9), X4
	MOVOU 80(R9), X5
	MOVOU 96(R9), X6
	MOVOU 112(R9), X7
	MOVOU 128(R9), X8
	MOVOU 144(R9), X9
	MOVOU 160(R9), X10
	MOVOU 176(R9), X11
	MOVOU 192(R9), X12
	MOVOU 208(R9), X13
	MOVOU 224(R9), X14
	MOVOU 240(R9), X15
	MOVOU X0, (R8)
	MOVOU X1, 16(R8)
	MOVOU X2, 32(R8)
	MOVOU X3, 48(R8)
	MOVOU X4, 64(R8)
	MOVOU X5, 80(R8)
	MOVOU X6, 96(R8)
	MOVOU X7, 112(R8)
	MOVOU X8, 128(R8)
	MOVOU X9, 144(R8)
	MOVOU X10, 160(R8)
	MOVOU X11, 176(R8)
	MOVOU X12, 192(R8)
	MOVOU X13, 208(R8)
	MOVOU X14, 224(R8)
	MOVOU X15, 240(R8)
	CMPQ  DI, $0x00000100
	LEAQ  256(R9), R9
	LEAQ  256(R8), R8
	JGE   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_tail

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_avxUnaligned:
	LEAQ    (R9)(DI*1), R11
	MOVQ    R8, R13
	MOVOU   -128(R11), X5
	MOVOU   -112(R11), X6
	MOVQ    $0x00000080, R10
	ANDQ    $0xffffffe0, R8
	ADDQ    $0x20, R8
	MOVOU   -96(R11), X7
	MOVOU   -80(R11), X8
	MOVQ    R8, R12
	SUBQ    R13, R12
	MOVOU   -64(R11), X9
	MOVOU   -48(R11), X10
	SUBQ    R12, DI
	MOVOU   -32(R11), X11
	MOVOU   -16(R11), X12
	VMOVDQU (R9), Y4
	ADDQ    R12, R9
	SUBQ    R10, DI

emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop:
	VMOVDQU (R9), Y0
	VMOVDQU 32(R9), Y1
	VMOVDQU 64(R9), Y2
	VMOVDQU 96(R9), Y3
	ADDQ    R10, R9
	VMOVDQA Y0, (R8)
	VMOVDQA Y1, 32(R8)
	VMOVDQA Y2, 64(R8)
	VMOVDQA Y3, 96(R8)
	ADDQ    R10, R8
	SUBQ    R10, DI
	JA      emit_lit_memmove_match_emit_encodeBlockAsm12BAvx_memmove_gobble_128_loop
	ADDQ    R10, DI
	ADDQ    R8, DI
	VMOVDQU Y4, (R13)
	VZEROUPPER
	MOVOU X5, -128(DI)
	MOVOU X6, -112(DI)
	MOVOU X7, -96(DI)
	MOVOU X8, -80(DI)
	MOVOU X9, -64(DI)
	MOVOU X10, -48(DI)
	MOVOU X11, -32(DI)
	MOVOU X12, -16(DI)
	JMP   emit_literal_done_match_emit_encodeBlockAsm12BAvx
	MOVQ  R10, R8

emit_literal_done_match_emit_encodeBlockAsm12BAvx:
	MOVQ R8, dst_base+0(FP)

emit_literal_skip_match_emit_encodeBlockAsm12BAvx:
	NOP

match_nolit_loop_encodeBlockAsm12BAvx:
	MOVL AX, BX
	MOVL AX, BX
	SUBL DX, BX
	MOVL BX, 24(SP)
	ADDL $0x04, AX
	ADDL $0x04, DX
	MOVL 16(SP), SI
	SUBL AX, SI
	XORL BX, BX
	CMPL SI, $0x08
	JL   matchlen_single_match_nolit_encodeBlockAsm12BAvx

matchlen_loopback_match_nolit_encodeBlockAsm12BAvx:
	MOVQ  (CX)(BX*1), R8
	XORQ  (CX)(BX*1), R8
	TESTQ R8, R8
	JZ    matchlen_loop_match_nolit_encodeBlockAsm12BAvx
	BSFQ  R8, R8
	SARQ  $0x03, R8
	LEAL  (BX)(R8*1), BX
	JMP   match_nolit_end_encodeBlockAsm12BAvx

matchlen_loop_match_nolit_encodeBlockAsm12BAvx:
	LEAL -8(SI), SI
	LEAL 8(BX), BX
	CMPL SI, $0x08
	JGE  matchlen_loopback_match_nolit_encodeBlockAsm12BAvx

matchlen_single_match_nolit_encodeBlockAsm12BAvx:
	TESTL SI, SI
	JZ    match_nolit_end_encodeBlockAsm12BAvx

matchlen_single_loopback_match_nolit_encodeBlockAsm12BAvx:
	MOVB (CX)(BX*1), R8
	CMPB (CX)(BX*1), R8
	JNE  match_nolit_end_encodeBlockAsm12BAvx
	LEAL 1(BX), BX
	DECL SI
	JNZ  matchlen_single_loopback_match_nolit_encodeBlockAsm12BAvx

match_nolit_end_encodeBlockAsm12BAvx:
	MOVL 24(SP), SI
	ADDL $0x04, BX
	MOVQ dst_base+0(FP), R8
	ADDL BX, AX
	CMPL SI, $0x00010000
	JL   two_byte_offset_match_nolit_encodeBlockAsm12BAvx
	CMPL BX, $0x40
	JLE  four_bytes_remain_match_nolit_encodeBlockAsm12BAvx
	MOVB $0xff, (R8)
	MOVL SI, 1(R8)
	LEAL -64(BX), BX
	ADDQ $0x05, R8
	CMPL BX, $0x04
	JL   four_bytes_remain_match_nolit_encodeBlockAsm12BAvx

emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy

cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy

repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

four_bytes_remain_match_nolit_encodeBlockAsm12BAvx:
	TESTL BX, BX
	JZ    match_nolit_emitcopy_end_encodeBlockAsm12BAvx
	MOVB  $0x03, BP
	LEAL  -4(BP)(BX*4), BX
	MOVB  BL, (R8)
	MOVL  SI, 1(R8)
	ADDQ  $0x05, R8
	JMP   match_nolit_emitcopy_end_encodeBlockAsm12BAvx

two_byte_offset_match_nolit_encodeBlockAsm12BAvx:
	CMPL BX, $0x40
	JLE  two_byte_offset_short_match_nolit_encodeBlockAsm12BAvx
	MOVB $0xee, (R8)
	MOVW SI, 1(R8)
	LEAL -60(BX), BX
	ADDQ $0x03, R8

emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	MOVL BX, DI
	LEAL -4(BX), BX
	CMPL DI, $0x08
	JLE  repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL DI, $0x0c
	JGE  cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL SI, $0x00000800
	JLT  repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short

cant_repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	CMPL BX, $0x00000104
	JLT  repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL BX, $0x00010100
	JLT  repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	CMPL BX, $0x0100ffff
	JLT  repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy_short
	LEAL -16842747(BX), BX
	MOVW $0x001d, (R8)
	MOVW $0xfffb, 2(R8)
	MOVB $0xff, 4(R8)
	ADDQ $0x05, R8
	JMP  emit_repeat_again_match_nolit_encodeBlockAsm12BAvx_emit_copy_short

repeat_five_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -65536(BX), BX
	MOVL BX, SI
	MOVW $0x001d, (R8)
	MOVW BX, 2(R8)
	SARL $0x10, SI
	MOVB SI, 4(R8)
	ADDQ $0x05, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_four_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -256(BX), BX
	MOVW $0x0019, (R8)
	MOVW BX, 2(R8)
	ADDQ $0x04, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_three_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	LEAL -4(BX), BX
	MOVW $0x0015, (R8)
	MOVB BL, 2(R8)
	ADDQ $0x03, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	SHLL $0x02, BX
	ORL  $0x01, BX
	MOVW BX, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

repeat_two_offset_match_nolit_encodeBlockAsm12BAvx_emit_copy_short:
	XORQ R9, R9
	LEAL 1(R9)(BX*4), BX
	MOVB SI, 1(R8)
	SARL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

two_byte_offset_short_match_nolit_encodeBlockAsm12BAvx:
	CMPL BX, $0x0c
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12BAvx
	CMPL SI, $0x00000800
	JGE  emit_copy_three_match_nolit_encodeBlockAsm12BAvx
	MOVB $0x01, BP
	LEAL -16(BP)(BX*4), BX
	MOVB SI, 1(R8)
	SHRL $0x08, SI
	SHLL $0x05, SI
	ORL  SI, BX
	MOVB BL, (R8)
	ADDQ $0x02, R8
	JMP  match_nolit_emitcopy_end_encodeBlockAsm12BAvx

emit_copy_three_match_nolit_encodeBlockAsm12BAvx:
	MOVB $0x02, BP
	LEAL -4(BP)(BX*4), BX
	MOVB BL, (R8)
	MOVW SI, 1(R8)
	ADDQ $0x03, R8

match_nolit_emitcopy_end_encodeBlockAsm12BAvx:
	MOVQ R8, dst_base+0(FP)
	MOVL AX, 20(SP)
	CMPL AX, 16(SP)
	JGE  emit_remainder_encodeBlockAsm12BAvx
	CMPQ R8, (SP)
	JL   match_nolit_dst_ok_encodeBlockAsm12BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

match_nolit_dst_ok_encodeBlockAsm12BAvx:
	MOVQ  -2(CX)(AX*1), R8
	MOVQ  $0x0000cf1bbcdcbf9b, R9
	MOVQ  R8, R10
	SHRQ  $0x10, R8
	MOVQ  R8, R11
	SHLQ  $0x10, R10
	IMULQ R9, R10
	SHRQ  $0x34, R10
	SHLQ  $0x10, R11
	IMULQ R9, R11
	SHRQ  $0x34, R11
	MOVL  32(SP)(R10*1), BX
	MOVL  32(SP)(R11*1), BX
	LEAQ  -2(AX), R9
	MOVL  R9, 32(SP)(R10*1)
	MOVL  AX, 32(SP)(R11*1)
	CMPL  (CX), R8
	JEQ   match_nolit_loop_encodeBlockAsm12BAvx
	INCL  AX
	JMP   search_loop_encodeBlockAsm12BAvx

emit_remainder_encodeBlockAsm12BAvx:
	MOVQ src_len+32(FP), AX
	SUBL 20(SP), AX
	MOVQ dst_base+0(FP), BX
	LEAQ (BX)(AX*1), BX
	CMPQ BX, (SP)
	JL   emit_remainder_ok_encodeBlockAsm12BAvx
	MOVQ $0x00000000, ret+48(FP)
	RET

emit_remainder_ok_encodeBlockAsm12BAvx:
	MOVQ src_len+32(FP), AX
	MOVL 20(SP), DX
	CMPL DX, AX
	JEQ  emit_literal_skip_emit_remainder_encodeBlockAsm12BAvx
	MOVL AX, BX
	MOVL AX, 20(SP)
	LEAQ (CX)(DX*1), CX
	SUBL DX, BX
	MOVQ dst_base+0(FP), AX
	MOVL BX, DX
	SUBL $0x01, DX
	JC   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx
	CMPL DX, $0x3c
	JLT  one_byte_emit_remainder_encodeBlockAsm12BAvx
	CMPL DX, $0x00000100
	JLT  two_bytes_emit_remainder_encodeBlockAsm12BAvx
	CMPL DX, $0x00010000
	JLT  three_bytes_emit_remainder_encodeBlockAsm12BAvx
	CMPL DX, $0x01000000
	JLT  four_bytes_emit_remainder_encodeBlockAsm12BAvx
	MOVB $0xfc, (AX)
	MOVL DX, 1(AX)
	ADDQ $0x05, AX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

four_bytes_emit_remainder_encodeBlockAsm12BAvx:
	MOVL DX, BP
	SHRL $0x10, BP
	MOVB $0xf8, (AX)
	MOVW DX, 1(AX)
	MOVB BP, 3(AX)
	ADDQ $0x04, AX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

three_bytes_emit_remainder_encodeBlockAsm12BAvx:
	MOVB $0xf4, (AX)
	MOVW DX, 1(AX)
	ADDQ $0x03, AX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

two_bytes_emit_remainder_encodeBlockAsm12BAvx:
	MOVB $0xf0, (AX)
	MOVB DL, 1(AX)
	ADDQ $0x02, AX
	JMP  memmove_emit_remainder_encodeBlockAsm12BAvx

one_byte_emit_remainder_encodeBlockAsm12BAvx:
	SHLB $0x02, DL
	MOVB DL, (AX)
	ADDQ $0x01, AX

memmove_emit_remainder_encodeBlockAsm12BAvx:
	LEAQ (AX)(BX*1), BP
	MOVL BX, DX
	NOP

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_tail:
	TESTQ DX, DX
	JEQ   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx
	CMPQ  DX, $0x02
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_1or2
	CMPQ  DX, $0x04
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_3
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_4
	CMPQ  DX, $0x08
	JB    emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_5through7
	JE    emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_8
	CMPQ  DX, $0x10
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_9through16
	CMPQ  DX, $0x20
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_17through32
	CMPQ  DX, $0x40
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_33through64
	CMPQ  DX, $0x80
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_65through128
	CMPQ  DX, $0x00000100
	JBE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_129through256
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_avxUnaligned

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_1or2:
	MOVB (CX), BL
	MOVB -1(CX)(DX*1), BP
	MOVB BL, (AX)
	MOVB BP, -1(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_4:
	MOVL (CX), BX
	MOVL BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_3:
	MOVW (CX), BX
	MOVB 2(CX), BP
	MOVW BX, (AX)
	MOVB BP, 2(AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_5through7:
	MOVL (CX), BX
	MOVL -4(CX)(DX*1), BP
	MOVL BX, (AX)
	MOVL BP, -4(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_8:
	MOVQ (CX), BX
	MOVQ BX, (AX)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_9through16:
	MOVQ (CX), BX
	MOVQ -8(CX)(DX*1), BP
	MOVQ BX, (AX)
	MOVQ BP, -8(AX)(DX*1)
	JMP  emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(DX*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(DX*1), X2
	MOVOU -16(CX)(DX*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(DX*1)
	MOVOU X3, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(DX*1), X8
	MOVOU -112(CX)(DX*1), X9
	MOVOU -96(CX)(DX*1), X10
	MOVOU -80(CX)(DX*1), X11
	MOVOU -64(CX)(DX*1), X12
	MOVOU -48(CX)(DX*1), X13
	MOVOU -32(CX)(DX*1), X14
	MOVOU -16(CX)(DX*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(DX*1)
	MOVOU X9, -112(AX)(DX*1)
	MOVOU X10, -96(AX)(DX*1)
	MOVOU X11, -80(AX)(DX*1)
	MOVOU X12, -64(AX)(DX*1)
	MOVOU X13, -48(AX)(DX*1)
	MOVOU X14, -32(AX)(DX*1)
	MOVOU X15, -16(AX)(DX*1)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_256through2048:
	LEAQ  -256(DX), DX
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  DX, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_move_256through2048
	JMP   emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_tail

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_avxUnaligned:
	LEAQ    (CX)(DX*1), BP
	MOVQ    AX, DI
	MOVOU   -128(BP), X5
	MOVOU   -112(BP), X6
	MOVQ    $0x00000080, BX
	ANDQ    $0xffffffe0, AX
	ADDQ    $0x20, AX
	MOVOU   -96(BP), X7
	MOVOU   -80(BP), X8
	MOVQ    AX, SI
	SUBQ    DI, SI
	MOVOU   -64(BP), X9
	MOVOU   -48(BP), X10
	SUBQ    SI, DX
	MOVOU   -32(BP), X11
	MOVOU   -16(BP), X12
	VMOVDQU (CX), Y4
	ADDQ    SI, CX
	SUBQ    BX, DX

emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_gobble_128_loop:
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	ADDQ    BX, CX
	VMOVDQA Y0, (AX)
	VMOVDQA Y1, 32(AX)
	VMOVDQA Y2, 64(AX)
	VMOVDQA Y3, 96(AX)
	ADDQ    BX, AX
	SUBQ    BX, DX
	JA      emit_lit_memmove_emit_remainder_encodeBlockAsm12BAvx_memmove_gobble_128_loop
	ADDQ    BX, DX
	ADDQ    AX, DX
	VMOVDQU Y4, (DI)
	VZEROUPPER
	MOVOU X5, -128(DX)
	MOVOU X6, -112(DX)
	MOVOU X7, -96(DX)
	MOVOU X8, -80(DX)
	MOVOU X9, -64(DX)
	MOVOU X10, -48(DX)
	MOVOU X11, -32(DX)
	MOVOU X12, -16(DX)
	JMP   emit_literal_done_emit_remainder_encodeBlockAsm12BAvx
	MOVQ  BP, AX

emit_literal_done_emit_remainder_encodeBlockAsm12BAvx:
	MOVQ AX, dst_base+0(FP)

emit_literal_skip_emit_remainder_encodeBlockAsm12BAvx:
	MOVQ 8(SP), AX
	SUBQ dst_base+0(FP), AX
	MOVQ AX, ret+48(FP)
	RET

// func emitLiteral(dst []byte, lit []byte) int
// Requires: SSE2
TEXT Â·emitLiteral(SB), NOSPLIT, $0-56
	MOVQ dst_base+0(FP), AX
	MOVQ lit_base+24(FP), CX
	MOVQ lit_len+32(FP), DX
	MOVL DX, BX
	MOVL DX, BP
	SUBL $0x01, BP
	JC   emit_literal_end_standalone
	CMPL BP, $0x3c
	JLT  one_byte_standalone
	CMPL BP, $0x00000100
	JLT  two_bytes_standalone
	CMPL BP, $0x00010000
	JLT  three_bytes_standalone
	CMPL BP, $0x01000000
	JLT  four_bytes_standalone
	MOVB $0xfc, (AX)
	MOVL BP, 1(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  memmove_standalone

four_bytes_standalone:
	MOVL BP, SI
	SHRL $0x10, SI
	MOVB $0xf8, (AX)
	MOVW BP, 1(AX)
	MOVB SI, 3(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  memmove_standalone

three_bytes_standalone:
	MOVB $0xf4, (AX)
	MOVW BP, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  memmove_standalone

two_bytes_standalone:
	MOVB $0xf0, (AX)
	MOVB BP, 1(AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  memmove_standalone

one_byte_standalone:
	SHLB $0x02, BP
	MOVB BP, (AX)
	ADDQ $0x01, BX
	ADDQ $0x01, AX

memmove_standalone:
	MOVL DX, BP
	NOP

emit_lit_memmove_standalone_memmove_tail:
	TESTQ BP, BP
	JEQ   emit_literal_end_standalone
	CMPQ  BP, $0x02
	JBE   emit_lit_memmove_standalone_memmove_move_1or2
	CMPQ  BP, $0x04
	JB    emit_lit_memmove_standalone_memmove_move_3
	JBE   emit_lit_memmove_standalone_memmove_move_4
	CMPQ  BP, $0x08
	JB    emit_lit_memmove_standalone_memmove_move_5through7
	JE    emit_lit_memmove_standalone_memmove_move_8
	CMPQ  BP, $0x10
	JBE   emit_lit_memmove_standalone_memmove_move_9through16
	CMPQ  BP, $0x20
	JBE   emit_lit_memmove_standalone_memmove_move_17through32
	CMPQ  BP, $0x40
	JBE   emit_lit_memmove_standalone_memmove_move_33through64
	CMPQ  BP, $0x80
	JBE   emit_lit_memmove_standalone_memmove_move_65through128
	CMPQ  BP, $0x00000100
	JBE   emit_lit_memmove_standalone_memmove_move_129through256
	JMP   emit_lit_memmove_standalone_memmove_move_256through2048

emit_lit_memmove_standalone_memmove_move_1or2:
	MOVB (CX), DL
	MOVB -1(CX)(BP*1), CL
	MOVB DL, (AX)
	MOVB CL, -1(AX)(BP*1)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_4:
	MOVL (CX), DX
	MOVL DX, (AX)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_3:
	MOVW (CX), DX
	MOVB 2(CX), CL
	MOVW DX, (AX)
	MOVB CL, 2(AX)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_5through7:
	MOVL (CX), DX
	MOVL -4(CX)(BP*1), CX
	MOVL DX, (AX)
	MOVL CX, -4(AX)(BP*1)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_8:
	MOVQ (CX), DX
	MOVQ DX, (AX)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_9through16:
	MOVQ (CX), DX
	MOVQ -8(CX)(BP*1), CX
	MOVQ DX, (AX)
	MOVQ CX, -8(AX)(BP*1)
	JMP  emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(BP*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(BP*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(BP*1), X2
	MOVOU -16(CX)(BP*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(BP*1)
	MOVOU X3, -16(AX)(BP*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(BP*1), X12
	MOVOU -48(CX)(BP*1), X13
	MOVOU -32(CX)(BP*1), X14
	MOVOU -16(CX)(BP*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(BP*1)
	MOVOU X13, -48(AX)(BP*1)
	MOVOU X14, -32(AX)(BP*1)
	MOVOU X15, -16(AX)(BP*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(BP*1), X8
	MOVOU -112(CX)(BP*1), X9
	MOVOU -96(CX)(BP*1), X10
	MOVOU -80(CX)(BP*1), X11
	MOVOU -64(CX)(BP*1), X12
	MOVOU -48(CX)(BP*1), X13
	MOVOU -32(CX)(BP*1), X14
	MOVOU -16(CX)(BP*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(BP*1)
	MOVOU X9, -112(AX)(BP*1)
	MOVOU X10, -96(AX)(BP*1)
	MOVOU X11, -80(AX)(BP*1)
	MOVOU X12, -64(AX)(BP*1)
	MOVOU X13, -48(AX)(BP*1)
	MOVOU X14, -32(AX)(BP*1)
	MOVOU X15, -16(AX)(BP*1)
	JMP   emit_literal_end_standalone

emit_lit_memmove_standalone_memmove_move_256through2048:
	LEAQ  -256(BP), BP
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  BP, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_standalone_memmove_move_256through2048
	JMP   emit_lit_memmove_standalone_memmove_tail

emit_literal_end_standalone:
	MOVQ BX, ret+48(FP)
	RET

// func emitLiteralAvx(dst []byte, lit []byte) int
// Requires: AVX, SSE2
TEXT Â·emitLiteralAvx(SB), NOSPLIT, $0-56
	MOVQ dst_base+0(FP), AX
	MOVQ lit_base+24(FP), CX
	MOVQ lit_len+32(FP), DX
	MOVL DX, BX
	MOVL DX, BP
	SUBL $0x01, BP
	JC   emit_literal_end_avx_standalone
	CMPL BP, $0x3c
	JLT  one_byte_standalone
	CMPL BP, $0x00000100
	JLT  two_bytes_standalone
	CMPL BP, $0x00010000
	JLT  three_bytes_standalone
	CMPL BP, $0x01000000
	JLT  four_bytes_standalone
	MOVB $0xfc, (AX)
	MOVL BP, 1(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  memmove_standalone

four_bytes_standalone:
	MOVL BP, SI
	SHRL $0x10, SI
	MOVB $0xf8, (AX)
	MOVW BP, 1(AX)
	MOVB SI, 3(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  memmove_standalone

three_bytes_standalone:
	MOVB $0xf4, (AX)
	MOVW BP, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  memmove_standalone

two_bytes_standalone:
	MOVB $0xf0, (AX)
	MOVB BP, 1(AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  memmove_standalone

one_byte_standalone:
	SHLB $0x02, BP
	MOVB BP, (AX)
	ADDQ $0x01, BX
	ADDQ $0x01, AX

memmove_standalone:
	MOVL DX, BP
	NOP

emit_lit_memmove_standalone_memmove_tail:
	TESTQ BP, BP
	JEQ   emit_literal_end_avx_standalone
	CMPQ  BP, $0x02
	JBE   emit_lit_memmove_standalone_memmove_move_1or2
	CMPQ  BP, $0x04
	JB    emit_lit_memmove_standalone_memmove_move_3
	JBE   emit_lit_memmove_standalone_memmove_move_4
	CMPQ  BP, $0x08
	JB    emit_lit_memmove_standalone_memmove_move_5through7
	JE    emit_lit_memmove_standalone_memmove_move_8
	CMPQ  BP, $0x10
	JBE   emit_lit_memmove_standalone_memmove_move_9through16
	CMPQ  BP, $0x20
	JBE   emit_lit_memmove_standalone_memmove_move_17through32
	CMPQ  BP, $0x40
	JBE   emit_lit_memmove_standalone_memmove_move_33through64
	CMPQ  BP, $0x80
	JBE   emit_lit_memmove_standalone_memmove_move_65through128
	CMPQ  BP, $0x00000100
	JBE   emit_lit_memmove_standalone_memmove_move_129through256
	JMP   emit_lit_memmove_standalone_memmove_avxUnaligned

emit_lit_memmove_standalone_memmove_move_1or2:
	MOVB (CX), DL
	MOVB -1(CX)(BP*1), SI
	MOVB DL, (AX)
	MOVB SI, -1(AX)(BP*1)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_4:
	MOVL (CX), DX
	MOVL DX, (AX)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_3:
	MOVW (CX), DX
	MOVB 2(CX), SI
	MOVW DX, (AX)
	MOVB SI, 2(AX)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_5through7:
	MOVL (CX), DX
	MOVL -4(CX)(BP*1), SI
	MOVL DX, (AX)
	MOVL SI, -4(AX)(BP*1)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_8:
	MOVQ (CX), DX
	MOVQ DX, (AX)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_9through16:
	MOVQ (CX), DX
	MOVQ -8(CX)(BP*1), SI
	MOVQ DX, (AX)
	MOVQ SI, -8(AX)(BP*1)
	JMP  emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_17through32:
	MOVOU (CX), X0
	MOVOU -16(CX)(BP*1), X1
	MOVOU X0, (AX)
	MOVOU X1, -16(AX)(BP*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_33through64:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU -32(CX)(BP*1), X2
	MOVOU -16(CX)(BP*1), X3
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, -32(AX)(BP*1)
	MOVOU X3, -16(AX)(BP*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_65through128:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU -64(CX)(BP*1), X12
	MOVOU -48(CX)(BP*1), X13
	MOVOU -32(CX)(BP*1), X14
	MOVOU -16(CX)(BP*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X12, -64(AX)(BP*1)
	MOVOU X13, -48(AX)(BP*1)
	MOVOU X14, -32(AX)(BP*1)
	MOVOU X15, -16(AX)(BP*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_129through256:
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU -128(CX)(BP*1), X8
	MOVOU -112(CX)(BP*1), X9
	MOVOU -96(CX)(BP*1), X10
	MOVOU -80(CX)(BP*1), X11
	MOVOU -64(CX)(BP*1), X12
	MOVOU -48(CX)(BP*1), X13
	MOVOU -32(CX)(BP*1), X14
	MOVOU -16(CX)(BP*1), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, -128(AX)(BP*1)
	MOVOU X9, -112(AX)(BP*1)
	MOVOU X10, -96(AX)(BP*1)
	MOVOU X11, -80(AX)(BP*1)
	MOVOU X12, -64(AX)(BP*1)
	MOVOU X13, -48(AX)(BP*1)
	MOVOU X14, -32(AX)(BP*1)
	MOVOU X15, -16(AX)(BP*1)
	JMP   emit_literal_end_avx_standalone

emit_lit_memmove_standalone_memmove_move_256through2048:
	LEAQ  -256(BP), BP
	MOVOU (CX), X0
	MOVOU 16(CX), X1
	MOVOU 32(CX), X2
	MOVOU 48(CX), X3
	MOVOU 64(CX), X4
	MOVOU 80(CX), X5
	MOVOU 96(CX), X6
	MOVOU 112(CX), X7
	MOVOU 128(CX), X8
	MOVOU 144(CX), X9
	MOVOU 160(CX), X10
	MOVOU 176(CX), X11
	MOVOU 192(CX), X12
	MOVOU 208(CX), X13
	MOVOU 224(CX), X14
	MOVOU 240(CX), X15
	MOVOU X0, (AX)
	MOVOU X1, 16(AX)
	MOVOU X2, 32(AX)
	MOVOU X3, 48(AX)
	MOVOU X4, 64(AX)
	MOVOU X5, 80(AX)
	MOVOU X6, 96(AX)
	MOVOU X7, 112(AX)
	MOVOU X8, 128(AX)
	MOVOU X9, 144(AX)
	MOVOU X10, 160(AX)
	MOVOU X11, 176(AX)
	MOVOU X12, 192(AX)
	MOVOU X13, 208(AX)
	MOVOU X14, 224(AX)
	MOVOU X15, 240(AX)
	CMPQ  BP, $0x00000100
	LEAQ  256(CX), CX
	LEAQ  256(AX), AX
	JGE   emit_lit_memmove_standalone_memmove_move_256through2048
	JMP   emit_lit_memmove_standalone_memmove_tail

emit_lit_memmove_standalone_memmove_avxUnaligned:
	LEAQ    (CX)(BP*1), SI
	MOVQ    AX, R8
	MOVOU   -128(SI), X5
	MOVOU   -112(SI), X6
	MOVQ    $0x00000080, DX
	ANDQ    $0xffffffe0, AX
	ADDQ    $0x20, AX
	MOVOU   -96(SI), X7
	MOVOU   -80(SI), X8
	MOVQ    AX, DI
	SUBQ    R8, DI
	MOVOU   -64(SI), X9
	MOVOU   -48(SI), X10
	SUBQ    DI, BP
	MOVOU   -32(SI), X11
	MOVOU   -16(SI), X12
	VMOVDQU (CX), Y4
	ADDQ    DI, CX
	SUBQ    DX, BP

emit_lit_memmove_standalone_memmove_gobble_128_loop:
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	ADDQ    DX, CX
	VMOVDQA Y0, (AX)
	VMOVDQA Y1, 32(AX)
	VMOVDQA Y2, 64(AX)
	VMOVDQA Y3, 96(AX)
	ADDQ    DX, AX
	SUBQ    DX, BP
	JA      emit_lit_memmove_standalone_memmove_gobble_128_loop
	ADDQ    DX, BP
	ADDQ    AX, BP
	VMOVDQU Y4, (R8)
	VZEROUPPER
	MOVOU X5, -128(BP)
	MOVOU X6, -112(BP)
	MOVOU X7, -96(BP)
	MOVOU X8, -80(BP)
	MOVOU X9, -64(BP)
	MOVOU X10, -48(BP)
	MOVOU X11, -32(BP)
	MOVOU X12, -16(BP)

emit_literal_end_avx_standalone:
	MOVQ BX, ret+48(FP)
	RET

// func emitRepeat(dst []byte, offset int, length int) int
TEXT Â·emitRepeat(SB), NOSPLIT, $0-48
	XORQ BX, BX
	MOVQ dst_base+0(FP), AX
	MOVQ offset+24(FP), CX
	MOVQ length+32(FP), DX

emit_repeat_again_standalone:
	MOVL DX, BP
	LEAL -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_two_standalone
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offset_standalone
	CMPL CX, $0x00000800
	JLT  repeat_two_offset_standalone

cant_repeat_two_offset_standalone:
	CMPL DX, $0x00000104
	JLT  repeat_three_standalone
	CMPL DX, $0x00010100
	JLT  repeat_four_standalone
	CMPL DX, $0x0100ffff
	JLT  repeat_five_standalone
	LEAL -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_again_standalone

repeat_five_standalone:
	LEAL -65536(DX), DX
	MOVL DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARL $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  gen_emit_repeat_end

repeat_four_standalone:
	LEAL -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  gen_emit_repeat_end

repeat_three_standalone:
	LEAL -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  gen_emit_repeat_end

repeat_two_standalone:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_repeat_end

repeat_two_offset_standalone:
	XORQ BP, BP
	LEAL 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX

gen_emit_repeat_end:
	MOVQ BX, ret+40(FP)
	RET

// func emitCopy(dst []byte, offset int, length int) int
TEXT Â·emitCopy(SB), NOSPLIT, $0-48
	XORQ BX, BX
	MOVQ dst_base+0(FP), AX
	MOVQ offset+24(FP), CX
	MOVQ length+32(FP), DX
	CMPL CX, $0x00010000
	JL   two_byte_offset_standalone
	CMPL DX, $0x40
	JLE  four_bytes_remain_standalone
	MOVB $0xff, (AX)
	MOVL CX, 1(AX)
	LEAL -64(DX), DX
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	CMPL DX, $0x04
	JL   four_bytes_remain_standalone

emit_repeat_again_standalone_emit_copy:
	MOVL DX, BP
	LEAL -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_two_standalone_emit_copy
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offset_standalone_emit_copy
	CMPL CX, $0x00000800
	JLT  repeat_two_offset_standalone_emit_copy

cant_repeat_two_offset_standalone_emit_copy:
	CMPL DX, $0x00000104
	JLT  repeat_three_standalone_emit_copy
	CMPL DX, $0x00010100
	JLT  repeat_four_standalone_emit_copy
	CMPL DX, $0x0100ffff
	JLT  repeat_five_standalone_emit_copy
	LEAL -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_again_standalone_emit_copy

repeat_five_standalone_emit_copy:
	LEAL -65536(DX), DX
	MOVL DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARL $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  gen_emit_copy_end

repeat_four_standalone_emit_copy:
	LEAL -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  gen_emit_copy_end

repeat_three_standalone_emit_copy:
	LEAL -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  gen_emit_copy_end

repeat_two_standalone_emit_copy:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

repeat_two_offset_standalone_emit_copy:
	XORQ BP, BP
	LEAL 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

four_bytes_remain_standalone:
	TESTL DX, DX
	JZ    gen_emit_copy_end
	MOVB  $0x03, BP
	LEAL  -4(BP)(DX*4), DX
	MOVB  DL, (AX)
	MOVL  CX, 1(AX)
	ADDQ  $0x05, BX
	ADDQ  $0x05, AX
	JMP   gen_emit_copy_end

two_byte_offset_standalone:
	CMPL DX, $0x40
	JLE  two_byte_offset_short_standalone
	MOVB $0xee, (AX)
	MOVW CX, 1(AX)
	LEAL -60(DX), DX
	ADDQ $0x03, AX
	ADDQ $0x03, BX

emit_repeat_again_standalone_emit_copy_short:
	MOVL DX, BP
	LEAL -4(DX), DX
	CMPL BP, $0x08
	JLE  repeat_two_standalone_emit_copy_short
	CMPL BP, $0x0c
	JGE  cant_repeat_two_offset_standalone_emit_copy_short
	CMPL CX, $0x00000800
	JLT  repeat_two_offset_standalone_emit_copy_short

cant_repeat_two_offset_standalone_emit_copy_short:
	CMPL DX, $0x00000104
	JLT  repeat_three_standalone_emit_copy_short
	CMPL DX, $0x00010100
	JLT  repeat_four_standalone_emit_copy_short
	CMPL DX, $0x0100ffff
	JLT  repeat_five_standalone_emit_copy_short
	LEAL -16842747(DX), DX
	MOVW $0x001d, (AX)
	MOVW $0xfffb, 2(AX)
	MOVB $0xff, 4(AX)
	ADDQ $0x05, AX
	ADDQ $0x05, BX
	JMP  emit_repeat_again_standalone_emit_copy_short

repeat_five_standalone_emit_copy_short:
	LEAL -65536(DX), DX
	MOVL DX, CX
	MOVW $0x001d, (AX)
	MOVW DX, 2(AX)
	SARL $0x10, CX
	MOVB CL, 4(AX)
	ADDQ $0x05, BX
	ADDQ $0x05, AX
	JMP  gen_emit_copy_end

repeat_four_standalone_emit_copy_short:
	LEAL -256(DX), DX
	MOVW $0x0019, (AX)
	MOVW DX, 2(AX)
	ADDQ $0x04, BX
	ADDQ $0x04, AX
	JMP  gen_emit_copy_end

repeat_three_standalone_emit_copy_short:
	LEAL -4(DX), DX
	MOVW $0x0015, (AX)
	MOVB DL, 2(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX
	JMP  gen_emit_copy_end

repeat_two_standalone_emit_copy_short:
	SHLL $0x02, DX
	ORL  $0x01, DX
	MOVW DX, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

repeat_two_offset_standalone_emit_copy_short:
	XORQ BP, BP
	LEAL 1(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SARL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

two_byte_offset_short_standalone:
	CMPL DX, $0x0c
	JGE  emit_copy_three_standalone
	CMPL CX, $0x00000800
	JGE  emit_copy_three_standalone
	MOVB $0x01, BP
	LEAL -16(BP)(DX*4), DX
	MOVB CL, 1(AX)
	SHRL $0x08, CX
	SHLL $0x05, CX
	ORL  CX, DX
	MOVB DL, (AX)
	ADDQ $0x02, BX
	ADDQ $0x02, AX
	JMP  gen_emit_copy_end

emit_copy_three_standalone:
	MOVB $0x02, BP
	LEAL -4(BP)(DX*4), DX
	MOVB DL, (AX)
	MOVW CX, 1(AX)
	ADDQ $0x03, BX
	ADDQ $0x03, AX

gen_emit_copy_end:
	MOVQ BX, ret+40(FP)
	RET

// func matchLen(a []byte, b []byte) int
TEXT Â·matchLen(SB), NOSPLIT, $0-56
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ a_len+8(FP), DX
	XORL BP, BP
	CMPL DX, $0x08
	JL   matchlen_single_standalone

matchlen_loopback_standalone:
	MOVQ  (AX)(BP*1), BX
	XORQ  (CX)(BP*1), BX
	TESTQ BX, BX
	JZ    matchlen_loop_standalone
	BSFQ  BX, BX
	SARQ  $0x03, BX
	LEAL  (BP)(BX*1), BP
	JMP   gen_match_len_end

matchlen_loop_standalone:
	LEAL -8(DX), DX
	LEAL 8(BP), BP
	CMPL DX, $0x08
	JGE  matchlen_loopback_standalone

matchlen_single_standalone:
	TESTL DX, DX
	JZ    gen_match_len_end

matchlen_single_loopback_standalone:
	MOVB (AX)(BP*1), BL
	CMPB (CX)(BP*1), BL
	JNE  gen_match_len_end
	LEAL 1(BP), BP
	DECL DX
	JNZ  matchlen_single_loopback_standalone

gen_match_len_end:
	MOVQ BP, ret+48(FP)
	RET
